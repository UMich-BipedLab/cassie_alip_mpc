%BYTESTOCASSIEINBUS Convert a byte array to a CassieInBus bus.

% Copyright 2018 Agility Robotics
% Generated automatically by BusModule.generateUnpackingSystem

classdef BytesToCassieInBus < ...
    matlab.System & ...
    matlab.system.mixin.Propagates %#codegen

  % PROTECTED METHODS =====================================================
  methods (Access = protected)
    % SYSTEM CLASS METHODS ================================================
    function setupImpl(~)
      %SETUPIMPL Initialize System object.
    end % setupImpl

    function bus = stepImpl(~, bytes)
      %STEPIMPL System output and state update equations.

      bus = struct(...
        'pelvis', struct(...
          'radio', struct(...
            'channel', typecast(bytes(1:28), 'int16')), ...
          'sto', logical(bytes(29)), ...
          'piezoState', logical(bytes(30)), ...
          'piezoTone', bytes(31)), ...
        'leftLeg', struct(...
          'hipRollDrive', struct(...
            'controlWord', typecast(bytes(32:33), 'uint16'), ...
            'torque', double(typecast(bytes(34:37), 'single'))), ...
          'hipYawDrive', struct(...
            'controlWord', typecast(bytes(38:39), 'uint16'), ...
            'torque', double(typecast(bytes(40:43), 'single'))), ...
          'hipPitchDrive', struct(...
            'controlWord', typecast(bytes(44:45), 'uint16'), ...
            'torque', double(typecast(bytes(46:49), 'single'))), ...
          'kneeDrive', struct(...
            'controlWord', typecast(bytes(50:51), 'uint16'), ...
            'torque', double(typecast(bytes(52:55), 'single'))), ...
          'footDrive', struct(...
            'controlWord', typecast(bytes(56:57), 'uint16'), ...
            'torque', double(typecast(bytes(58:61), 'single')))), ...
        'rightLeg', struct(...
          'hipRollDrive', struct(...
            'controlWord', typecast(bytes(62:63), 'uint16'), ...
            'torque', double(typecast(bytes(64:67), 'single'))), ...
          'hipYawDrive', struct(...
            'controlWord', typecast(bytes(68:69), 'uint16'), ...
            'torque', double(typecast(bytes(70:73), 'single'))), ...
          'hipPitchDrive', struct(...
            'controlWord', typecast(bytes(74:75), 'uint16'), ...
            'torque', double(typecast(bytes(76:79), 'single'))), ...
          'kneeDrive', struct(...
            'controlWord', typecast(bytes(80:81), 'uint16'), ...
            'torque', double(typecast(bytes(82:85), 'single'))), ...
          'footDrive', struct(...
            'controlWord', typecast(bytes(86:87), 'uint16'), ...
            'torque', double(typecast(bytes(88:91), 'single')))));
    end % stepImpl

    function resetImpl(~)
      %RESETIMPL Reset System object states.
    end % resetImpl

    function name_1 = getInputNamesImpl(~)
      %GETINPUTNAMESIMPL Return input port names for System block.
      name_1 = '';
    end % getInputNamesImpl

    function name_1 = getOutputNamesImpl(~)
      %GETOUTPUTNAMESIMPL Return output port names for System block.
      name_1 = '';
    end % getOutputNamesImpl

    % PROPAGATES CLASS METHODS ============================================
    function sz_1 = getOutputSizeImpl(~)
      %GETOUTPUTSIZEIMPL Get sizes of output ports.
      sz_1 = [1, 1];
    end % getOutputSizeImpl

    function dt_1 = getOutputDataTypeImpl(~)
      %GETOUTPUTDATATYPEIMPL Get data types of output ports.
      dt_1 = 'CassieInBus';
    end % getOutputDataTypeImpl

    function cp_1 = isOutputComplexImpl(~)
      %ISOUTPUTCOMPLEXIMPL Complexity of output ports.
      cp_1 = false;
    end % isOutputComplexImpl

    function flag_1 = isOutputFixedSizeImpl(~)
      %ISOUTPUTFIXEDSIZEIMPL Fixed-size or variable-size output ports.
      flag_1 = true;
    end % isOutputFixedSizeImpl
  end % methods
end % classdef