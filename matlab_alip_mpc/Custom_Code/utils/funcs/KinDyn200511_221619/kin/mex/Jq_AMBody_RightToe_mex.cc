/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:31:06 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t319;
  double t320;
  double t322;
  double t25;
  double t3229;
  double t2168;
  double t2171;
  double t3335;
  double t3658;
  double t3129;
  double t3397;
  double t3536;
  double t2128;
  double t3934;
  double t4051;
  double t4122;
  double t5100;
  double t3550;
  double t4731;
  double t4751;
  double t2095;
  double t5293;
  double t5331;
  double t5447;
  double t312;
  double t315;
  double t1286;
  double t6575;
  double t4841;
  double t5480;
  double t5956;
  double t1916;
  double t6627;
  double t6629;
  double t6646;
  double t332;
  double t239;
  double t6108;
  double t6662;
  double t6667;
  double t7077;
  double t7086;
  double t7179;
  double t7322;
  double t7323;
  double t1553;
  double t7944;
  double t8038;
  double t8116;
  double t7905;
  double t8413;
  double t8414;
  double t8486;
  double t8490;
  double t8418;
  double t8503;
  double t8509;
  double t8603;
  double t8605;
  double t8652;
  double t8523;
  double t8653;
  double t8685;
  double t8744;
  double t8745;
  double t8746;
  double t8750;
  double t8785;
  double t6788;
  double t6811;
  double t7068;
  double t7196;
  double t7330;
  double t7456;
  double t7555;
  double t7754;
  double t7776;
  double t7779;
  double t7781;
  double t7783;
  double t7793;
  double t7850;
  double t8690;
  double t8699;
  double t8739;
  double t8749;
  double t8786;
  double t8789;
  double t8809;
  double t8814;
  double t8819;
  double t8821;
  double t8837;
  double t8845;
  double t8846;
  double t8847;
  double t248;
  double t305;
  double t347;
  double t361;
  double t478;
  double t1292;
  double t1541;
  double t1610;
  double t1611;
  double t1733;
  double t1749;
  double t9019;
  double t9042;
  double t9053;
  double t9054;
  double t9055;
  double t9069;
  double t9073;
  double t9074;
  double t9078;
  double t9091;
  double t9095;
  double t9103;
  double t9106;
  double t9107;
  double t9147;
  double t9155;
  double t9160;
  double t9161;
  double t8911;
  double t8914;
  double t8915;
  double t8934;
  double t8947;
  double t8971;
  double t8972;
  double t9006;
  double t9013;
  double t9186;
  double t9182;
  double t9183;
  double t9184;
  double t9206;
  double t9201;
  double t9202;
  double t9204;
  double t9185;
  double t9187;
  double t9188;
  double t9189;
  double t9190;
  double t9191;
  double t9192;
  double t9193;
  double t9197;
  double t9205;
  double t9207;
  double t9208;
  double t9209;
  double t9211;
  double t9212;
  double t9214;
  double t9215;
  double t9216;
  double t9172;
  double t9173;
  double t9174;
  double t9175;
  double t9176;
  double t9177;
  double t9178;
  double t9179;
  double t9180;
  double t9247;
  double t9250;
  double t9251;
  double t9252;
  double t9253;
  double t9254;
  double t9256;
  double t9257;
  double t9259;
  double t9260;
  double t9261;
  double t9262;
  double t9263;
  double t9264;
  double t9267;
  double t9268;
  double t9272;
  double t9273;
  double t9274;
  double t9275;
  double t9276;
  double t9277;
  double t9279;
  double t9280;
  double t9282;
  double t9283;
  double t9284;
  double t9285;
  double t9229;
  double t9230;
  double t9231;
  double t9233;
  double t9234;
  double t9236;
  double t9237;
  double t9239;
  double t9240;
  double t9241;
  double t9242;
  double t9243;
  double t9244;
  double t9245;
  double t9300;
  double t9301;
  double t9302;
  double t9298;
  double t9311;
  double t9312;
  double t9313;
  double t9306;
  double t9307;
  double t9308;
  double t9327;
  double t9329;
  double t9330;
  double t9333;
  double t9340;
  double t9343;
  double t9344;
  double t9336;
  double t9337;
  double t9338;
  double t9299;
  double t9303;
  double t9304;
  double t9309;
  double t9314;
  double t9315;
  double t9316;
  double t9317;
  double t9318;
  double t9319;
  double t9320;
  double t9321;
  double t9322;
  double t9324;
  double t9325;
  double t9331;
  double t9332;
  double t9334;
  double t9339;
  double t9345;
  double t9346;
  double t9347;
  double t9348;
  double t9349;
  double t9350;
  double t9351;
  double t9352;
  double t9353;
  double t9355;
  double t9356;
  double t9363;
  double t9364;
  double t9365;
  double t9367;
  double t9371;
  double t9373;
  double t9374;
  double t9366;
  double t9368;
  double t9369;
  double t9383;
  double t9384;
  double t9386;
  double t9377;
  double t9379;
  double t9380;
  double t9400;
  double t9402;
  double t9403;
  double t9405;
  double t9406;
  double t9407;
  double t9408;
  double t9412;
  double t9413;
  double t9414;
  double t9420;
  double t9422;
  double t9423;
  double t9416;
  double t9417;
  double t9418;
  double t9370;
  double t9375;
  double t9376;
  double t9381;
  double t9387;
  double t9388;
  double t9389;
  double t9390;
  double t9391;
  double t9392;
  double t9393;
  double t9394;
  double t9395;
  double t9396;
  double t9398;
  double t9409;
  double t9410;
  double t9415;
  double t9419;
  double t9424;
  double t9425;
  double t9426;
  double t9427;
  double t9428;
  double t9429;
  double t9430;
  double t9431;
  double t9433;
  double t9434;
  double t9435;
  double t9442;
  double t9445;
  double t9446;
  double t9448;
  double t9444;
  double t9449;
  double t9453;
  double t9455;
  double t9456;
  double t9457;
  double t9463;
  double t9466;
  double t9468;
  double t9454;
  double t9459;
  double t9460;
  double t9478;
  double t9480;
  double t9481;
  double t9473;
  double t9474;
  double t9476;
  double t9502;
  double t9503;
  double t9508;
  double t9507;
  double t9509;
  double t9510;
  double t9511;
  double t9512;
  double t9513;
  double t9514;
  double t9516;
  double t9518;
  double t9521;
  double t9522;
  double t9523;
  double t9530;
  double t9531;
  double t9532;
  double t9525;
  double t9526;
  double t9527;
  double t9462;
  double t9470;
  double t9471;
  double t9477;
  double t9482;
  double t9484;
  double t9486;
  double t9489;
  double t9490;
  double t9491;
  double t9493;
  double t9494;
  double t9495;
  double t9496;
  double t9498;
  double t9519;
  double t9520;
  double t9524;
  double t9529;
  double t9535;
  double t9536;
  double t9537;
  double t9538;
  double t9539;
  double t9541;
  double t9542;
  double t9543;
  double t9544;
  double t9545;
  double t9546;
  double t9553;
  double t9554;
  double t9556;
  double t9558;
  double t9557;
  double t9559;
  double t9560;
  double t9564;
  double t9565;
  double t9566;
  double t9562;
  double t9567;
  double t9569;
  double t9571;
  double t9572;
  double t9573;
  double t9577;
  double t9578;
  double t9579;
  double t9570;
  double t9574;
  double t9575;
  double t9586;
  double t9587;
  double t9588;
  double t9582;
  double t9583;
  double t9584;
  double t9604;
  double t9605;
  double t9606;
  double t9608;
  double t9609;
  double t9610;
  double t9607;
  double t9611;
  double t9613;
  double t9614;
  double t9615;
  double t9616;
  double t9617;
  double t9619;
  double t9620;
  double t9623;
  double t9624;
  double t9626;
  double t9633;
  double t9634;
  double t9636;
  double t9628;
  double t9629;
  double t9631;
  double t9576;
  double t9580;
  double t9581;
  double t9585;
  double t9590;
  double t9591;
  double t9592;
  double t9593;
  double t9594;
  double t9595;
  double t9596;
  double t9598;
  double t9599;
  double t9600;
  double t9601;
  double t9621;
  double t9622;
  double t9627;
  double t9632;
  double t9638;
  double t9639;
  double t9640;
  double t9643;
  double t9644;
  double t9645;
  double t9646;
  double t9647;
  double t9648;
  double t9649;
  double t9650;
  double t9603;
  double t9651;
  double t9653;
  double t9654;
  double t9655;
  double t9656;
  double t9657;
  t319 = Cos(var1[14]);
  t320 = -1.*t319;
  t322 = 0. + t320;
  t25 = Cos(var1[4]);
  t3229 = Cos(var1[18]);
  t2168 = Cos(var1[19]);
  t2171 = Sin(var1[18]);
  t3335 = Sin(var1[19]);
  t3658 = Cos(var1[17]);
  t3129 = t2168*t2171;
  t3397 = t3229*t3335;
  t3536 = 0. + t3129 + t3397;
  t2128 = Sin(var1[17]);
  t3934 = t3229*t2168;
  t4051 = -1.*t2171*t3335;
  t4122 = 0. + t3934 + t4051;
  t5100 = Cos(var1[16]);
  t3550 = -1.*t2128*t3536;
  t4731 = t3658*t4122;
  t4751 = 0. + t3550 + t4731;
  t2095 = Sin(var1[16]);
  t5293 = t3658*t3536;
  t5331 = t2128*t4122;
  t5447 = 0. + t5293 + t5331;
  t312 = Sin(var1[4]);
  t315 = Cos(var1[5]);
  t1286 = Cos(var1[13]);
  t6575 = Cos(var1[15]);
  t4841 = t2095*t4751;
  t5480 = t5100*t5447;
  t5956 = 0. + t4841 + t5480;
  t1916 = Sin(var1[15]);
  t6627 = t5100*t4751;
  t6629 = -1.*t2095*t5447;
  t6646 = 0. + t6627 + t6629;
  t332 = Sin(var1[13]);
  t239 = Sin(var1[14]);
  t6108 = -1.*t1916*t5956;
  t6662 = t6575*t6646;
  t6667 = 0. + t6108 + t6662;
  t7077 = t6575*t5956;
  t7086 = t1916*t6646;
  t7179 = 0. + t7077 + t7086;
  t7322 = t239*t6667;
  t7323 = 0. + t7322;
  t1553 = Sin(var1[5]);
  t7944 = -1.*t3229*t2168;
  t8038 = t2171*t3335;
  t8116 = 0. + t7944 + t8038;
  t7905 = t2128*t3536;
  t8413 = t3658*t8116;
  t8414 = 0. + t7905 + t8413;
  t8486 = -1.*t2128*t8116;
  t8490 = 0. + t5293 + t8486;
  t8418 = -1.*t2095*t8414;
  t8503 = t5100*t8490;
  t8509 = 0. + t8418 + t8503;
  t8603 = t5100*t8414;
  t8605 = t2095*t8490;
  t8652 = 0. + t8603 + t8605;
  t8523 = t6575*t8509;
  t8653 = -1.*t1916*t8652;
  t8685 = 0. + t8523 + t8653;
  t8744 = t1916*t8509;
  t8745 = t6575*t8652;
  t8746 = 0. + t8744 + t8745;
  t8750 = t239*t8685;
  t8785 = 0. + t8750;
  t6788 = t319*t6667;
  t6811 = 0. + t6788;
  t7068 = -1.*t25*t6811;
  t7196 = t1286*t7179;
  t7330 = t332*t7323;
  t7456 = 0. + t7196 + t7330;
  t7555 = t315*t7456;
  t7754 = -1.*t332*t7179;
  t7776 = t1286*t7323;
  t7779 = 0. + t7754 + t7776;
  t7781 = t7779*t1553;
  t7783 = 0. + t7555 + t7781;
  t7793 = -1.*t312*t7783;
  t7850 = t7068 + t7793;
  t8690 = t319*t8685;
  t8699 = 0. + t8690;
  t8739 = -1.*t25*t8699;
  t8749 = t1286*t8746;
  t8786 = t332*t8785;
  t8789 = 0. + t8749 + t8786;
  t8809 = t315*t8789;
  t8814 = -1.*t332*t8746;
  t8819 = t1286*t8785;
  t8821 = 0. + t8814 + t8819;
  t8837 = t8821*t1553;
  t8845 = 0. + t8809 + t8837;
  t8846 = -1.*t312*t8845;
  t8847 = t8739 + t8846;
  t248 = 0. + t239;
  t305 = -1.*t25*t248;
  t347 = t322*t332;
  t361 = 0. + t347;
  t478 = t315*t361;
  t1292 = t1286*t322;
  t1541 = 0. + t1292;
  t1610 = t1541*t1553;
  t1611 = 0. + t478 + t1610;
  t1733 = -1.*t312*t1611;
  t1749 = t305 + t1733;
  t9019 = -1.*t315*t7456;
  t9042 = -1.*t7779*t1553;
  t9053 = t9019 + t9042;
  t9054 = var2[4]*t9053;
  t9055 = t315*t7779;
  t9069 = -1.*t7456*t1553;
  t9073 = t9055 + t9069;
  t9074 = var2[3]*t25*t9073;
  t9078 = t9054 + t9074;
  t9091 = -1.*t315*t8789;
  t9095 = -1.*t8821*t1553;
  t9103 = t9091 + t9095;
  t9106 = var2[4]*t9103;
  t9107 = t315*t8821;
  t9147 = -1.*t8789*t1553;
  t9155 = t9107 + t9147;
  t9160 = var2[3]*t25*t9155;
  t9161 = t9106 + t9160;
  t8911 = -1.*t315*t361;
  t8914 = -1.*t1541*t1553;
  t8915 = t8911 + t8914;
  t8934 = var2[4]*t8915;
  t8947 = t1541*t315;
  t8971 = -1.*t361*t1553;
  t8972 = t8947 + t8971;
  t9006 = var2[3]*t25*t8972;
  t9013 = t8934 + t9006;
  t9186 = t7754 + t7776;
  t9182 = -1.*t1286*t7179;
  t9183 = -1.*t332*t7323;
  t9184 = t9182 + t9183;
  t9206 = t8814 + t8819;
  t9201 = -1.*t1286*t8746;
  t9202 = -1.*t332*t8785;
  t9204 = t9201 + t9202;
  t9185 = t315*t9184;
  t9187 = -1.*t9186*t1553;
  t9188 = t9185 + t9187;
  t9189 = var2[4]*t9188;
  t9190 = t315*t9186;
  t9191 = t9184*t1553;
  t9192 = t9190 + t9191;
  t9193 = var2[3]*t25*t9192;
  t9197 = t9189 + t9193;
  t9205 = t315*t9204;
  t9207 = -1.*t9206*t1553;
  t9208 = t9205 + t9207;
  t9209 = var2[4]*t9208;
  t9211 = t315*t9206;
  t9212 = t9204*t1553;
  t9214 = t9211 + t9212;
  t9215 = var2[3]*t25*t9214;
  t9216 = t9209 + t9215;
  t9172 = -1.*t322*t315*t332;
  t9173 = -1.*t1286*t322*t1553;
  t9174 = t9172 + t9173;
  t9175 = var2[4]*t9174;
  t9176 = t1286*t322*t315;
  t9177 = -1.*t322*t332*t1553;
  t9178 = t9176 + t9177;
  t9179 = var2[3]*t25*t9178;
  t9180 = t9175 + t9179;
  t9247 = -1.*var2[13]*t239*t6667;
  t9250 = -1.*var2[5]*t239*t6667;
  t9251 = t1286*t319*t315*t6667;
  t9252 = -1.*t319*t332*t6667*t1553;
  t9253 = t9251 + t9252;
  t9254 = var2[4]*t9253;
  t9256 = t239*t6667*t312;
  t9257 = t319*t315*t332*t6667;
  t9259 = t1286*t319*t6667*t1553;
  t9260 = t9257 + t9259;
  t9261 = t25*t9260;
  t9262 = t9256 + t9261;
  t9263 = var2[3]*t9262;
  t9264 = t9247 + t9250 + t9254 + t9263;
  t9267 = -1.*var2[13]*t239*t8685;
  t9268 = -1.*var2[5]*t239*t8685;
  t9272 = t1286*t319*t315*t8685;
  t9273 = -1.*t319*t332*t8685*t1553;
  t9274 = t9272 + t9273;
  t9275 = var2[4]*t9274;
  t9276 = t239*t8685*t312;
  t9277 = t319*t315*t332*t8685;
  t9279 = t1286*t319*t8685*t1553;
  t9280 = t9277 + t9279;
  t9282 = t25*t9280;
  t9283 = t9276 + t9282;
  t9284 = var2[3]*t9283;
  t9285 = t9267 + t9268 + t9275 + t9284;
  t9229 = var2[13]*t319;
  t9230 = var2[5]*t319;
  t9231 = t1286*t315*t239;
  t9233 = -1.*t332*t239*t1553;
  t9234 = t9231 + t9233;
  t9236 = var2[4]*t9234;
  t9237 = -1.*t319*t312;
  t9239 = t315*t332*t239;
  t9240 = t1286*t239*t1553;
  t9241 = t9239 + t9240;
  t9242 = t25*t9241;
  t9243 = t9237 + t9242;
  t9244 = var2[3]*t9243;
  t9245 = t9229 + t9230 + t9236 + t9244;
  t9300 = -1.*t6575*t5956;
  t9301 = -1.*t1916*t6646;
  t9302 = t9300 + t9301;
  t9298 = t6108 + t6662;
  t9311 = t1286*t9298;
  t9312 = t332*t239*t9302;
  t9313 = t9311 + t9312;
  t9306 = -1.*t332*t9298;
  t9307 = t1286*t239*t9302;
  t9308 = t9306 + t9307;
  t9327 = -1.*t1916*t8509;
  t9329 = -1.*t6575*t8652;
  t9330 = t9327 + t9329;
  t9333 = t8523 + t8653;
  t9340 = t332*t239*t9330;
  t9343 = t1286*t9333;
  t9344 = t9340 + t9343;
  t9336 = t1286*t239*t9330;
  t9337 = -1.*t332*t9333;
  t9338 = t9336 + t9337;
  t9299 = var2[14]*t9298;
  t9303 = var2[13]*t319*t9302;
  t9304 = var2[5]*t319*t9302;
  t9309 = t315*t9308;
  t9314 = -1.*t9313*t1553;
  t9315 = t9309 + t9314;
  t9316 = var2[4]*t9315;
  t9317 = -1.*t319*t9302*t312;
  t9318 = t315*t9313;
  t9319 = t9308*t1553;
  t9320 = t9318 + t9319;
  t9321 = t25*t9320;
  t9322 = t9317 + t9321;
  t9324 = var2[3]*t9322;
  t9325 = t9299 + t9303 + t9304 + t9316 + t9324;
  t9331 = var2[13]*t319*t9330;
  t9332 = var2[5]*t319*t9330;
  t9334 = var2[14]*t9333;
  t9339 = t315*t9338;
  t9345 = -1.*t9344*t1553;
  t9346 = t9339 + t9345;
  t9347 = var2[4]*t9346;
  t9348 = -1.*t319*t9330*t312;
  t9349 = t315*t9344;
  t9350 = t9338*t1553;
  t9351 = t9349 + t9350;
  t9352 = t25*t9351;
  t9353 = t9348 + t9352;
  t9355 = var2[3]*t9353;
  t9356 = t9331 + t9332 + t9334 + t9347 + t9355;
  t9363 = -1.*t2095*t4751;
  t9364 = -1.*t5100*t5447;
  t9365 = t9363 + t9364;
  t9367 = t6627 + t6629;
  t9371 = t6575*t9365;
  t9373 = -1.*t1916*t9367;
  t9374 = t9371 + t9373;
  t9366 = t1916*t9365;
  t9368 = t6575*t9367;
  t9369 = t9366 + t9368;
  t9383 = t1286*t9369;
  t9384 = t332*t239*t9374;
  t9386 = t9383 + t9384;
  t9377 = -1.*t332*t9369;
  t9379 = t1286*t239*t9374;
  t9380 = t9377 + t9379;
  t9400 = t8418 + t8503;
  t9402 = -1.*t1916*t9400;
  t9403 = -1.*t5100*t8414;
  t9405 = -1.*t2095*t8490;
  t9406 = t9403 + t9405;
  t9407 = t6575*t9406;
  t9408 = t9402 + t9407;
  t9412 = t6575*t9400;
  t9413 = t1916*t9406;
  t9414 = t9412 + t9413;
  t9420 = t332*t239*t9408;
  t9422 = t1286*t9414;
  t9423 = t9420 + t9422;
  t9416 = t1286*t239*t9408;
  t9417 = -1.*t332*t9414;
  t9418 = t9416 + t9417;
  t9370 = var2[14]*t9369;
  t9375 = var2[13]*t319*t9374;
  t9376 = var2[5]*t319*t9374;
  t9381 = t315*t9380;
  t9387 = -1.*t9386*t1553;
  t9388 = t9381 + t9387;
  t9389 = var2[4]*t9388;
  t9390 = -1.*t319*t9374*t312;
  t9391 = t315*t9386;
  t9392 = t9380*t1553;
  t9393 = t9391 + t9392;
  t9394 = t25*t9393;
  t9395 = t9390 + t9394;
  t9396 = var2[3]*t9395;
  t9398 = t9370 + t9375 + t9376 + t9389 + t9396;
  t9409 = var2[13]*t319*t9408;
  t9410 = var2[5]*t319*t9408;
  t9415 = var2[14]*t9414;
  t9419 = t315*t9418;
  t9424 = -1.*t9423*t1553;
  t9425 = t9419 + t9424;
  t9426 = var2[4]*t9425;
  t9427 = -1.*t319*t9408*t312;
  t9428 = t315*t9423;
  t9429 = t9418*t1553;
  t9430 = t9428 + t9429;
  t9431 = t25*t9430;
  t9433 = t9427 + t9431;
  t9434 = var2[3]*t9433;
  t9435 = t9409 + t9410 + t9415 + t9426 + t9434;
  t9442 = t3550 + t4731;
  t9445 = -1.*t3658*t3536;
  t9446 = -1.*t2128*t4122;
  t9448 = t9445 + t9446;
  t9444 = -1.*t2095*t9442;
  t9449 = t5100*t9448;
  t9453 = t9444 + t9449;
  t9455 = t5100*t9442;
  t9456 = t2095*t9448;
  t9457 = t9455 + t9456;
  t9463 = t6575*t9453;
  t9466 = -1.*t1916*t9457;
  t9468 = t9463 + t9466;
  t9454 = t1916*t9453;
  t9459 = t6575*t9457;
  t9460 = t9454 + t9459;
  t9478 = t1286*t9460;
  t9480 = t332*t239*t9468;
  t9481 = t9478 + t9480;
  t9473 = -1.*t332*t9460;
  t9474 = t1286*t239*t9468;
  t9476 = t9473 + t9474;
  t9502 = -1.*t3658*t8116;
  t9503 = t3550 + t9502;
  t9508 = t5293 + t8486;
  t9507 = t2095*t9503;
  t9509 = t5100*t9508;
  t9510 = t9507 + t9509;
  t9511 = -1.*t1916*t9510;
  t9512 = t5100*t9503;
  t9513 = -1.*t2095*t9508;
  t9514 = t9512 + t9513;
  t9516 = t6575*t9514;
  t9518 = t9511 + t9516;
  t9521 = t6575*t9510;
  t9522 = t1916*t9514;
  t9523 = t9521 + t9522;
  t9530 = t332*t239*t9518;
  t9531 = t1286*t9523;
  t9532 = t9530 + t9531;
  t9525 = t1286*t239*t9518;
  t9526 = -1.*t332*t9523;
  t9527 = t9525 + t9526;
  t9462 = var2[14]*t9460;
  t9470 = var2[13]*t319*t9468;
  t9471 = var2[5]*t319*t9468;
  t9477 = t315*t9476;
  t9482 = -1.*t9481*t1553;
  t9484 = t9477 + t9482;
  t9486 = var2[4]*t9484;
  t9489 = -1.*t319*t9468*t312;
  t9490 = t315*t9481;
  t9491 = t9476*t1553;
  t9493 = t9490 + t9491;
  t9494 = t25*t9493;
  t9495 = t9489 + t9494;
  t9496 = var2[3]*t9495;
  t9498 = t9462 + t9470 + t9471 + t9486 + t9496;
  t9519 = var2[13]*t319*t9518;
  t9520 = var2[5]*t319*t9518;
  t9524 = var2[14]*t9523;
  t9529 = t315*t9527;
  t9535 = -1.*t9532*t1553;
  t9536 = t9529 + t9535;
  t9537 = var2[4]*t9536;
  t9538 = -1.*t319*t9518*t312;
  t9539 = t315*t9532;
  t9541 = t9527*t1553;
  t9542 = t9539 + t9541;
  t9543 = t25*t9542;
  t9544 = t9538 + t9543;
  t9545 = var2[3]*t9544;
  t9546 = t9519 + t9520 + t9524 + t9537 + t9545;
  t9553 = -1.*t2168*t2171;
  t9554 = -1.*t3229*t3335;
  t9556 = t9553 + t9554;
  t9558 = t3934 + t4051;
  t9557 = t2128*t9556;
  t9559 = t3658*t9558;
  t9560 = t9557 + t9559;
  t9564 = t3658*t9556;
  t9565 = -1.*t2128*t9558;
  t9566 = t9564 + t9565;
  t9562 = -1.*t2095*t9560;
  t9567 = t5100*t9566;
  t9569 = t9562 + t9567;
  t9571 = t5100*t9560;
  t9572 = t2095*t9566;
  t9573 = t9571 + t9572;
  t9577 = t6575*t9569;
  t9578 = -1.*t1916*t9573;
  t9579 = t9577 + t9578;
  t9570 = t1916*t9569;
  t9574 = t6575*t9573;
  t9575 = t9570 + t9574;
  t9586 = t1286*t9575;
  t9587 = t332*t239*t9579;
  t9588 = t9586 + t9587;
  t9582 = -1.*t332*t9575;
  t9583 = t1286*t239*t9579;
  t9584 = t9582 + t9583;
  t9604 = t3129 + t3397;
  t9605 = -1.*t2128*t9604;
  t9606 = t9605 + t9559;
  t9608 = t3658*t9604;
  t9609 = t2128*t9558;
  t9610 = t9608 + t9609;
  t9607 = t2095*t9606;
  t9611 = t5100*t9610;
  t9613 = t9607 + t9611;
  t9614 = -1.*t1916*t9613;
  t9615 = t5100*t9606;
  t9616 = -1.*t2095*t9610;
  t9617 = t9615 + t9616;
  t9619 = t6575*t9617;
  t9620 = t9614 + t9619;
  t9623 = t6575*t9613;
  t9624 = t1916*t9617;
  t9626 = t9623 + t9624;
  t9633 = t332*t239*t9620;
  t9634 = t1286*t9626;
  t9636 = t9633 + t9634;
  t9628 = t1286*t239*t9620;
  t9629 = -1.*t332*t9626;
  t9631 = t9628 + t9629;
  t9576 = var2[14]*t9575;
  t9580 = var2[13]*t319*t9579;
  t9581 = var2[5]*t319*t9579;
  t9585 = t315*t9584;
  t9590 = -1.*t9588*t1553;
  t9591 = t9585 + t9590;
  t9592 = var2[4]*t9591;
  t9593 = -1.*t319*t9579*t312;
  t9594 = t315*t9588;
  t9595 = t9584*t1553;
  t9596 = t9594 + t9595;
  t9598 = t25*t9596;
  t9599 = t9593 + t9598;
  t9600 = var2[3]*t9599;
  t9601 = t9576 + t9580 + t9581 + t9592 + t9600;
  t9621 = var2[13]*t319*t9620;
  t9622 = var2[5]*t319*t9620;
  t9627 = var2[14]*t9626;
  t9632 = t315*t9631;
  t9638 = -1.*t9636*t1553;
  t9639 = t9632 + t9638;
  t9640 = var2[4]*t9639;
  t9643 = -1.*t319*t9620*t312;
  t9644 = t315*t9636;
  t9645 = t9631*t1553;
  t9646 = t9644 + t9645;
  t9647 = t25*t9646;
  t9648 = t9643 + t9647;
  t9649 = var2[3]*t9648;
  t9650 = t9621 + t9622 + t9627 + t9640 + t9649;
  t9603 = -0.000099*t9601;
  t9651 = 0.000287*t9650;
  t9653 = t9603 + t9651;
  t9654 = 0.000171*t9601;
  t9655 = -0.000099*t9650;
  t9656 = t9654 + t9655;
  t9657 = 1.e-6*t9650;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=1.e-6*t1749*var2[3] - 0.000099*t7850*var2[3] + 0.000287*t8847*var2[3];
  p_output1[13]=0.000171*t7850*var2[3] - 0.000099*t8847*var2[3];
  p_output1[14]=0.000449*t1749*var2[3] + 1.e-6*t8847*var2[3];
  p_output1[15]=1.e-6*t9013 - 0.000099*t9078 + 0.000287*t9161;
  p_output1[16]=0.000171*t9078 - 0.000099*t9161;
  p_output1[17]=0.000449*t9013 + 1.e-6*t9161;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=1.e-6*t9180 - 0.000099*t9197 + 0.000287*t9216;
  p_output1[40]=0.000171*t9197 - 0.000099*t9216;
  p_output1[41]=0.000449*t9180 + 1.e-6*t9216;
  p_output1[42]=1.e-6*t9245 - 0.000099*t9264 + 0.000287*t9285;
  p_output1[43]=0.000171*t9264 - 0.000099*t9285;
  p_output1[44]=0.000449*t9245 + 1.e-6*t9285;
  p_output1[45]=-0.000099*t9325 + 0.000287*t9356;
  p_output1[46]=0.000171*t9325 - 0.000099*t9356;
  p_output1[47]=1.e-6*t9356;
  p_output1[48]=-0.000099*t9398 + 0.000287*t9435;
  p_output1[49]=0.000171*t9398 - 0.000099*t9435;
  p_output1[50]=1.e-6*t9435;
  p_output1[51]=-0.000099*t9498 + 0.000287*t9546;
  p_output1[52]=0.000171*t9498 - 0.000099*t9546;
  p_output1[53]=1.e-6*t9546;
  p_output1[54]=t9653;
  p_output1[55]=t9656;
  p_output1[56]=t9657;
  p_output1[57]=t9653;
  p_output1[58]=t9656;
  p_output1[59]=t9657;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Jq_AMBody_RightToe_mex.hh"

namespace SymExpression
{

void Jq_AMBody_RightToe_mex_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
