/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:26:07 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1355;
  double t611;
  double t815;
  double t1127;
  double t1396;
  double t1613;
  double t1722;
  double t1728;
  double t1759;
  double t1992;
  double t2072;
  double t2127;
  double t1151;
  double t1409;
  double t1421;
  double t2549;
  double t2569;
  double t2593;
  double t2970;
  double t2254;
  double t2314;
  double t2350;
  double t3455;
  double t4592;
  double t4622;
  double t4661;
  double t4703;
  double t4257;
  double t4345;
  double t4407;
  double t5266;
  double t5268;
  double t5357;
  double t5924;
  double t6001;
  double t6032;
  double t6074;
  double t6329;
  double t6366;
  double t6685;
  double t7083;
  double t7154;
  double t7173;
  double t7229;
  double t7241;
  double t7261;
  double t7402;
  double t7434;
  double t7438;
  double t7444;
  double t7511;
  double t7514;
  double t7542;
  double t7563;
  double t7570;
  double t7576;
  double t7585;
  double t7602;
  double t7616;
  double t7626;
  double t7689;
  double t7703;
  double t7705;
  double t1740;
  double t1892;
  double t1901;
  double t2130;
  double t2195;
  double t2203;
  double t7830;
  double t7837;
  double t7840;
  double t7806;
  double t7810;
  double t7812;
  double t2914;
  double t3168;
  double t3323;
  double t3466;
  double t3474;
  double t3653;
  double t7843;
  double t7849;
  double t7852;
  double t4682;
  double t4909;
  double t5181;
  double t5679;
  double t5725;
  double t5809;
  double t6061;
  double t6085;
  double t6241;
  double t7891;
  double t7893;
  double t7904;
  double t7907;
  double t7908;
  double t7909;
  double t6774;
  double t6802;
  double t7031;
  double t7269;
  double t7421;
  double t7422;
  double t7921;
  double t7927;
  double t7932;
  double t7940;
  double t7944;
  double t7947;
  double t7465;
  double t7471;
  double t7487;
  double t7579;
  double t7589;
  double t7596;
  double t7949;
  double t7951;
  double t7952;
  double t7958;
  double t7960;
  double t7964;
  double t7645;
  double t7656;
  double t7668;
  double t7978;
  double t7979;
  double t7981;
  double t7989;
  double t7993;
  double t7996;
  double t8044;
  double t8047;
  double t8049;
  double t8071;
  double t8073;
  double t8074;
  double t8077;
  double t8079;
  double t8082;
  double t8087;
  double t8088;
  double t8089;
  double t8096;
  double t8105;
  double t8112;
  double t8116;
  double t8120;
  double t8123;
  double t8131;
  double t8132;
  double t8133;
  double t8136;
  double t8137;
  double t8139;
  double t8142;
  double t8148;
  double t8150;
  double t8204;
  double t8205;
  double t8212;
  double t8235;
  double t8236;
  double t8237;
  double t8240;
  double t8241;
  double t8245;
  double t8251;
  double t8252;
  double t8253;
  double t8259;
  double t8262;
  double t8263;
  double t8267;
  double t8269;
  double t8273;
  double t8293;
  double t8294;
  double t8301;
  double t8307;
  double t8308;
  double t8309;
  double t8312;
  double t8313;
  double t8317;
  double t8352;
  double t8355;
  double t8357;
  double t8379;
  double t8384;
  double t8392;
  double t8394;
  double t8396;
  double t8397;
  double t8399;
  double t8400;
  double t8402;
  double t8404;
  double t8410;
  double t8414;
  double t8421;
  double t8422;
  double t8423;
  double t8428;
  double t8431;
  double t8432;
  double t8439;
  double t8440;
  double t8443;
  double t8446;
  double t8447;
  double t8448;
  double t8488;
  double t8492;
  double t8494;
  double t8503;
  double t8505;
  double t8518;
  double t8519;
  double t8525;
  double t8529;
  double t8532;
  double t8538;
  double t8540;
  double t8541;
  double t8542;
  double t8544;
  double t8546;
  double t8547;
  double t8568;
  double t8573;
  double t8577;
  double t8581;
  double t8588;
  double t8589;
  double t8593;
  double t8594;
  double t8597;
  double t8632;
  double t8633;
  double t8636;
  double t8641;
  double t8642;
  double t8645;
  double t8652;
  double t8653;
  double t8669;
  double t8671;
  double t8675;
  double t8681;
  double t8682;
  double t8683;
  double t8686;
  double t8689;
  double t8694;
  double t8704;
  double t8707;
  double t8709;
  double t8715;
  double t8719;
  double t8721;
  double t8727;
  double t8728;
  double t8729;
  double t8770;
  double t8775;
  double t8779;
  double t8785;
  double t8786;
  double t8787;
  double t8789;
  double t8790;
  double t8792;
  double t8797;
  double t8799;
  double t8800;
  double t8805;
  double t8809;
  double t8810;
  double t8813;
  double t8817;
  double t8819;
  double t8822;
  double t8824;
  double t8826;
  double t8828;
  double t8829;
  double t8830;
  double t8865;
  double t8869;
  double t8871;
  double t8872;
  double t8873;
  double t8875;
  double t8876;
  double t8879;
  double t8885;
  double t8888;
  double t8889;
  double t8893;
  double t8895;
  double t8899;
  double t8901;
  double t8902;
  double t8905;
  double t8908;
  double t8909;
  double t8910;
  double t8851;
  double t8852;
  double t8854;
  double t8856;
  double t8857;
  double t8932;
  double t8934;
  double t8936;
  double t8944;
  double t8947;
  double t8954;
  double t8955;
  double t8958;
  double t8960;
  double t8963;
  double t8967;
  double t8971;
  double t8972;
  double t8976;
  double t8978;
  double t8987;
  double t8990;
  double t8991;
  double t8992;
  double t8996;
  double t9003;
  double t9004;
  double t9011;
  double t9012;
  double t9013;
  double t8780;
  double t8781;
  double t8782;
  double t8788;
  double t8795;
  double t8802;
  double t8812;
  double t8820;
  double t8827;
  double t8834;
  double t8835;
  double t8837;
  double t8838;
  double t8842;
  double t8845;
  double t8846;
  double t8847;
  double t8849;
  double t7874;
  double t7875;
  double t7886;
  double t9066;
  double t9067;
  double t9068;
  double t9071;
  double t9074;
  double t9076;
  double t9078;
  double t9079;
  double t9082;
  double t9085;
  double t9086;
  double t9088;
  double t9042;
  double t9044;
  double t9046;
  double t9049;
  double t9051;
  double t9108;
  double t9110;
  double t9112;
  double t9115;
  double t9116;
  double t9117;
  double t9126;
  double t9128;
  double t9129;
  double t9133;
  double t9134;
  double t9136;
  double t9141;
  double t9142;
  double t9143;
  double t9145;
  double t9146;
  double t9147;
  double t9166;
  double t9167;
  double t9169;
  double t9171;
  double t9172;
  double t9173;
  double t9188;
  double t9189;
  double t9191;
  double t9193;
  double t9194;
  double t9195;
  double t9202;
  double t9203;
  double t9205;
  double t9209;
  double t9210;
  double t9211;
  double t9235;
  double t9236;
  double t9238;
  double t9242;
  double t9243;
  double t9245;
  double t9246;
  double t9247;
  double t9250;
  double t9251;
  double t9252;
  double t9256;
  double t9258;
  double t9259;
  double t9225;
  double t9227;
  double t9228;
  double t9230;
  double t9232;
  double t9278;
  double t9279;
  double t9280;
  double t9284;
  double t9285;
  double t9289;
  double t9293;
  double t9294;
  double t9295;
  double t9297;
  double t9298;
  double t9299;
  double t9304;
  double t9306;
  double t9307;
  double t9309;
  double t9311;
  double t9314;
  double t9317;
  double t9321;
  double t9324;
  double t9348;
  double t9349;
  double t9350;
  double t9353;
  double t9355;
  double t9356;
  double t9359;
  double t9364;
  double t9366;
  double t9371;
  double t9372;
  double t9374;
  double t9376;
  double t9377;
  double t9378;
  double t9381;
  double t9382;
  double t9383;
  double t9386;
  double t9388;
  double t9389;
  double t9421;
  double t9424;
  double t9426;
  double t9427;
  double t9428;
  double t9433;
  double t9434;
  double t9406;
  double t9407;
  double t9408;
  double t9411;
  double t9415;
  double t9452;
  double t9454;
  double t9455;
  double t9458;
  double t9459;
  double t9461;
  double t9462;
  double t9467;
  double t9468;
  double t9469;
  double t9471;
  double t9472;
  double t9473;
  double t9485;
  double t9486;
  double t9487;
  double t9490;
  double t9491;
  double t9493;
  double t9494;
  double t9496;
  double t9498;
  double t9499;
  double t9501;
  double t9502;
  double t9503;
  double t9524;
  double t9525;
  double t8004;
  double t9517;
  double t9518;
  double t9520;
  double t9521;
  double t9522;
  double t9539;
  double t9540;
  double t9541;
  double t9543;
  double t9544;
  double t9549;
  double t9550;
  double t9567;
  double t9568;
  double t9569;
  double t9571;
  double t9572;
  double t9575;
  double t9576;
  double t8003;
  double t8006;
  double t9534;
  double t9588;
  double t9589;
  double t9590;
  double t9592;
  double t9593;
  double t9601;
  double t9603;
  double t9604;
  double t9554;
  double t9559;
  double t9617;
  double t9618;
  double t9619;
  double t9580;
  double t9584;
  t1355 = Cos(var1[3]);
  t611 = Cos(var1[5]);
  t815 = Sin(var1[3]);
  t1127 = Sin(var1[4]);
  t1396 = Sin(var1[5]);
  t1613 = Cos(var1[6]);
  t1722 = -1.*t1613;
  t1728 = 1. + t1722;
  t1759 = Sin(var1[6]);
  t1992 = -1.*t1355*t611;
  t2072 = -1.*t815*t1127*t1396;
  t2127 = t1992 + t2072;
  t1151 = -1.*t611*t815*t1127;
  t1409 = t1355*t1396;
  t1421 = t1151 + t1409;
  t2549 = Cos(var1[7]);
  t2569 = -1.*t2549;
  t2593 = 1. + t2569;
  t2970 = Sin(var1[7]);
  t2254 = t1613*t2127;
  t2314 = t1421*t1759;
  t2350 = t2254 + t2314;
  t3455 = Cos(var1[4]);
  t4592 = Cos(var1[8]);
  t4622 = -1.*t4592;
  t4661 = 1. + t4622;
  t4703 = Sin(var1[8]);
  t4257 = -1.*t3455*t2549*t815;
  t4345 = t2350*t2970;
  t4407 = t4257 + t4345;
  t5266 = t1613*t1421;
  t5268 = -1.*t2127*t1759;
  t5357 = t5266 + t5268;
  t5924 = Cos(var1[9]);
  t6001 = -1.*t5924;
  t6032 = 1. + t6001;
  t6074 = Sin(var1[9]);
  t6329 = t4592*t4407;
  t6366 = t5357*t4703;
  t6685 = t6329 + t6366;
  t7083 = t4592*t5357;
  t7154 = -1.*t4407*t4703;
  t7173 = t7083 + t7154;
  t7229 = Cos(var1[10]);
  t7241 = -1.*t7229;
  t7261 = 1. + t7241;
  t7402 = Sin(var1[10]);
  t7434 = -1.*t6074*t6685;
  t7438 = t5924*t7173;
  t7444 = t7434 + t7438;
  t7511 = t5924*t6685;
  t7514 = t6074*t7173;
  t7542 = t7511 + t7514;
  t7563 = Cos(var1[11]);
  t7570 = -1.*t7563;
  t7576 = 1. + t7570;
  t7585 = Sin(var1[11]);
  t7602 = t7402*t7444;
  t7616 = t7229*t7542;
  t7626 = t7602 + t7616;
  t7689 = t7229*t7444;
  t7703 = -1.*t7402*t7542;
  t7705 = t7689 + t7703;
  t1740 = 0.07996*t1728;
  t1892 = -0.135*t1759;
  t1901 = 0. + t1740 + t1892;
  t2130 = 0.135*t1728;
  t2195 = 0.07996*t1759;
  t2203 = 0. + t2130 + t2195;
  t7830 = -1.*t611*t815;
  t7837 = t1355*t1127*t1396;
  t7840 = t7830 + t7837;
  t7806 = t1355*t611*t1127;
  t7810 = t815*t1396;
  t7812 = t7806 + t7810;
  t2914 = 0.135*t2593;
  t3168 = 0.08055*t2970;
  t3323 = 0. + t2914 + t3168;
  t3466 = -0.08055*t2593;
  t3474 = 0.135*t2970;
  t3653 = 0. + t3466 + t3474;
  t7843 = t1613*t7840;
  t7849 = t7812*t1759;
  t7852 = t7843 + t7849;
  t4682 = -0.08055*t4661;
  t4909 = -0.01004*t4703;
  t5181 = 0. + t4682 + t4909;
  t5679 = -0.01004*t4661;
  t5725 = 0.08055*t4703;
  t5809 = 0. + t5679 + t5725;
  t6061 = -0.08055*t6032;
  t6085 = -0.13004*t6074;
  t6241 = 0. + t6061 + t6085;
  t7891 = t1355*t3455*t2549;
  t7893 = t7852*t2970;
  t7904 = t7891 + t7893;
  t7907 = t1613*t7812;
  t7908 = -1.*t7840*t1759;
  t7909 = t7907 + t7908;
  t6774 = -0.13004*t6032;
  t6802 = 0.08055*t6074;
  t7031 = 0. + t6774 + t6802;
  t7269 = -0.19074*t7261;
  t7421 = 0.03315*t7402;
  t7422 = 0. + t7269 + t7421;
  t7921 = t4592*t7904;
  t7927 = t7909*t4703;
  t7932 = t7921 + t7927;
  t7940 = t4592*t7909;
  t7944 = -1.*t7904*t4703;
  t7947 = t7940 + t7944;
  t7465 = -0.03315*t7261;
  t7471 = -0.19074*t7402;
  t7487 = 0. + t7465 + t7471;
  t7579 = -0.01315*t7576;
  t7589 = -0.62554*t7585;
  t7596 = 0. + t7579 + t7589;
  t7949 = -1.*t6074*t7932;
  t7951 = t5924*t7947;
  t7952 = t7949 + t7951;
  t7958 = t5924*t7932;
  t7960 = t6074*t7947;
  t7964 = t7958 + t7960;
  t7645 = -0.62554*t7576;
  t7656 = 0.01315*t7585;
  t7668 = 0. + t7645 + t7656;
  t7978 = t7402*t7952;
  t7979 = t7229*t7964;
  t7981 = t7978 + t7979;
  t7989 = t7229*t7952;
  t7993 = -1.*t7402*t7964;
  t7996 = t7989 + t7993;
  t8044 = t1355*t3455*t1613*t1396;
  t8047 = t1355*t3455*t611*t1759;
  t8049 = t8044 + t8047;
  t8071 = -1.*t1355*t2549*t1127;
  t8073 = t8049*t2970;
  t8074 = t8071 + t8073;
  t8077 = t1355*t3455*t611*t1613;
  t8079 = -1.*t1355*t3455*t1396*t1759;
  t8082 = t8077 + t8079;
  t8087 = t4592*t8074;
  t8088 = t8082*t4703;
  t8089 = t8087 + t8088;
  t8096 = t4592*t8082;
  t8105 = -1.*t8074*t4703;
  t8112 = t8096 + t8105;
  t8116 = -1.*t6074*t8089;
  t8120 = t5924*t8112;
  t8123 = t8116 + t8120;
  t8131 = t5924*t8089;
  t8132 = t6074*t8112;
  t8133 = t8131 + t8132;
  t8136 = t7402*t8123;
  t8137 = t7229*t8133;
  t8139 = t8136 + t8137;
  t8142 = t7229*t8123;
  t8148 = -1.*t7402*t8133;
  t8150 = t8142 + t8148;
  t8204 = t3455*t1613*t815*t1396;
  t8205 = t3455*t611*t815*t1759;
  t8212 = t8204 + t8205;
  t8235 = -1.*t2549*t815*t1127;
  t8236 = t8212*t2970;
  t8237 = t8235 + t8236;
  t8240 = t3455*t611*t1613*t815;
  t8241 = -1.*t3455*t815*t1396*t1759;
  t8245 = t8240 + t8241;
  t8251 = t4592*t8237;
  t8252 = t8245*t4703;
  t8253 = t8251 + t8252;
  t8259 = t4592*t8245;
  t8262 = -1.*t8237*t4703;
  t8263 = t8259 + t8262;
  t8267 = -1.*t6074*t8253;
  t8269 = t5924*t8263;
  t8273 = t8267 + t8269;
  t8293 = t5924*t8253;
  t8294 = t6074*t8263;
  t8301 = t8293 + t8294;
  t8307 = t7402*t8273;
  t8308 = t7229*t8301;
  t8309 = t8307 + t8308;
  t8312 = t7229*t8273;
  t8313 = -1.*t7402*t8301;
  t8317 = t8312 + t8313;
  t8352 = -1.*t1613*t1127*t1396;
  t8355 = -1.*t611*t1127*t1759;
  t8357 = t8352 + t8355;
  t8379 = -1.*t3455*t2549;
  t8384 = t8357*t2970;
  t8392 = t8379 + t8384;
  t8394 = -1.*t611*t1613*t1127;
  t8396 = t1127*t1396*t1759;
  t8397 = t8394 + t8396;
  t8399 = t4592*t8392;
  t8400 = t8397*t4703;
  t8402 = t8399 + t8400;
  t8404 = t4592*t8397;
  t8410 = -1.*t8392*t4703;
  t8414 = t8404 + t8410;
  t8421 = -1.*t6074*t8402;
  t8422 = t5924*t8414;
  t8423 = t8421 + t8422;
  t8428 = t5924*t8402;
  t8431 = t6074*t8414;
  t8432 = t8428 + t8431;
  t8439 = t7402*t8423;
  t8440 = t7229*t8432;
  t8443 = t8439 + t8440;
  t8446 = t7229*t8423;
  t8447 = -1.*t7402*t8432;
  t8448 = t8446 + t8447;
  t8488 = t611*t815;
  t8492 = -1.*t1355*t1127*t1396;
  t8494 = t8488 + t8492;
  t8503 = t8494*t1759;
  t8505 = t7907 + t8503;
  t8518 = t1613*t8494;
  t8519 = -1.*t7812*t1759;
  t8525 = t8518 + t8519;
  t8529 = t4592*t8505*t2970;
  t8532 = t8525*t4703;
  t8538 = t8529 + t8532;
  t8540 = t4592*t8525;
  t8541 = -1.*t8505*t2970*t4703;
  t8542 = t8540 + t8541;
  t8544 = -1.*t6074*t8538;
  t8546 = t5924*t8542;
  t8547 = t8544 + t8546;
  t8568 = t5924*t8538;
  t8573 = t6074*t8542;
  t8577 = t8568 + t8573;
  t8581 = t7402*t8547;
  t8588 = t7229*t8577;
  t8589 = t8581 + t8588;
  t8593 = t7229*t8547;
  t8594 = -1.*t7402*t8577;
  t8597 = t8593 + t8594;
  t8632 = t611*t815*t1127;
  t8633 = -1.*t1355*t1396;
  t8636 = t8632 + t8633;
  t8641 = t1613*t8636;
  t8642 = t2127*t1759;
  t8645 = t8641 + t8642;
  t8652 = -1.*t8636*t1759;
  t8653 = t2254 + t8652;
  t8669 = t4592*t8645*t2970;
  t8671 = t8653*t4703;
  t8675 = t8669 + t8671;
  t8681 = t4592*t8653;
  t8682 = -1.*t8645*t2970*t4703;
  t8683 = t8681 + t8682;
  t8686 = -1.*t6074*t8675;
  t8689 = t5924*t8683;
  t8694 = t8686 + t8689;
  t8704 = t5924*t8675;
  t8707 = t6074*t8683;
  t8709 = t8704 + t8707;
  t8715 = t7402*t8694;
  t8719 = t7229*t8709;
  t8721 = t8715 + t8719;
  t8727 = t7229*t8694;
  t8728 = -1.*t7402*t8709;
  t8729 = t8727 + t8728;
  t8770 = t3455*t611*t1613;
  t8775 = -1.*t3455*t1396*t1759;
  t8779 = t8770 + t8775;
  t8785 = -1.*t3455*t1613*t1396;
  t8786 = -1.*t3455*t611*t1759;
  t8787 = t8785 + t8786;
  t8789 = t4592*t8779*t2970;
  t8790 = t8787*t4703;
  t8792 = t8789 + t8790;
  t8797 = t4592*t8787;
  t8799 = -1.*t8779*t2970*t4703;
  t8800 = t8797 + t8799;
  t8805 = -1.*t6074*t8792;
  t8809 = t5924*t8800;
  t8810 = t8805 + t8809;
  t8813 = t5924*t8792;
  t8817 = t6074*t8800;
  t8819 = t8813 + t8817;
  t8822 = t7402*t8810;
  t8824 = t7229*t8819;
  t8826 = t8822 + t8824;
  t8828 = t7229*t8810;
  t8829 = -1.*t7402*t8819;
  t8830 = t8828 + t8829;
  t8865 = -1.*t1613*t7840;
  t8869 = t8865 + t8519;
  t8871 = t4592*t7909*t2970;
  t8872 = t8869*t4703;
  t8873 = t8871 + t8872;
  t8875 = t4592*t8869;
  t8876 = -1.*t7909*t2970*t4703;
  t8879 = t8875 + t8876;
  t8885 = -1.*t6074*t8873;
  t8888 = t5924*t8879;
  t8889 = t8885 + t8888;
  t8893 = t5924*t8873;
  t8895 = t6074*t8879;
  t8899 = t8893 + t8895;
  t8901 = t7402*t8889;
  t8902 = t7229*t8899;
  t8905 = t8901 + t8902;
  t8908 = t7229*t8889;
  t8909 = -1.*t7402*t8899;
  t8910 = t8908 + t8909;
  t8851 = -0.135*t1613;
  t8852 = t8851 + t2195;
  t8854 = 0.07996*t1613;
  t8856 = 0.135*t1759;
  t8857 = t8854 + t8856;
  t8932 = t1355*t611;
  t8934 = t815*t1127*t1396;
  t8936 = t8932 + t8934;
  t8944 = -1.*t8936*t1759;
  t8947 = t8641 + t8944;
  t8954 = -1.*t1613*t8936;
  t8955 = t8954 + t8652;
  t8958 = t4592*t8947*t2970;
  t8960 = t8955*t4703;
  t8963 = t8958 + t8960;
  t8967 = t4592*t8955;
  t8971 = -1.*t8947*t2970*t4703;
  t8972 = t8967 + t8971;
  t8976 = -1.*t6074*t8963;
  t8978 = t5924*t8972;
  t8987 = t8976 + t8978;
  t8990 = t5924*t8963;
  t8991 = t6074*t8972;
  t8992 = t8990 + t8991;
  t8996 = t7402*t8987;
  t9003 = t7229*t8992;
  t9004 = t8996 + t9003;
  t9011 = t7229*t8987;
  t9012 = -1.*t7402*t8992;
  t9013 = t9011 + t9012;
  t8780 = 0.1318*t2549*t8779;
  t8781 = t8779*t3323;
  t8782 = t8779*t2970*t5181;
  t8788 = t8787*t5809;
  t8795 = t6241*t8792;
  t8802 = t7031*t8800;
  t8812 = t7422*t8810;
  t8820 = t7487*t8819;
  t8827 = t7596*t8826;
  t8834 = t7668*t8830;
  t8835 = -1.*t7585*t8826;
  t8837 = t7563*t8830;
  t8838 = t8835 + t8837;
  t8842 = -0.73604*t8838;
  t8845 = t7563*t8826;
  t8846 = t7585*t8830;
  t8847 = t8845 + t8846;
  t8849 = -0.04375*t8847;
  t7874 = t2549*t7852;
  t7875 = -1.*t1355*t3455*t2970;
  t7886 = t7874 + t7875;
  t9066 = -1.*t4592*t6074*t7886;
  t9067 = -1.*t5924*t7886*t4703;
  t9068 = t9066 + t9067;
  t9071 = t5924*t4592*t7886;
  t9074 = -1.*t6074*t7886*t4703;
  t9076 = t9071 + t9074;
  t9078 = t7402*t9068;
  t9079 = t7229*t9076;
  t9082 = t9078 + t9079;
  t9085 = t7229*t9068;
  t9086 = -1.*t7402*t9076;
  t9088 = t9085 + t9086;
  t9042 = 0.135*t2549;
  t9044 = -0.08055*t2970;
  t9046 = t9042 + t9044;
  t9049 = 0.08055*t2549;
  t9051 = t9049 + t3474;
  t9108 = t1613*t8936;
  t9110 = t8636*t1759;
  t9112 = t9108 + t9110;
  t9115 = t2549*t9112;
  t9116 = -1.*t3455*t815*t2970;
  t9117 = t9115 + t9116;
  t9126 = -1.*t4592*t6074*t9117;
  t9128 = -1.*t5924*t9117*t4703;
  t9129 = t9126 + t9128;
  t9133 = t5924*t4592*t9117;
  t9134 = -1.*t6074*t9117*t4703;
  t9136 = t9133 + t9134;
  t9141 = t7402*t9129;
  t9142 = t7229*t9136;
  t9143 = t9141 + t9142;
  t9145 = t7229*t9129;
  t9146 = -1.*t7402*t9136;
  t9147 = t9145 + t9146;
  t9166 = t3455*t1613*t1396;
  t9167 = t3455*t611*t1759;
  t9169 = t9166 + t9167;
  t9171 = t2549*t9169;
  t9172 = t1127*t2970;
  t9173 = t9171 + t9172;
  t9188 = -1.*t4592*t6074*t9173;
  t9189 = -1.*t5924*t9173*t4703;
  t9191 = t9188 + t9189;
  t9193 = t5924*t4592*t9173;
  t9194 = -1.*t6074*t9173*t4703;
  t9195 = t9193 + t9194;
  t9202 = t7402*t9191;
  t9203 = t7229*t9195;
  t9205 = t9202 + t9203;
  t9209 = t7229*t9191;
  t9210 = -1.*t7402*t9195;
  t9211 = t9209 + t9210;
  t9235 = -1.*t4592*t7904;
  t9236 = -1.*t7909*t4703;
  t9238 = t9235 + t9236;
  t9242 = t6074*t9238;
  t9243 = t9242 + t7951;
  t9245 = t5924*t9238;
  t9246 = -1.*t6074*t7947;
  t9247 = t9245 + t9246;
  t9250 = -1.*t7402*t9243;
  t9251 = t7229*t9247;
  t9252 = t9250 + t9251;
  t9256 = t7229*t9243;
  t9258 = t7402*t9247;
  t9259 = t9256 + t9258;
  t9225 = -0.01004*t4592;
  t9227 = -0.08055*t4703;
  t9228 = t9225 + t9227;
  t9230 = 0.08055*t4592;
  t9232 = t9230 + t4909;
  t9278 = t3455*t2549*t815;
  t9279 = t9112*t2970;
  t9280 = t9278 + t9279;
  t9284 = -1.*t4592*t9280;
  t9285 = -1.*t8947*t4703;
  t9289 = t9284 + t9285;
  t9293 = t4592*t8947;
  t9294 = -1.*t9280*t4703;
  t9295 = t9293 + t9294;
  t9297 = t6074*t9289;
  t9298 = t5924*t9295;
  t9299 = t9297 + t9298;
  t9304 = t5924*t9289;
  t9306 = -1.*t6074*t9295;
  t9307 = t9304 + t9306;
  t9309 = -1.*t7402*t9299;
  t9311 = t7229*t9307;
  t9314 = t9309 + t9311;
  t9317 = t7229*t9299;
  t9321 = t7402*t9307;
  t9324 = t9317 + t9321;
  t9348 = -1.*t2549*t1127;
  t9349 = t9169*t2970;
  t9350 = t9348 + t9349;
  t9353 = -1.*t4592*t9350;
  t9355 = -1.*t8779*t4703;
  t9356 = t9353 + t9355;
  t9359 = t4592*t8779;
  t9364 = -1.*t9350*t4703;
  t9366 = t9359 + t9364;
  t9371 = t6074*t9356;
  t9372 = t5924*t9366;
  t9374 = t9371 + t9372;
  t9376 = t5924*t9356;
  t9377 = -1.*t6074*t9366;
  t9378 = t9376 + t9377;
  t9381 = -1.*t7402*t9374;
  t9382 = t7229*t9378;
  t9383 = t9381 + t9382;
  t9386 = t7229*t9374;
  t9388 = t7402*t9378;
  t9389 = t9386 + t9388;
  t9421 = -1.*t5924*t7932;
  t9424 = t9421 + t9246;
  t9426 = -1.*t7402*t7952;
  t9427 = t7229*t9424;
  t9428 = t9426 + t9427;
  t9433 = t7402*t9424;
  t9434 = t7989 + t9433;
  t9406 = -0.13004*t5924;
  t9407 = -0.08055*t6074;
  t9408 = t9406 + t9407;
  t9411 = 0.08055*t5924;
  t9415 = t9411 + t6085;
  t9452 = t4592*t9280;
  t9454 = t8947*t4703;
  t9455 = t9452 + t9454;
  t9458 = -1.*t6074*t9455;
  t9459 = t9458 + t9298;
  t9461 = -1.*t5924*t9455;
  t9462 = t9461 + t9306;
  t9467 = -1.*t7402*t9459;
  t9468 = t7229*t9462;
  t9469 = t9467 + t9468;
  t9471 = t7229*t9459;
  t9472 = t7402*t9462;
  t9473 = t9471 + t9472;
  t9485 = t4592*t9350;
  t9486 = t8779*t4703;
  t9487 = t9485 + t9486;
  t9490 = -1.*t6074*t9487;
  t9491 = t9490 + t9372;
  t9493 = -1.*t5924*t9487;
  t9494 = t9493 + t9377;
  t9496 = -1.*t7402*t9491;
  t9498 = t7229*t9494;
  t9499 = t9496 + t9498;
  t9501 = t7229*t9491;
  t9502 = t7402*t9494;
  t9503 = t9501 + t9502;
  t9524 = -1.*t7229*t7964;
  t9525 = t9426 + t9524;
  t8004 = t7563*t7996;
  t9517 = 0.03315*t7229;
  t9518 = t9517 + t7471;
  t9520 = -0.19074*t7229;
  t9521 = -0.03315*t7402;
  t9522 = t9520 + t9521;
  t9539 = t5924*t9455;
  t9540 = t6074*t9295;
  t9541 = t9539 + t9540;
  t9543 = -1.*t7229*t9541;
  t9544 = t9467 + t9543;
  t9549 = -1.*t7402*t9541;
  t9550 = t9471 + t9549;
  t9567 = t5924*t9487;
  t9568 = t6074*t9366;
  t9569 = t9567 + t9568;
  t9571 = -1.*t7229*t9569;
  t9572 = t9496 + t9571;
  t9575 = -1.*t7402*t9569;
  t9576 = t9501 + t9575;
  t8003 = -1.*t7585*t7981;
  t8006 = t8003 + t8004;
  t9534 = -1.*t7585*t7996;
  t9588 = -0.62554*t7563;
  t9589 = -0.01315*t7585;
  t9590 = t9588 + t9589;
  t9592 = 0.01315*t7563;
  t9593 = t9592 + t7589;
  t9601 = t7402*t9459;
  t9603 = t7229*t9541;
  t9604 = t9601 + t9603;
  t9554 = t7563*t9550;
  t9559 = -1.*t7585*t9550;
  t9617 = t7402*t9491;
  t9618 = t7229*t9569;
  t9619 = t9617 + t9618;
  t9580 = t7563*t9576;
  t9584 = -1.*t7585*t9576;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t1421*t1901 + t2127*t2203 + t2350*t3323 + t4407*t5181 + t5357*t5809 + t6241*t6685 + t7031*t7173 + t7422*t7444 + t7487*t7542 + t7596*t7626 + t7668*t7705 - 0.73604*(-1.*t7585*t7626 + t7563*t7705) - 0.04375*(t7563*t7626 + t7585*t7705) - 1.*t3455*t3653*t815 + 0.1318*(t2350*t2549 + t2970*t3455*t815);
  p_output1[10]=t1355*t3455*t3653 + t1901*t7812 + t2203*t7840 + t3323*t7852 + 0.1318*t7886 + t5181*t7904 + t5809*t7909 + t6241*t7932 + t7031*t7947 + t7422*t7952 + t7487*t7964 + t7596*t7981 + t7668*t7996 - 0.04375*(t7563*t7981 + t7585*t7996) - 0.73604*t8006;
  p_output1[11]=0;
  p_output1[12]=t1355*t1396*t2203*t3455 - 1.*t1127*t1355*t3653 + t1355*t1901*t3455*t611 + t3323*t8049 + 0.1318*(t1127*t1355*t2970 + t2549*t8049) + t5181*t8074 + t5809*t8082 + t6241*t8089 + t7031*t8112 + t7422*t8123 + t7487*t8133 + t7596*t8139 + t7668*t8150 - 0.73604*(-1.*t7585*t8139 + t7563*t8150) - 0.04375*(t7563*t8139 + t7585*t8150);
  p_output1[13]=t1396*t2203*t3455*t815 - 1.*t1127*t3653*t815 + t1901*t3455*t611*t815 + t3323*t8212 + 0.1318*(t1127*t2970*t815 + t2549*t8212) + t5181*t8237 + t5809*t8245 + t6241*t8253 + t7031*t8263 + t7422*t8273 + t7487*t8301 + t7596*t8309 + t7668*t8317 - 0.73604*(-1.*t7585*t8309 + t7563*t8317) - 0.04375*(t7563*t8309 + t7585*t8317);
  p_output1[14]=-1.*t1127*t1396*t2203 - 1.*t3455*t3653 - 1.*t1127*t1901*t611 + t3323*t8357 + 0.1318*(t2970*t3455 + t2549*t8357) + t5181*t8392 + t5809*t8397 + t6241*t8402 + t7031*t8414 + t7422*t8423 + t7487*t8432 + t7596*t8443 + t7668*t8448 - 0.73604*(-1.*t7585*t8443 + t7563*t8448) - 0.04375*(t7563*t8443 + t7585*t8448);
  p_output1[15]=t2203*t7812 + t1901*t8494 + 0.1318*t2549*t8505 + t3323*t8505 + t2970*t5181*t8505 + t5809*t8525 + t6241*t8538 + t7031*t8542 + t7422*t8547 + t7487*t8577 + t7596*t8589 + t7668*t8597 - 0.73604*(-1.*t7585*t8589 + t7563*t8597) - 0.04375*(t7563*t8589 + t7585*t8597);
  p_output1[16]=t1901*t2127 + t2203*t8636 + 0.1318*t2549*t8645 + t3323*t8645 + t2970*t5181*t8645 + t5809*t8653 + t6241*t8675 + t7031*t8683 + t7422*t8694 + t7487*t8709 + t7596*t8721 + t7668*t8729 - 0.73604*(-1.*t7585*t8721 + t7563*t8729) - 0.04375*(t7563*t8721 + t7585*t8729);
  p_output1[17]=-1.*t1396*t1901*t3455 + t2203*t3455*t611 + t8780 + t8781 + t8782 + t8788 + t8795 + t8802 + t8812 + t8820 + t8827 + t8834 + t8842 + t8849;
  p_output1[18]=0.1318*t2549*t7909 + t3323*t7909 + t2970*t5181*t7909 + t7812*t8852 + t7840*t8857 + t5809*t8869 + t6241*t8873 + t7031*t8879 + t7422*t8889 + t7487*t8899 + t7596*t8905 + t7668*t8910 - 0.73604*(-1.*t7585*t8905 + t7563*t8910) - 0.04375*(t7563*t8905 + t7585*t8910);
  p_output1[19]=t8636*t8852 + t8857*t8936 + 0.1318*t2549*t8947 + t3323*t8947 + t2970*t5181*t8947 + t5809*t8955 + t6241*t8963 + t7031*t8972 + t7422*t8987 + t7487*t8992 + t7596*t9004 + t7668*t9013 - 0.73604*(-1.*t7585*t9004 + t7563*t9013) - 0.04375*(t7563*t9004 + t7585*t9013);
  p_output1[20]=t8780 + t8781 + t8782 + t8788 + t8795 + t8802 + t8812 + t8820 + t8827 + t8834 + t8842 + t8849 + t3455*t611*t8852 + t1396*t3455*t8857;
  p_output1[21]=0.1318*(-1.*t1355*t2549*t3455 - 1.*t2970*t7852) + t5181*t7886 + t4592*t6241*t7886 - 1.*t4703*t7031*t7886 + t1355*t3455*t9046 + t7852*t9051 + t7422*t9068 + t7487*t9076 + t7596*t9082 + t7668*t9088 - 0.73604*(-1.*t7585*t9082 + t7563*t9088) - 0.04375*(t7563*t9082 + t7585*t9088);
  p_output1[22]=t3455*t815*t9046 + t9051*t9112 + 0.1318*(t4257 - 1.*t2970*t9112) + t5181*t9117 + t4592*t6241*t9117 - 1.*t4703*t7031*t9117 + t7422*t9129 + t7487*t9136 + t7596*t9143 + t7668*t9147 - 0.73604*(-1.*t7585*t9143 + t7563*t9147) - 0.04375*(t7563*t9143 + t7585*t9147);
  p_output1[23]=-1.*t1127*t9046 + t9051*t9169 + 0.1318*(t1127*t2549 - 1.*t2970*t9169) + t5181*t9173 + t4592*t6241*t9173 - 1.*t4703*t7031*t9173 + t7422*t9191 + t7487*t9195 + t7596*t9205 + t7668*t9211 - 0.73604*(-1.*t7585*t9205 + t7563*t9211) - 0.04375*(t7563*t9205 + t7585*t9211);
  p_output1[24]=t6241*t7947 + t7904*t9228 + t7909*t9232 + t7031*t9238 + t7487*t9243 + t7422*t9247 + t7668*t9252 + t7596*t9259 - 0.04375*(t7585*t9252 + t7563*t9259) - 0.73604*(t7563*t9252 - 1.*t7585*t9259);
  p_output1[25]=t8947*t9232 + t9228*t9280 + t7031*t9289 + t6241*t9295 + t7487*t9299 + t7422*t9307 + t7668*t9314 + t7596*t9324 - 0.04375*(t7585*t9314 + t7563*t9324) - 0.73604*(t7563*t9314 - 1.*t7585*t9324);
  p_output1[26]=t8779*t9232 + t9228*t9350 + t7031*t9356 + t6241*t9366 + t7487*t9374 + t7422*t9378 + t7668*t9383 + t7596*t9389 - 0.04375*(t7585*t9383 + t7563*t9389) - 0.73604*(t7563*t9383 - 1.*t7585*t9389);
  p_output1[27]=t7487*t7952 + t7932*t9408 + t7947*t9415 + t7422*t9424 + t7668*t9428 + t7596*t9434 - 0.04375*(t7585*t9428 + t7563*t9434) - 0.73604*(t7563*t9428 - 1.*t7585*t9434);
  p_output1[28]=t9295*t9415 + t9408*t9455 + t7487*t9459 + t7422*t9462 + t7668*t9469 + t7596*t9473 - 0.04375*(t7585*t9469 + t7563*t9473) - 0.73604*(t7563*t9469 - 1.*t7585*t9473);
  p_output1[29]=t9366*t9415 + t9408*t9487 + t7487*t9491 + t7422*t9494 + t7668*t9499 + t7596*t9503 - 0.04375*(t7585*t9499 + t7563*t9503) - 0.73604*(t7563*t9499 - 1.*t7585*t9503);
  p_output1[30]=t7596*t7996 + t7952*t9518 + t7964*t9522 + t7668*t9525 - 0.04375*(t8004 + t7585*t9525) - 0.73604*(t7563*t9525 + t9534);
  p_output1[31]=t9459*t9518 + t9522*t9541 + t7668*t9544 + t7596*t9550 - 0.04375*(t7585*t9544 + t9554) - 0.73604*(t7563*t9544 + t9559);
  p_output1[32]=t9491*t9518 + t9522*t9569 + t7668*t9572 + t7596*t9576 - 0.04375*(t7585*t9572 + t9580) - 0.73604*(t7563*t9572 + t9584);
  p_output1[33]=-0.04375*t8006 - 0.73604*(-1.*t7563*t7981 + t9534) + t7981*t9590 + t7996*t9593;
  p_output1[34]=t9550*t9593 + t9590*t9604 - 0.73604*(t9559 - 1.*t7563*t9604) - 0.04375*(t9554 - 1.*t7585*t9604);
  p_output1[35]=t9576*t9593 + t9590*t9619 - 0.73604*(t9584 - 1.*t7563*t9619) - 0.04375*(t9580 - 1.*t7585*t9619);
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Jp_LeftTarsus_mex.hh"

namespace SymExpression
{

void Jp_LeftTarsus_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
