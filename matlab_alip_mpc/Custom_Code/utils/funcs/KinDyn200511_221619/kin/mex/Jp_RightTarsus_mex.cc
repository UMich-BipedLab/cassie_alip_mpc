/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:30:00 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1256;
  double t1547;
  double t1687;
  double t1765;
  double t1925;
  double t2221;
  double t2162;
  double t2201;
  double t2252;
  double t134;
  double t173;
  double t579;
  double t1055;
  double t2205;
  double t2259;
  double t2272;
  double t2554;
  double t2581;
  double t2584;
  double t64;
  double t2642;
  double t2670;
  double t2706;
  double t2791;
  double t2840;
  double t2991;
  double t3179;
  double t3408;
  double t3517;
  double t3547;
  double t3855;
  double t4171;
  double t4252;
  double t4560;
  double t4681;
  double t4736;
  double t4784;
  double t4901;
  double t5034;
  double t5064;
  double t5646;
  double t5654;
  double t5734;
  double t5821;
  double t5858;
  double t5892;
  double t6090;
  double t6321;
  double t6325;
  double t6475;
  double t6705;
  double t6745;
  double t6772;
  double t6834;
  double t6901;
  double t6979;
  double t7021;
  double t7054;
  double t7066;
  double t7113;
  double t7276;
  double t7287;
  double t7339;
  double t1001;
  double t1165;
  double t1233;
  double t1819;
  double t2016;
  double t2089;
  double t2388;
  double t2396;
  double t2438;
  double t2615;
  double t2618;
  double t2635;
  double t7557;
  double t7585;
  double t7601;
  double t7622;
  double t7639;
  double t7661;
  double t3154;
  double t3245;
  double t3327;
  double t7696;
  double t7742;
  double t7756;
  double t3681;
  double t3768;
  double t3808;
  double t4771;
  double t4794;
  double t4864;
  double t7782;
  double t7826;
  double t7833;
  double t7873;
  double t7900;
  double t7903;
  double t5542;
  double t5544;
  double t5563;
  double t5932;
  double t6225;
  double t6265;
  double t7930;
  double t7939;
  double t7942;
  double t7951;
  double t7958;
  double t7975;
  double t6537;
  double t6590;
  double t6659;
  double t6983;
  double t7035;
  double t7043;
  double t7993;
  double t7998;
  double t8000;
  double t8021;
  double t8032;
  double t8039;
  double t7248;
  double t7252;
  double t7266;
  double t8051;
  double t8052;
  double t8063;
  double t8072;
  double t8076;
  double t8087;
  double t8142;
  double t8146;
  double t8149;
  double t8154;
  double t8159;
  double t8164;
  double t8187;
  double t8190;
  double t8191;
  double t8208;
  double t8212;
  double t8216;
  double t8224;
  double t8227;
  double t8230;
  double t8241;
  double t8246;
  double t8249;
  double t8252;
  double t8253;
  double t8264;
  double t8272;
  double t8276;
  double t8277;
  double t8285;
  double t8286;
  double t8287;
  double t8335;
  double t8337;
  double t8338;
  double t8340;
  double t8342;
  double t8344;
  double t8363;
  double t8366;
  double t8369;
  double t8376;
  double t8382;
  double t8384;
  double t8391;
  double t8395;
  double t8397;
  double t8401;
  double t8402;
  double t8405;
  double t8408;
  double t8411;
  double t8413;
  double t8417;
  double t8425;
  double t8429;
  double t8432;
  double t8434;
  double t8435;
  double t8478;
  double t8480;
  double t8481;
  double t8489;
  double t8492;
  double t8498;
  double t8509;
  double t8510;
  double t8512;
  double t8518;
  double t8523;
  double t8525;
  double t8531;
  double t8533;
  double t8534;
  double t8539;
  double t8540;
  double t8543;
  double t8546;
  double t8553;
  double t8554;
  double t8556;
  double t8561;
  double t8575;
  double t8577;
  double t8579;
  double t8583;
  double t8602;
  double t8608;
  double t8610;
  double t8635;
  double t8638;
  double t8624;
  double t8626;
  double t8630;
  double t8649;
  double t8654;
  double t8660;
  double t8662;
  double t8664;
  double t8667;
  double t8670;
  double t8671;
  double t8672;
  double t8674;
  double t8676;
  double t8678;
  double t8680;
  double t8686;
  double t8688;
  double t8700;
  double t8701;
  double t8702;
  double t8741;
  double t8743;
  double t8747;
  double t8753;
  double t8755;
  double t8758;
  double t8750;
  double t8751;
  double t8762;
  double t8764;
  double t8769;
  double t8773;
  double t8774;
  double t8780;
  double t8786;
  double t8787;
  double t8789;
  double t8791;
  double t8794;
  double t8795;
  double t8797;
  double t8798;
  double t8799;
  double t8801;
  double t8809;
  double t8811;
  double t8889;
  double t8892;
  double t8893;
  double t8866;
  double t8867;
  double t8870;
  double t8907;
  double t8910;
  double t8914;
  double t8921;
  double t8922;
  double t8934;
  double t8936;
  double t8937;
  double t8946;
  double t8953;
  double t8960;
  double t8962;
  double t8966;
  double t8967;
  double t8968;
  double t8970;
  double t8972;
  double t8973;
  double t9050;
  double t9052;
  double t9063;
  double t9068;
  double t9071;
  double t9081;
  double t9089;
  double t9090;
  double t9095;
  double t9104;
  double t9113;
  double t9128;
  double t9132;
  double t9144;
  double t9147;
  double t9148;
  double t9149;
  double t9152;
  double t9153;
  double t9154;
  double t9012;
  double t9013;
  double t9020;
  double t9024;
  double t9040;
  double t9191;
  double t9192;
  double t9200;
  double t9218;
  double t9221;
  double t9205;
  double t9213;
  double t9253;
  double t9256;
  double t9259;
  double t9261;
  double t9262;
  double t9264;
  double t9266;
  double t9277;
  double t9280;
  double t9285;
  double t9287;
  double t9289;
  double t9292;
  double t9294;
  double t9295;
  double t9307;
  double t9309;
  double t9311;
  double t8879;
  double t8895;
  double t8899;
  double t8900;
  double t8917;
  double t8935;
  double t8949;
  double t8965;
  double t8969;
  double t8980;
  double t8984;
  double t8985;
  double t8992;
  double t8994;
  double t8997;
  double t9004;
  double t9008;
  double t9009;
  double t7846;
  double t7853;
  double t7860;
  double t9375;
  double t9376;
  double t9377;
  double t9379;
  double t9382;
  double t9383;
  double t9385;
  double t9386;
  double t9390;
  double t9394;
  double t9395;
  double t9398;
  double t9343;
  double t9346;
  double t9347;
  double t9354;
  double t9355;
  double t9416;
  double t9419;
  double t9420;
  double t9424;
  double t9431;
  double t9432;
  double t9449;
  double t9456;
  double t9459;
  double t9463;
  double t9464;
  double t9466;
  double t9471;
  double t9473;
  double t9480;
  double t9482;
  double t9483;
  double t9484;
  double t9513;
  double t9514;
  double t9516;
  double t9518;
  double t9519;
  double t9522;
  double t9533;
  double t9534;
  double t9538;
  double t9540;
  double t9542;
  double t9543;
  double t9548;
  double t9551;
  double t9553;
  double t9556;
  double t9557;
  double t9559;
  double t9583;
  double t9585;
  double t9586;
  double t9592;
  double t9593;
  double t9598;
  double t9599;
  double t9600;
  double t9602;
  double t9603;
  double t9604;
  double t9606;
  double t9607;
  double t9609;
  double t9575;
  double t9576;
  double t9578;
  double t9579;
  double t9580;
  double t9622;
  double t9624;
  double t9625;
  double t9628;
  double t9630;
  double t9631;
  double t9633;
  double t9634;
  double t9635;
  double t9637;
  double t9638;
  double t9639;
  double t9641;
  double t9642;
  double t9643;
  double t9646;
  double t9647;
  double t9649;
  double t9651;
  double t9652;
  double t9653;
  double t9670;
  double t9671;
  double t9672;
  double t9674;
  double t9675;
  double t9676;
  double t9678;
  double t9679;
  double t9680;
  double t9683;
  double t9684;
  double t9687;
  double t9690;
  double t9691;
  double t9693;
  double t9696;
  double t9698;
  double t9699;
  double t9702;
  double t9704;
  double t9707;
  double t9734;
  double t9736;
  double t9740;
  double t9741;
  double t9742;
  double t9744;
  double t9745;
  double t9721;
  double t9722;
  double t9724;
  double t9727;
  double t9728;
  double t9760;
  double t9761;
  double t9762;
  double t9765;
  double t9767;
  double t9769;
  double t9770;
  double t9772;
  double t9773;
  double t9774;
  double t9776;
  double t9777;
  double t9778;
  double t9792;
  double t9793;
  double t9794;
  double t9797;
  double t9798;
  double t9800;
  double t9801;
  double t9803;
  double t9804;
  double t9805;
  double t9807;
  double t9808;
  double t9809;
  double t9833;
  double t9835;
  double t8101;
  double t9825;
  double t9827;
  double t9829;
  double t9830;
  double t9831;
  double t9847;
  double t9850;
  double t9852;
  double t9854;
  double t9855;
  double t9857;
  double t9859;
  double t9879;
  double t9880;
  double t9881;
  double t9884;
  double t9886;
  double t9888;
  double t9889;
  double t8098;
  double t8106;
  double t9842;
  double t9903;
  double t9904;
  double t9905;
  double t9907;
  double t9908;
  double t9916;
  double t9917;
  double t9919;
  double t9863;
  double t9868;
  double t9944;
  double t9946;
  double t9949;
  double t9894;
  double t9898;
  t1256 = Sin(var1[3]);
  t1547 = Cos(var1[13]);
  t1687 = -1.*t1547;
  t1765 = 1. + t1687;
  t1925 = Sin(var1[13]);
  t2221 = Cos(var1[3]);
  t2162 = Cos(var1[5]);
  t2201 = Sin(var1[4]);
  t2252 = Sin(var1[5]);
  t134 = Cos(var1[14]);
  t173 = -1.*t134;
  t579 = 1. + t173;
  t1055 = Sin(var1[14]);
  t2205 = -1.*t2162*t1256*t2201;
  t2259 = t2221*t2252;
  t2272 = t2205 + t2259;
  t2554 = -1.*t2221*t2162;
  t2581 = -1.*t1256*t2201*t2252;
  t2584 = t2554 + t2581;
  t64 = Cos(var1[4]);
  t2642 = t1925*t2272;
  t2670 = t1547*t2584;
  t2706 = t2642 + t2670;
  t2791 = Cos(var1[15]);
  t2840 = -1.*t2791;
  t2991 = 1. + t2840;
  t3179 = Sin(var1[15]);
  t3408 = t1547*t2272;
  t3517 = -1.*t1925*t2584;
  t3547 = t3408 + t3517;
  t3855 = -1.*t134*t64*t1256;
  t4171 = t1055*t2706;
  t4252 = t3855 + t4171;
  t4560 = Cos(var1[16]);
  t4681 = -1.*t4560;
  t4736 = 1. + t4681;
  t4784 = Sin(var1[16]);
  t4901 = t3179*t3547;
  t5034 = t2791*t4252;
  t5064 = t4901 + t5034;
  t5646 = t2791*t3547;
  t5654 = -1.*t3179*t4252;
  t5734 = t5646 + t5654;
  t5821 = Cos(var1[17]);
  t5858 = -1.*t5821;
  t5892 = 1. + t5858;
  t6090 = Sin(var1[17]);
  t6321 = -1.*t4784*t5064;
  t6325 = t4560*t5734;
  t6475 = t6321 + t6325;
  t6705 = t4560*t5064;
  t6745 = t4784*t5734;
  t6772 = t6705 + t6745;
  t6834 = Cos(var1[18]);
  t6901 = -1.*t6834;
  t6979 = 1. + t6901;
  t7021 = Sin(var1[18]);
  t7054 = t6090*t6475;
  t7066 = t5821*t6772;
  t7113 = t7054 + t7066;
  t7276 = t5821*t6475;
  t7287 = -1.*t6090*t6772;
  t7339 = t7276 + t7287;
  t1001 = -0.08055*t579;
  t1165 = -0.135*t1055;
  t1233 = 0. + t1001 + t1165;
  t1819 = 0.07996*t1765;
  t2016 = 0.135*t1925;
  t2089 = 0. + t1819 + t2016;
  t2388 = -0.135*t1765;
  t2396 = 0.07996*t1925;
  t2438 = 0. + t2388 + t2396;
  t2615 = -0.135*t579;
  t2618 = 0.08055*t1055;
  t2635 = 0. + t2615 + t2618;
  t7557 = t2221*t2162*t2201;
  t7585 = t1256*t2252;
  t7601 = t7557 + t7585;
  t7622 = -1.*t2162*t1256;
  t7639 = t2221*t2201*t2252;
  t7661 = t7622 + t7639;
  t3154 = -0.01004*t2991;
  t3245 = 0.08055*t3179;
  t3327 = 0. + t3154 + t3245;
  t7696 = t1925*t7601;
  t7742 = t1547*t7661;
  t7756 = t7696 + t7742;
  t3681 = -0.08055*t2991;
  t3768 = -0.01004*t3179;
  t3808 = 0. + t3681 + t3768;
  t4771 = -0.08055*t4736;
  t4794 = -0.13004*t4784;
  t4864 = 0. + t4771 + t4794;
  t7782 = t1547*t7601;
  t7826 = -1.*t1925*t7661;
  t7833 = t7782 + t7826;
  t7873 = t134*t2221*t64;
  t7900 = t1055*t7756;
  t7903 = t7873 + t7900;
  t5542 = -0.13004*t4736;
  t5544 = 0.08055*t4784;
  t5563 = 0. + t5542 + t5544;
  t5932 = -0.19074*t5892;
  t6225 = 0.03315*t6090;
  t6265 = 0. + t5932 + t6225;
  t7930 = t3179*t7833;
  t7939 = t2791*t7903;
  t7942 = t7930 + t7939;
  t7951 = t2791*t7833;
  t7958 = -1.*t3179*t7903;
  t7975 = t7951 + t7958;
  t6537 = -0.03315*t5892;
  t6590 = -0.19074*t6090;
  t6659 = 0. + t6537 + t6590;
  t6983 = -0.01315*t6979;
  t7035 = -0.62554*t7021;
  t7043 = 0. + t6983 + t7035;
  t7993 = -1.*t4784*t7942;
  t7998 = t4560*t7975;
  t8000 = t7993 + t7998;
  t8021 = t4560*t7942;
  t8032 = t4784*t7975;
  t8039 = t8021 + t8032;
  t7248 = -0.62554*t6979;
  t7252 = 0.01315*t7021;
  t7266 = 0. + t7248 + t7252;
  t8051 = t6090*t8000;
  t8052 = t5821*t8039;
  t8063 = t8051 + t8052;
  t8072 = t5821*t8000;
  t8076 = -1.*t6090*t8039;
  t8087 = t8072 + t8076;
  t8142 = t2221*t64*t2162*t1925;
  t8146 = t1547*t2221*t64*t2252;
  t8149 = t8142 + t8146;
  t8154 = t1547*t2221*t64*t2162;
  t8159 = -1.*t2221*t64*t1925*t2252;
  t8164 = t8154 + t8159;
  t8187 = -1.*t134*t2221*t2201;
  t8190 = t1055*t8149;
  t8191 = t8187 + t8190;
  t8208 = t3179*t8164;
  t8212 = t2791*t8191;
  t8216 = t8208 + t8212;
  t8224 = t2791*t8164;
  t8227 = -1.*t3179*t8191;
  t8230 = t8224 + t8227;
  t8241 = -1.*t4784*t8216;
  t8246 = t4560*t8230;
  t8249 = t8241 + t8246;
  t8252 = t4560*t8216;
  t8253 = t4784*t8230;
  t8264 = t8252 + t8253;
  t8272 = t6090*t8249;
  t8276 = t5821*t8264;
  t8277 = t8272 + t8276;
  t8285 = t5821*t8249;
  t8286 = -1.*t6090*t8264;
  t8287 = t8285 + t8286;
  t8335 = t64*t2162*t1925*t1256;
  t8337 = t1547*t64*t1256*t2252;
  t8338 = t8335 + t8337;
  t8340 = t1547*t64*t2162*t1256;
  t8342 = -1.*t64*t1925*t1256*t2252;
  t8344 = t8340 + t8342;
  t8363 = -1.*t134*t1256*t2201;
  t8366 = t1055*t8338;
  t8369 = t8363 + t8366;
  t8376 = t3179*t8344;
  t8382 = t2791*t8369;
  t8384 = t8376 + t8382;
  t8391 = t2791*t8344;
  t8395 = -1.*t3179*t8369;
  t8397 = t8391 + t8395;
  t8401 = -1.*t4784*t8384;
  t8402 = t4560*t8397;
  t8405 = t8401 + t8402;
  t8408 = t4560*t8384;
  t8411 = t4784*t8397;
  t8413 = t8408 + t8411;
  t8417 = t6090*t8405;
  t8425 = t5821*t8413;
  t8429 = t8417 + t8425;
  t8432 = t5821*t8405;
  t8434 = -1.*t6090*t8413;
  t8435 = t8432 + t8434;
  t8478 = -1.*t2162*t1925*t2201;
  t8480 = -1.*t1547*t2201*t2252;
  t8481 = t8478 + t8480;
  t8489 = -1.*t1547*t2162*t2201;
  t8492 = t1925*t2201*t2252;
  t8498 = t8489 + t8492;
  t8509 = -1.*t134*t64;
  t8510 = t1055*t8481;
  t8512 = t8509 + t8510;
  t8518 = t3179*t8498;
  t8523 = t2791*t8512;
  t8525 = t8518 + t8523;
  t8531 = t2791*t8498;
  t8533 = -1.*t3179*t8512;
  t8534 = t8531 + t8533;
  t8539 = -1.*t4784*t8525;
  t8540 = t4560*t8534;
  t8543 = t8539 + t8540;
  t8546 = t4560*t8525;
  t8553 = t4784*t8534;
  t8554 = t8546 + t8553;
  t8556 = t6090*t8543;
  t8561 = t5821*t8554;
  t8575 = t8556 + t8561;
  t8577 = t5821*t8543;
  t8579 = -1.*t6090*t8554;
  t8583 = t8577 + t8579;
  t8602 = t2162*t1256;
  t8608 = -1.*t2221*t2201*t2252;
  t8610 = t8602 + t8608;
  t8635 = t1925*t8610;
  t8638 = t7782 + t8635;
  t8624 = -1.*t1925*t7601;
  t8626 = t1547*t8610;
  t8630 = t8624 + t8626;
  t8649 = t3179*t8630;
  t8654 = t2791*t1055*t8638;
  t8660 = t8649 + t8654;
  t8662 = t2791*t8630;
  t8664 = -1.*t1055*t3179*t8638;
  t8667 = t8662 + t8664;
  t8670 = -1.*t4784*t8660;
  t8671 = t4560*t8667;
  t8672 = t8670 + t8671;
  t8674 = t4560*t8660;
  t8676 = t4784*t8667;
  t8678 = t8674 + t8676;
  t8680 = t6090*t8672;
  t8686 = t5821*t8678;
  t8688 = t8680 + t8686;
  t8700 = t5821*t8672;
  t8701 = -1.*t6090*t8678;
  t8702 = t8700 + t8701;
  t8741 = t2162*t1256*t2201;
  t8743 = -1.*t2221*t2252;
  t8747 = t8741 + t8743;
  t8753 = t1547*t8747;
  t8755 = t1925*t2584;
  t8758 = t8753 + t8755;
  t8750 = -1.*t1925*t8747;
  t8751 = t8750 + t2670;
  t8762 = t3179*t8751;
  t8764 = t2791*t1055*t8758;
  t8769 = t8762 + t8764;
  t8773 = t2791*t8751;
  t8774 = -1.*t1055*t3179*t8758;
  t8780 = t8773 + t8774;
  t8786 = -1.*t4784*t8769;
  t8787 = t4560*t8780;
  t8789 = t8786 + t8787;
  t8791 = t4560*t8769;
  t8794 = t4784*t8780;
  t8795 = t8791 + t8794;
  t8797 = t6090*t8789;
  t8798 = t5821*t8795;
  t8799 = t8797 + t8798;
  t8801 = t5821*t8789;
  t8809 = -1.*t6090*t8795;
  t8811 = t8801 + t8809;
  t8889 = t1547*t64*t2162;
  t8892 = -1.*t64*t1925*t2252;
  t8893 = t8889 + t8892;
  t8866 = -1.*t64*t2162*t1925;
  t8867 = -1.*t1547*t64*t2252;
  t8870 = t8866 + t8867;
  t8907 = t3179*t8870;
  t8910 = t2791*t1055*t8893;
  t8914 = t8907 + t8910;
  t8921 = t2791*t8870;
  t8922 = -1.*t1055*t3179*t8893;
  t8934 = t8921 + t8922;
  t8936 = -1.*t4784*t8914;
  t8937 = t4560*t8934;
  t8946 = t8936 + t8937;
  t8953 = t4560*t8914;
  t8960 = t4784*t8934;
  t8962 = t8953 + t8960;
  t8966 = t6090*t8946;
  t8967 = t5821*t8962;
  t8968 = t8966 + t8967;
  t8970 = t5821*t8946;
  t8972 = -1.*t6090*t8962;
  t8973 = t8970 + t8972;
  t9050 = -1.*t1547*t7661;
  t9052 = t8624 + t9050;
  t9063 = t3179*t9052;
  t9068 = t2791*t1055*t7833;
  t9071 = t9063 + t9068;
  t9081 = t2791*t9052;
  t9089 = -1.*t1055*t3179*t7833;
  t9090 = t9081 + t9089;
  t9095 = -1.*t4784*t9071;
  t9104 = t4560*t9090;
  t9113 = t9095 + t9104;
  t9128 = t4560*t9071;
  t9132 = t4784*t9090;
  t9144 = t9128 + t9132;
  t9147 = t6090*t9113;
  t9148 = t5821*t9144;
  t9149 = t9147 + t9148;
  t9152 = t5821*t9113;
  t9153 = -1.*t6090*t9144;
  t9154 = t9152 + t9153;
  t9012 = 0.135*t1547;
  t9013 = t9012 + t2396;
  t9020 = 0.07996*t1547;
  t9024 = -0.135*t1925;
  t9040 = t9020 + t9024;
  t9191 = t2221*t2162;
  t9192 = t1256*t2201*t2252;
  t9200 = t9191 + t9192;
  t9218 = -1.*t1925*t9200;
  t9221 = t8753 + t9218;
  t9205 = -1.*t1547*t9200;
  t9213 = t8750 + t9205;
  t9253 = t3179*t9213;
  t9256 = t2791*t1055*t9221;
  t9259 = t9253 + t9256;
  t9261 = t2791*t9213;
  t9262 = -1.*t1055*t3179*t9221;
  t9264 = t9261 + t9262;
  t9266 = -1.*t4784*t9259;
  t9277 = t4560*t9264;
  t9280 = t9266 + t9277;
  t9285 = t4560*t9259;
  t9287 = t4784*t9264;
  t9289 = t9285 + t9287;
  t9292 = t6090*t9280;
  t9294 = t5821*t9289;
  t9295 = t9292 + t9294;
  t9307 = t5821*t9280;
  t9309 = -1.*t6090*t9289;
  t9311 = t9307 + t9309;
  t8879 = t3327*t8870;
  t8895 = -0.1318*t134*t8893;
  t8899 = t2635*t8893;
  t8900 = t1055*t3808*t8893;
  t8917 = t4864*t8914;
  t8935 = t5563*t8934;
  t8949 = t6265*t8946;
  t8965 = t6659*t8962;
  t8969 = t7043*t8968;
  t8980 = t7266*t8973;
  t8984 = -1.*t7021*t8968;
  t8985 = t6834*t8973;
  t8992 = t8984 + t8985;
  t8994 = -0.73604*t8992;
  t8997 = t6834*t8968;
  t9004 = t7021*t8973;
  t9008 = t8997 + t9004;
  t9009 = -0.04375*t9008;
  t7846 = -1.*t2221*t64*t1055;
  t7853 = t134*t7756;
  t7860 = t7846 + t7853;
  t9375 = -1.*t4560*t3179*t7860;
  t9376 = -1.*t2791*t4784*t7860;
  t9377 = t9375 + t9376;
  t9379 = t2791*t4560*t7860;
  t9382 = -1.*t3179*t4784*t7860;
  t9383 = t9379 + t9382;
  t9385 = t6090*t9377;
  t9386 = t5821*t9383;
  t9390 = t9385 + t9386;
  t9394 = t5821*t9377;
  t9395 = -1.*t6090*t9383;
  t9398 = t9394 + t9395;
  t9343 = -0.135*t134;
  t9346 = -0.08055*t1055;
  t9347 = t9343 + t9346;
  t9354 = 0.08055*t134;
  t9355 = t9354 + t1165;
  t9416 = t1925*t8747;
  t9419 = t1547*t9200;
  t9420 = t9416 + t9419;
  t9424 = -1.*t64*t1055*t1256;
  t9431 = t134*t9420;
  t9432 = t9424 + t9431;
  t9449 = -1.*t4560*t3179*t9432;
  t9456 = -1.*t2791*t4784*t9432;
  t9459 = t9449 + t9456;
  t9463 = t2791*t4560*t9432;
  t9464 = -1.*t3179*t4784*t9432;
  t9466 = t9463 + t9464;
  t9471 = t6090*t9459;
  t9473 = t5821*t9466;
  t9480 = t9471 + t9473;
  t9482 = t5821*t9459;
  t9483 = -1.*t6090*t9466;
  t9484 = t9482 + t9483;
  t9513 = t64*t2162*t1925;
  t9514 = t1547*t64*t2252;
  t9516 = t9513 + t9514;
  t9518 = t1055*t2201;
  t9519 = t134*t9516;
  t9522 = t9518 + t9519;
  t9533 = -1.*t4560*t3179*t9522;
  t9534 = -1.*t2791*t4784*t9522;
  t9538 = t9533 + t9534;
  t9540 = t2791*t4560*t9522;
  t9542 = -1.*t3179*t4784*t9522;
  t9543 = t9540 + t9542;
  t9548 = t6090*t9538;
  t9551 = t5821*t9543;
  t9553 = t9548 + t9551;
  t9556 = t5821*t9538;
  t9557 = -1.*t6090*t9543;
  t9559 = t9556 + t9557;
  t9583 = -1.*t3179*t7833;
  t9585 = -1.*t2791*t7903;
  t9586 = t9583 + t9585;
  t9592 = t4784*t9586;
  t9593 = t9592 + t7998;
  t9598 = t4560*t9586;
  t9599 = -1.*t4784*t7975;
  t9600 = t9598 + t9599;
  t9602 = -1.*t6090*t9593;
  t9603 = t5821*t9600;
  t9604 = t9602 + t9603;
  t9606 = t5821*t9593;
  t9607 = t6090*t9600;
  t9609 = t9606 + t9607;
  t9575 = 0.08055*t2791;
  t9576 = t9575 + t3768;
  t9578 = -0.01004*t2791;
  t9579 = -0.08055*t3179;
  t9580 = t9578 + t9579;
  t9622 = t134*t64*t1256;
  t9624 = t1055*t9420;
  t9625 = t9622 + t9624;
  t9628 = -1.*t3179*t9221;
  t9630 = -1.*t2791*t9625;
  t9631 = t9628 + t9630;
  t9633 = t2791*t9221;
  t9634 = -1.*t3179*t9625;
  t9635 = t9633 + t9634;
  t9637 = t4784*t9631;
  t9638 = t4560*t9635;
  t9639 = t9637 + t9638;
  t9641 = t4560*t9631;
  t9642 = -1.*t4784*t9635;
  t9643 = t9641 + t9642;
  t9646 = -1.*t6090*t9639;
  t9647 = t5821*t9643;
  t9649 = t9646 + t9647;
  t9651 = t5821*t9639;
  t9652 = t6090*t9643;
  t9653 = t9651 + t9652;
  t9670 = -1.*t134*t2201;
  t9671 = t1055*t9516;
  t9672 = t9670 + t9671;
  t9674 = -1.*t3179*t8893;
  t9675 = -1.*t2791*t9672;
  t9676 = t9674 + t9675;
  t9678 = t2791*t8893;
  t9679 = -1.*t3179*t9672;
  t9680 = t9678 + t9679;
  t9683 = t4784*t9676;
  t9684 = t4560*t9680;
  t9687 = t9683 + t9684;
  t9690 = t4560*t9676;
  t9691 = -1.*t4784*t9680;
  t9693 = t9690 + t9691;
  t9696 = -1.*t6090*t9687;
  t9698 = t5821*t9693;
  t9699 = t9696 + t9698;
  t9702 = t5821*t9687;
  t9704 = t6090*t9693;
  t9707 = t9702 + t9704;
  t9734 = -1.*t4560*t7942;
  t9736 = t9734 + t9599;
  t9740 = -1.*t6090*t8000;
  t9741 = t5821*t9736;
  t9742 = t9740 + t9741;
  t9744 = t6090*t9736;
  t9745 = t8072 + t9744;
  t9721 = -0.13004*t4560;
  t9722 = -0.08055*t4784;
  t9724 = t9721 + t9722;
  t9727 = 0.08055*t4560;
  t9728 = t9727 + t4794;
  t9760 = t3179*t9221;
  t9761 = t2791*t9625;
  t9762 = t9760 + t9761;
  t9765 = -1.*t4784*t9762;
  t9767 = t9765 + t9638;
  t9769 = -1.*t4560*t9762;
  t9770 = t9769 + t9642;
  t9772 = -1.*t6090*t9767;
  t9773 = t5821*t9770;
  t9774 = t9772 + t9773;
  t9776 = t5821*t9767;
  t9777 = t6090*t9770;
  t9778 = t9776 + t9777;
  t9792 = t3179*t8893;
  t9793 = t2791*t9672;
  t9794 = t9792 + t9793;
  t9797 = -1.*t4784*t9794;
  t9798 = t9797 + t9684;
  t9800 = -1.*t4560*t9794;
  t9801 = t9800 + t9691;
  t9803 = -1.*t6090*t9798;
  t9804 = t5821*t9801;
  t9805 = t9803 + t9804;
  t9807 = t5821*t9798;
  t9808 = t6090*t9801;
  t9809 = t9807 + t9808;
  t9833 = -1.*t5821*t8039;
  t9835 = t9740 + t9833;
  t8101 = t6834*t8087;
  t9825 = 0.03315*t5821;
  t9827 = t9825 + t6590;
  t9829 = -0.19074*t5821;
  t9830 = -0.03315*t6090;
  t9831 = t9829 + t9830;
  t9847 = t4560*t9762;
  t9850 = t4784*t9635;
  t9852 = t9847 + t9850;
  t9854 = -1.*t5821*t9852;
  t9855 = t9772 + t9854;
  t9857 = -1.*t6090*t9852;
  t9859 = t9776 + t9857;
  t9879 = t4560*t9794;
  t9880 = t4784*t9680;
  t9881 = t9879 + t9880;
  t9884 = -1.*t5821*t9881;
  t9886 = t9803 + t9884;
  t9888 = -1.*t6090*t9881;
  t9889 = t9807 + t9888;
  t8098 = -1.*t7021*t8063;
  t8106 = t8098 + t8101;
  t9842 = -1.*t7021*t8087;
  t9903 = -0.62554*t6834;
  t9904 = -0.01315*t7021;
  t9905 = t9903 + t9904;
  t9907 = 0.01315*t6834;
  t9908 = t9907 + t7035;
  t9916 = t6090*t9767;
  t9917 = t5821*t9852;
  t9919 = t9916 + t9917;
  t9863 = t6834*t9859;
  t9868 = -1.*t7021*t9859;
  t9944 = t6090*t9798;
  t9946 = t5821*t9881;
  t9949 = t9944 + t9946;
  t9894 = t6834*t9889;
  t9898 = -1.*t7021*t9889;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t2089*t2272 + t2438*t2584 + t2635*t2706 + t3327*t3547 + t3808*t4252 + t4864*t5064 + t5563*t5734 - 1.*t1233*t1256*t64 - 0.1318*(t134*t2706 + t1055*t1256*t64) + t6265*t6475 + t6659*t6772 + t7043*t7113 + t7266*t7339 - 0.73604*(-1.*t7021*t7113 + t6834*t7339) - 0.04375*(t6834*t7113 + t7021*t7339);
  p_output1[10]=t1233*t2221*t64 + t2089*t7601 + t2438*t7661 + t2635*t7756 + t3327*t7833 - 0.1318*t7860 + t3808*t7903 + t4864*t7942 + t5563*t7975 + t6265*t8000 + t6659*t8039 + t7043*t8063 + t7266*t8087 - 0.04375*(t6834*t8063 + t7021*t8087) - 0.73604*t8106;
  p_output1[11]=0;
  p_output1[12]=-1.*t1233*t2201*t2221 + t2089*t2162*t2221*t64 + t2221*t2252*t2438*t64 + t2635*t8149 - 0.1318*(t1055*t2201*t2221 + t134*t8149) + t3327*t8164 + t3808*t8191 + t4864*t8216 + t5563*t8230 + t6265*t8249 + t6659*t8264 + t7043*t8277 + t7266*t8287 - 0.73604*(-1.*t7021*t8277 + t6834*t8287) - 0.04375*(t6834*t8277 + t7021*t8287);
  p_output1[13]=-1.*t1233*t1256*t2201 + t1256*t2089*t2162*t64 + t1256*t2252*t2438*t64 + t2635*t8338 - 0.1318*(t1055*t1256*t2201 + t134*t8338) + t3327*t8344 + t3808*t8369 + t4864*t8384 + t5563*t8397 + t6265*t8405 + t6659*t8413 + t7043*t8429 + t7266*t8435 - 0.73604*(-1.*t7021*t8429 + t6834*t8435) - 0.04375*(t6834*t8429 + t7021*t8435);
  p_output1[14]=-1.*t2089*t2162*t2201 - 1.*t2201*t2252*t2438 - 1.*t1233*t64 + t2635*t8481 - 0.1318*(t1055*t64 + t134*t8481) + t3327*t8498 + t3808*t8512 + t4864*t8525 + t5563*t8534 + t6265*t8543 + t6659*t8554 + t7043*t8575 + t7266*t8583 - 0.73604*(-1.*t7021*t8575 + t6834*t8583) - 0.04375*(t6834*t8575 + t7021*t8583);
  p_output1[15]=t2438*t7601 + t2089*t8610 + t3327*t8630 - 0.1318*t134*t8638 + t2635*t8638 + t1055*t3808*t8638 + t4864*t8660 + t5563*t8667 + t6265*t8672 + t6659*t8678 + t7043*t8688 + t7266*t8702 - 0.73604*(-1.*t7021*t8688 + t6834*t8702) - 0.04375*(t6834*t8688 + t7021*t8702);
  p_output1[16]=t2089*t2584 + t2438*t8747 + t3327*t8751 - 0.1318*t134*t8758 + t2635*t8758 + t1055*t3808*t8758 + t4864*t8769 + t5563*t8780 + t6265*t8789 + t6659*t8795 + t7043*t8799 + t7266*t8811 - 0.73604*(-1.*t7021*t8799 + t6834*t8811) - 0.04375*(t6834*t8799 + t7021*t8811);
  p_output1[17]=-1.*t2089*t2252*t64 + t2162*t2438*t64 + t8879 + t8895 + t8899 + t8900 + t8917 + t8935 + t8949 + t8965 + t8969 + t8980 + t8994 + t9009;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=-0.1318*t134*t7833 + t2635*t7833 + t1055*t3808*t7833 + t7601*t9013 + t7661*t9040 + t3327*t9052 + t4864*t9071 + t5563*t9090 + t6265*t9113 + t6659*t9144 + t7043*t9149 + t7266*t9154 - 0.73604*(-1.*t7021*t9149 + t6834*t9154) - 0.04375*(t6834*t9149 + t7021*t9154);
  p_output1[40]=t8747*t9013 + t9040*t9200 + t3327*t9213 - 0.1318*t134*t9221 + t2635*t9221 + t1055*t3808*t9221 + t4864*t9259 + t5563*t9264 + t6265*t9280 + t6659*t9289 + t7043*t9295 + t7266*t9311 - 0.73604*(-1.*t7021*t9295 + t6834*t9311) - 0.04375*(t6834*t9295 + t7021*t9311);
  p_output1[41]=t8879 + t8895 + t8899 + t8900 + t8917 + t8935 + t8949 + t8965 + t8969 + t8980 + t8994 + t9009 + t2162*t64*t9013 + t2252*t64*t9040;
  p_output1[42]=-0.1318*(-1.*t134*t2221*t64 - 1.*t1055*t7756) + t3808*t7860 + t2791*t4864*t7860 - 1.*t3179*t5563*t7860 + t2221*t64*t9347 + t7756*t9355 + t6265*t9377 + t6659*t9383 + t7043*t9390 + t7266*t9398 - 0.73604*(-1.*t7021*t9390 + t6834*t9398) - 0.04375*(t6834*t9390 + t7021*t9398);
  p_output1[43]=t1256*t64*t9347 + t9355*t9420 - 0.1318*(t3855 - 1.*t1055*t9420) + t3808*t9432 + t2791*t4864*t9432 - 1.*t3179*t5563*t9432 + t6265*t9459 + t6659*t9466 + t7043*t9480 + t7266*t9484 - 0.73604*(-1.*t7021*t9480 + t6834*t9484) - 0.04375*(t6834*t9480 + t7021*t9484);
  p_output1[44]=-1.*t2201*t9347 + t9355*t9516 - 0.1318*(t134*t2201 - 1.*t1055*t9516) + t3808*t9522 + t2791*t4864*t9522 - 1.*t3179*t5563*t9522 + t6265*t9538 + t6659*t9543 + t7043*t9553 + t7266*t9559 - 0.73604*(-1.*t7021*t9553 + t6834*t9559) - 0.04375*(t6834*t9553 + t7021*t9559);
  p_output1[45]=t4864*t7975 + t7833*t9576 + t7903*t9580 + t5563*t9586 + t6659*t9593 + t6265*t9600 + t7266*t9604 + t7043*t9609 - 0.04375*(t7021*t9604 + t6834*t9609) - 0.73604*(t6834*t9604 - 1.*t7021*t9609);
  p_output1[46]=t9221*t9576 + t9580*t9625 + t5563*t9631 + t4864*t9635 + t6659*t9639 + t6265*t9643 + t7266*t9649 + t7043*t9653 - 0.04375*(t7021*t9649 + t6834*t9653) - 0.73604*(t6834*t9649 - 1.*t7021*t9653);
  p_output1[47]=t8893*t9576 + t9580*t9672 + t5563*t9676 + t4864*t9680 + t6659*t9687 + t6265*t9693 + t7266*t9699 + t7043*t9707 - 0.04375*(t7021*t9699 + t6834*t9707) - 0.73604*(t6834*t9699 - 1.*t7021*t9707);
  p_output1[48]=t6659*t8000 + t7942*t9724 + t7975*t9728 + t6265*t9736 + t7266*t9742 + t7043*t9745 - 0.04375*(t7021*t9742 + t6834*t9745) - 0.73604*(t6834*t9742 - 1.*t7021*t9745);
  p_output1[49]=t9635*t9728 + t9724*t9762 + t6659*t9767 + t6265*t9770 + t7266*t9774 + t7043*t9778 - 0.04375*(t7021*t9774 + t6834*t9778) - 0.73604*(t6834*t9774 - 1.*t7021*t9778);
  p_output1[50]=t9680*t9728 + t9724*t9794 + t6659*t9798 + t6265*t9801 + t7266*t9805 + t7043*t9809 - 0.04375*(t7021*t9805 + t6834*t9809) - 0.73604*(t6834*t9805 - 1.*t7021*t9809);
  p_output1[51]=t7043*t8087 + t8000*t9827 + t8039*t9831 + t7266*t9835 - 0.04375*(t8101 + t7021*t9835) - 0.73604*(t6834*t9835 + t9842);
  p_output1[52]=t9767*t9827 + t9831*t9852 + t7266*t9855 + t7043*t9859 - 0.04375*(t7021*t9855 + t9863) - 0.73604*(t6834*t9855 + t9868);
  p_output1[53]=t9798*t9827 + t9831*t9881 + t7266*t9886 + t7043*t9889 - 0.04375*(t7021*t9886 + t9894) - 0.73604*(t6834*t9886 + t9898);
  p_output1[54]=-0.04375*t8106 - 0.73604*(-1.*t6834*t8063 + t9842) + t8063*t9905 + t8087*t9908;
  p_output1[55]=t9859*t9908 + t9905*t9919 - 0.73604*(t9868 - 1.*t6834*t9919) - 0.04375*(t9863 - 1.*t7021*t9919);
  p_output1[56]=t9889*t9908 + t9905*t9949 - 0.73604*(t9898 - 1.*t6834*t9949) - 0.04375*(t9894 - 1.*t7021*t9949);
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Jp_RightTarsus_mex.hh"

namespace SymExpression
{

void Jp_RightTarsus_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
