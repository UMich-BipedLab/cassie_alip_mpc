/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:25:27 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t636;
  double t1025;
  double t1168;
  double t551;
  double t1263;
  double t225;
  double t92;
  double t3136;
  double t3144;
  double t2873;
  double t3118;
  double t3302;
  double t3111;
  double t3169;
  double t3170;
  double t3183;
  double t3199;
  double t3727;
  double t3738;
  double t3705;
  double t3818;
  double t3858;
  double t3861;
  double t3889;
  double t3890;
  double t3919;
  double t3729;
  double t3828;
  double t3831;
  double t4059;
  double t4079;
  double t4056;
  double t4081;
  double t4085;
  double t4209;
  double t4233;
  double t4265;
  double t4618;
  double t4621;
  double t4625;
  double t4643;
  double t4645;
  double t4707;
  double t4712;
  double t4680;
  double t4736;
  double t4745;
  double t4772;
  double t4777;
  double t4939;
  double t1023;
  double t2250;
  double t2423;
  double t2510;
  double t2586;
  double t2709;
  double t2722;
  double t3033;
  double t3059;
  double t6411;
  double t6417;
  double t6429;
  double t6186;
  double t6237;
  double t6240;
  double t3179;
  double t3208;
  double t3266;
  double t3287;
  double t3309;
  double t3349;
  double t3365;
  double t3403;
  double t3409;
  double t3426;
  double t3429;
  double t3595;
  double t3640;
  double t3681;
  double t3836;
  double t3971;
  double t3993;
  double t4087;
  double t4302;
  double t4311;
  double t4315;
  double t4325;
  double t4329;
  double t4335;
  double t4407;
  double t4489;
  double t4494;
  double t4539;
  double t4542;
  double t4590;
  double t4653;
  double t4676;
  double t4765;
  double t4986;
  double t5111;
  double t5117;
  double t5195;
  double t5307;
  double t5374;
  double t5491;
  double t5527;
  double t5582;
  double t5731;
  double t5883;
  double t6272;
  double t6460;
  double t6466;
  double t6504;
  double t6521;
  double t6731;
  double t3685;
  double t4574;
  double t5982;
  double t6163;
  double t7561;
  double t7566;
  double t7595;
  double t7630;
  double t7636;
  double t7677;
  double t7743;
  double t7745;
  double t7754;
  double t7812;
  double t7856;
  double t7873;
  double t7793;
  double t7797;
  double t7798;
  double t6771;
  double t6861;
  double t6902;
  double t7040;
  double t7809;
  double t7883;
  double t7894;
  double t7907;
  double t7908;
  double t7910;
  double t7321;
  double t7362;
  double t7365;
  double t7402;
  double t7755;
  double t7759;
  double t7765;
  double t7897;
  double t7922;
  double t7931;
  double t8067;
  double t8068;
  double t8076;
  double t8091;
  double t8112;
  double t8122;
  double t8137;
  double t8183;
  double t8185;
  double t8008;
  double t8021;
  double t8042;
  double t8340;
  double t8380;
  double t8388;
  double t8535;
  double t8542;
  double t8544;
  double t8478;
  double t8479;
  double t8531;
  double t8532;
  double t8547;
  double t8556;
  double t8562;
  double t8566;
  double t8582;
  double t8081;
  double t8126;
  double t8203;
  double t8208;
  double t8617;
  double t8625;
  double t8626;
  double t8630;
  double t8631;
  double t8633;
  double t8635;
  double t8641;
  double t8643;
  double t8657;
  double t8658;
  double t8659;
  double t8650;
  double t8652;
  double t8653;
  double t8239;
  double t8250;
  double t8278;
  double t8279;
  double t8654;
  double t8660;
  double t8663;
  double t8668;
  double t8669;
  double t8671;
  double t8293;
  double t8296;
  double t8321;
  double t8323;
  double t8695;
  double t8696;
  double t8697;
  double t8724;
  double t8728;
  double t8729;
  double t8712;
  double t8714;
  double t8719;
  double t8720;
  double t8732;
  double t8736;
  double t8746;
  double t8758;
  double t8760;
  double t8785;
  double t8787;
  double t8788;
  double t8805;
  double t8806;
  double t8807;
  double t8799;
  double t8801;
  double t8802;
  double t8804;
  double t8808;
  double t8810;
  double t8815;
  double t8817;
  double t8818;
  double t8830;
  double t8831;
  double t8833;
  double t8848;
  double t8849;
  double t8850;
  double t8843;
  double t8845;
  double t8846;
  double t8847;
  double t8853;
  double t8854;
  double t8856;
  double t8857;
  double t8858;
  double t8878;
  double t8879;
  double t8881;
  double t8882;
  double t8885;
  double t8887;
  double t8888;
  double t8892;
  double t8893;
  double t8894;
  double t8898;
  double t8899;
  double t8900;
  double t8904;
  double t8909;
  double t8911;
  double t8912;
  double t8914;
  double t8915;
  double t8917;
  double t8919;
  double t8958;
  double t8959;
  double t8960;
  double t8961;
  double t8962;
  double t8968;
  double t8970;
  double t8971;
  double t8965;
  double t8973;
  double t8976;
  double t8987;
  double t8988;
  double t8989;
  double t8644;
  double t8645;
  double t8647;
  double t8889;
  double t8908;
  double t8926;
  double t8927;
  double t8664;
  double t8676;
  double t8678;
  double t8932;
  double t8933;
  double t8935;
  double t8936;
  double t8681;
  double t8682;
  double t8686;
  double t8939;
  double t8940;
  double t8945;
  double t8956;
  double t9011;
  double t9015;
  double t9029;
  double t9033;
  double t9020;
  double t9038;
  double t9041;
  double t9045;
  double t9047;
  double t9048;
  double t8789;
  double t8793;
  double t8797;
  double t8811;
  double t8821;
  double t8822;
  double t8825;
  double t8826;
  double t8827;
  double t9085;
  double t9090;
  double t9093;
  double t9083;
  double t9094;
  double t9095;
  double t9099;
  double t9101;
  double t9102;
  double t9148;
  double t9152;
  double t9157;
  double t9164;
  double t9182;
  double t9186;
  double t9187;
  double t9189;
  double t9124;
  double t9125;
  double t9129;
  double t9130;
  double t9134;
  double t9136;
  double t9139;
  double t9143;
  double t9145;
  double t9151;
  double t9165;
  double t9166;
  double t9168;
  double t9171;
  double t9175;
  double t9176;
  double t9177;
  double t9179;
  double t9183;
  double t9190;
  double t9191;
  double t9194;
  double t9197;
  double t9202;
  double t9203;
  double t9205;
  double t9208;
  double t9232;
  double t9239;
  double t9230;
  double t9244;
  double t9252;
  double t9256;
  double t9258;
  double t9259;
  double t9146;
  double t9180;
  double t9209;
  double t9210;
  double t9214;
  double t9215;
  double t9217;
  double t9218;
  double t9221;
  double t9222;
  double t9223;
  double t9225;
  double t9294;
  double t9296;
  double t9293;
  double t9297;
  double t9299;
  double t9302;
  double t9303;
  double t9304;
  double t9082;
  double t9096;
  double t9104;
  double t9105;
  double t9108;
  double t9111;
  double t9114;
  double t9117;
  double t9120;
  double t9328;
  double t9330;
  double t9332;
  double t9333;
  double t9336;
  double t9338;
  double t9339;
  double t9341;
  double t9342;
  double t9343;
  double t9345;
  double t9346;
  double t9348;
  double t9351;
  double t9352;
  double t9353;
  double t9360;
  double t9361;
  double t9362;
  double t9364;
  double t9366;
  double t9368;
  double t9371;
  double t9372;
  double t9374;
  double t9375;
  double t9376;
  double t9381;
  double t9382;
  double t9385;
  double t9386;
  double t9387;
  double t9388;
  double t9389;
  double t9390;
  double t9392;
  double t9395;
  double t9396;
  double t9399;
  double t9400;
  double t9404;
  double t9439;
  double t9446;
  double t9458;
  double t9350;
  double t9377;
  double t9405;
  double t9406;
  double t9412;
  double t9413;
  double t9414;
  double t9415;
  double t9423;
  double t9424;
  double t9432;
  double t9434;
  double t3124;
  double t9481;
  double t9483;
  double t9532;
  double t9536;
  double t9543;
  double t9565;
  double t9569;
  double t9571;
  double t9577;
  double t9580;
  double t9581;
  double t9587;
  double t9591;
  double t9592;
  double t9594;
  double t9623;
  double t9631;
  double t9632;
  double t9633;
  double t9635;
  double t9636;
  double t9639;
  double t9574;
  double t9575;
  double t9579;
  double t9590;
  double t9599;
  double t9600;
  double t9602;
  double t9603;
  double t9604;
  double t9606;
  double t9608;
  double t9610;
  double t9612;
  double t9618;
  double t9620;
  double t9624;
  double t9626;
  double t9630;
  double t9634;
  double t9640;
  double t9641;
  double t9642;
  double t9644;
  double t9646;
  double t9647;
  double t9648;
  double t9649;
  double t9652;
  double t9653;
  double t9654;
  double t9681;
  double t9682;
  double t9684;
  double t9621;
  double t9655;
  double t9656;
  double t9665;
  double t9667;
  double t9668;
  double t9674;
  double t9677;
  double t9678;
  double t9707;
  double t9709;
  double t9711;
  double t9742;
  double t9743;
  double t9745;
  double t9663;
  double t9672;
  double t9679;
  double t9694;
  double t9699;
  double t9704;
  double t9706;
  double t9723;
  double t9729;
  double t9739;
  double t9740;
  double t9757;
  t636 = Cos(var1[5]);
  t1025 = Sin(var1[3]);
  t1168 = Sin(var1[4]);
  t551 = Cos(var1[3]);
  t1263 = Sin(var1[5]);
  t225 = Cos(var1[6]);
  t92 = Cos(var1[7]);
  t3136 = -1.*t92;
  t3144 = 0. + t3136;
  t2873 = Sin(var1[6]);
  t3118 = Sin(var1[7]);
  t3302 = 0. + t3118;
  t3111 = Cos(var1[4]);
  t3169 = t225*t3144;
  t3170 = 0. + t3169;
  t3183 = t3144*t2873;
  t3199 = 0. + t3183;
  t3727 = Cos(var1[8]);
  t3738 = Sin(var1[9]);
  t3705 = Cos(var1[9]);
  t3818 = Sin(var1[8]);
  t3858 = t3727*t3738;
  t3861 = t3705*t3818;
  t3889 = 0. + t3858 + t3861;
  t3890 = t92*t3889;
  t3919 = 0. + t3890;
  t3729 = -1.*t3705*t3727;
  t3828 = t3738*t3818;
  t3831 = 0. + t3729 + t3828;
  t4059 = t3118*t3889;
  t4079 = 0. + t4059;
  t4056 = -1.*t2873*t3831;
  t4081 = t225*t4079;
  t4085 = 0. + t4056 + t4081;
  t4209 = t225*t3831;
  t4233 = t2873*t4079;
  t4265 = 0. + t4209 + t4233;
  t4618 = t3705*t3727;
  t4621 = -1.*t3738*t3818;
  t4625 = 0. + t4618 + t4621;
  t4643 = t92*t4625;
  t4645 = 0. + t4643;
  t4707 = t3118*t4625;
  t4712 = 0. + t4707;
  t4680 = -1.*t2873*t3889;
  t4736 = t225*t4712;
  t4745 = 0. + t4680 + t4736;
  t4772 = t225*t3889;
  t4777 = t2873*t4712;
  t4939 = 0. + t4772 + t4777;
  t1023 = -1.*t551*t636;
  t2250 = -1.*t1025*t1168*t1263;
  t2423 = t1023 + t2250;
  t2510 = t225*t2423;
  t2586 = -1.*t636*t1025*t1168;
  t2709 = t551*t1263;
  t2722 = t2586 + t2709;
  t3033 = t2722*t2873;
  t3059 = t2510 + t3033;
  t6411 = t225*t2722;
  t6417 = -1.*t2423*t2873;
  t6429 = t6411 + t6417;
  t6186 = -1.*t3111*t92*t1025;
  t6237 = t3059*t3118;
  t6240 = t6186 + t6237;
  t3179 = t636*t3170;
  t3208 = -1.*t1263*t3199;
  t3266 = 0. + t3179 + t3208;
  t3287 = var2[4]*t3266;
  t3309 = var2[5]*t3302;
  t3349 = var2[6]*t3302;
  t3365 = t3170*t1263;
  t3403 = t636*t3199;
  t3409 = 0. + t3365 + t3403;
  t3426 = t3111*t3409;
  t3429 = -1.*t1168*t3302;
  t3595 = 0. + t3426 + t3429;
  t3640 = var2[3]*t3595;
  t3681 = 0. + var2[9] + var2[8] + t3287 + t3309 + t3349 + t3640;
  t3836 = var2[7]*t3831;
  t3971 = var2[5]*t3919;
  t3993 = var2[6]*t3919;
  t4087 = t636*t4085;
  t4302 = -1.*t1263*t4265;
  t4311 = 0. + t4087 + t4302;
  t4315 = var2[4]*t4311;
  t4325 = -1.*t1168*t3919;
  t4329 = t1263*t4085;
  t4335 = t636*t4265;
  t4407 = 0. + t4329 + t4335;
  t4489 = t3111*t4407;
  t4494 = 0. + t4325 + t4489;
  t4539 = var2[3]*t4494;
  t4542 = 0. + t3836 + t3971 + t3993 + t4315 + t4539;
  t4590 = var2[7]*t3889;
  t4653 = var2[5]*t4645;
  t4676 = var2[6]*t4645;
  t4765 = t636*t4745;
  t4986 = -1.*t1263*t4939;
  t5111 = 0. + t4765 + t4986;
  t5117 = var2[4]*t5111;
  t5195 = -1.*t1168*t4645;
  t5307 = t1263*t4745;
  t5374 = t636*t4939;
  t5491 = 0. + t5307 + t5374;
  t5527 = t3111*t5491;
  t5582 = 0. + t5195 + t5527;
  t5731 = var2[3]*t5582;
  t5883 = 0. + t4590 + t4653 + t4676 + t5117 + t5731;
  t6272 = t3727*t6240;
  t6460 = t6429*t3818;
  t6466 = t6272 + t6460;
  t6504 = t3727*t6429;
  t6521 = -1.*t6240*t3818;
  t6731 = t6504 + t6521;
  t3685 = 0.00334*t3681;
  t4574 = 3.e-6*t4542;
  t5982 = 1.e-6*t5883;
  t6163 = t3685 + t4574 + t5982;
  t7561 = -1.*t636*t1025;
  t7566 = t551*t1168*t1263;
  t7595 = t7561 + t7566;
  t7630 = t225*t7595;
  t7636 = t551*t636*t1168;
  t7677 = t1025*t1263;
  t7743 = t7636 + t7677;
  t7745 = t7743*t2873;
  t7754 = t7630 + t7745;
  t7812 = t225*t7743;
  t7856 = -1.*t7595*t2873;
  t7873 = t7812 + t7856;
  t7793 = t551*t3111*t92;
  t7797 = t7754*t3118;
  t7798 = t7793 + t7797;
  t6771 = 3.e-6*t3681;
  t6861 = 0.00216*t4542;
  t6902 = 0.000956*t5883;
  t7040 = t6771 + t6861 + t6902;
  t7809 = t3727*t7798;
  t7883 = t7873*t3818;
  t7894 = t7809 + t7883;
  t7907 = t3727*t7873;
  t7908 = -1.*t7798*t3818;
  t7910 = t7907 + t7908;
  t7321 = 1.e-6*t3681;
  t7362 = 0.000956*t4542;
  t7365 = 0.00144*t5883;
  t7402 = t7321 + t7362 + t7365;
  t7755 = -1.*t92*t7754;
  t7759 = t551*t3111*t3118;
  t7765 = t7755 + t7759;
  t7897 = t3738*t7894;
  t7922 = -1.*t3705*t7910;
  t7931 = t7897 + t7922;
  t8067 = -1.*t1168*t3409;
  t8068 = -1.*t3111*t3302;
  t8076 = t8067 + t8068;
  t8091 = -1.*t3111*t3919;
  t8112 = -1.*t1168*t4407;
  t8122 = t8091 + t8112;
  t8137 = -1.*t3111*t4645;
  t8183 = -1.*t1168*t5491;
  t8185 = t8137 + t8183;
  t8008 = t3705*t7894;
  t8021 = t3738*t7910;
  t8042 = t8008 + t8021;
  t8340 = t551*t3111*t225*t1263;
  t8380 = t551*t3111*t636*t2873;
  t8388 = t8340 + t8380;
  t8535 = t551*t3111*t636*t225;
  t8542 = -1.*t551*t3111*t1263*t2873;
  t8544 = t8535 + t8542;
  t8478 = -1.*t551*t92*t1168;
  t8479 = t8388*t3118;
  t8531 = t8478 + t8479;
  t8532 = t3727*t8531;
  t8547 = t8544*t3818;
  t8556 = t8532 + t8547;
  t8562 = t3727*t8544;
  t8566 = -1.*t8531*t3818;
  t8582 = t8562 + t8566;
  t8081 = 0.00334*var2[3]*t8076;
  t8126 = 3.e-6*var2[3]*t8122;
  t8203 = 1.e-6*var2[3]*t8185;
  t8208 = t8081 + t8126 + t8203;
  t8617 = t551*t636;
  t8625 = t1025*t1168*t1263;
  t8626 = t8617 + t8625;
  t8630 = t225*t8626;
  t8631 = t636*t1025*t1168;
  t8633 = -1.*t551*t1263;
  t8635 = t8631 + t8633;
  t8641 = t8635*t2873;
  t8643 = t8630 + t8641;
  t8657 = t225*t8635;
  t8658 = -1.*t8626*t2873;
  t8659 = t8657 + t8658;
  t8650 = t3111*t92*t1025;
  t8652 = t8643*t3118;
  t8653 = t8650 + t8652;
  t8239 = 3.e-6*var2[3]*t8076;
  t8250 = 0.00216*var2[3]*t8122;
  t8278 = 0.000956*var2[3]*t8185;
  t8279 = t8239 + t8250 + t8278;
  t8654 = t3727*t8653;
  t8660 = t8659*t3818;
  t8663 = t8654 + t8660;
  t8668 = t3727*t8659;
  t8669 = -1.*t8653*t3818;
  t8671 = t8668 + t8669;
  t8293 = 1.e-6*var2[3]*t8076;
  t8296 = 0.000956*var2[3]*t8122;
  t8321 = 0.00144*var2[3]*t8185;
  t8323 = t8293 + t8296 + t8321;
  t8695 = t3111*t225*t1025*t1263;
  t8696 = t3111*t636*t1025*t2873;
  t8697 = t8695 + t8696;
  t8724 = t3111*t636*t225*t1025;
  t8728 = -1.*t3111*t1025*t1263*t2873;
  t8729 = t8724 + t8728;
  t8712 = -1.*t92*t1025*t1168;
  t8714 = t8697*t3118;
  t8719 = t8712 + t8714;
  t8720 = t3727*t8719;
  t8732 = t8729*t3818;
  t8736 = t8720 + t8732;
  t8746 = t3727*t8729;
  t8758 = -1.*t8719*t3818;
  t8760 = t8746 + t8758;
  t8785 = t3111*t225*t1263;
  t8787 = t3111*t636*t2873;
  t8788 = t8785 + t8787;
  t8805 = t3111*t636*t225;
  t8806 = -1.*t3111*t1263*t2873;
  t8807 = t8805 + t8806;
  t8799 = -1.*t92*t1168;
  t8801 = t8788*t3118;
  t8802 = t8799 + t8801;
  t8804 = t3727*t8802;
  t8808 = t8807*t3818;
  t8810 = t8804 + t8808;
  t8815 = t3727*t8807;
  t8817 = -1.*t8802*t3818;
  t8818 = t8815 + t8817;
  t8830 = -1.*t225*t1168*t1263;
  t8831 = -1.*t636*t1168*t2873;
  t8833 = t8830 + t8831;
  t8848 = -1.*t636*t225*t1168;
  t8849 = t1168*t1263*t2873;
  t8850 = t8848 + t8849;
  t8843 = -1.*t3111*t92;
  t8845 = t8833*t3118;
  t8846 = t8843 + t8845;
  t8847 = t3727*t8846;
  t8853 = t8850*t3818;
  t8854 = t8847 + t8853;
  t8856 = t3727*t8850;
  t8857 = -1.*t8846*t3818;
  t8858 = t8856 + t8857;
  t8878 = -1.*t3170*t1263;
  t8879 = -1.*t636*t3199;
  t8881 = t8878 + t8879;
  t8882 = var2[4]*t8881;
  t8885 = t3179 + t3208;
  t8887 = var2[3]*t3111*t8885;
  t8888 = t8882 + t8887;
  t8892 = -1.*t1263*t4085;
  t8893 = -1.*t636*t4265;
  t8894 = t8892 + t8893;
  t8898 = var2[4]*t8894;
  t8899 = t4087 + t4302;
  t8900 = var2[3]*t3111*t8899;
  t8904 = t8898 + t8900;
  t8909 = -1.*t1263*t4745;
  t8911 = -1.*t636*t4939;
  t8912 = t8909 + t8911;
  t8914 = var2[4]*t8912;
  t8915 = t4765 + t4986;
  t8917 = var2[3]*t3111*t8915;
  t8919 = t8914 + t8917;
  t8958 = t636*t1025;
  t8959 = -1.*t551*t1168*t1263;
  t8960 = t8958 + t8959;
  t8961 = t8960*t2873;
  t8962 = t7812 + t8961;
  t8968 = t225*t8960;
  t8970 = -1.*t7743*t2873;
  t8971 = t8968 + t8970;
  t8965 = t3727*t8962*t3118;
  t8973 = t8971*t3818;
  t8976 = t8965 + t8973;
  t8987 = t3727*t8971;
  t8988 = -1.*t8962*t3118*t3818;
  t8989 = t8987 + t8988;
  t8644 = -1.*t92*t8643;
  t8645 = t3111*t1025*t3118;
  t8647 = t8644 + t8645;
  t8889 = 0.00334*t8888;
  t8908 = 3.e-6*t8904;
  t8926 = 1.e-6*t8919;
  t8927 = t8889 + t8908 + t8926;
  t8664 = t3738*t8663;
  t8676 = -1.*t3705*t8671;
  t8678 = t8664 + t8676;
  t8932 = 3.e-6*t8888;
  t8933 = 0.00216*t8904;
  t8935 = 0.000956*t8919;
  t8936 = t8932 + t8933 + t8935;
  t8681 = t3705*t8663;
  t8682 = t3738*t8671;
  t8686 = t8681 + t8682;
  t8939 = 1.e-6*t8888;
  t8940 = 0.000956*t8904;
  t8945 = 0.00144*t8919;
  t8956 = t8939 + t8940 + t8945;
  t9011 = t2423*t2873;
  t9015 = t8657 + t9011;
  t9029 = -1.*t8635*t2873;
  t9033 = t2510 + t9029;
  t9020 = t3727*t9015*t3118;
  t9038 = t9033*t3818;
  t9041 = t9020 + t9038;
  t9045 = t3727*t9033;
  t9047 = -1.*t9015*t3118*t3818;
  t9048 = t9045 + t9047;
  t8789 = -1.*t92*t8788;
  t8793 = -1.*t1168*t3118;
  t8797 = t8789 + t8793;
  t8811 = t3738*t8810;
  t8821 = -1.*t3705*t8818;
  t8822 = t8811 + t8821;
  t8825 = t3705*t8810;
  t8826 = t3738*t8818;
  t8827 = t8825 + t8826;
  t9085 = -1.*t3111*t225*t1263;
  t9090 = -1.*t3111*t636*t2873;
  t9093 = t9085 + t9090;
  t9083 = t3727*t8807*t3118;
  t9094 = t9093*t3818;
  t9095 = t9083 + t9094;
  t9099 = t3727*t9093;
  t9101 = -1.*t8807*t3118*t3818;
  t9102 = t9099 + t9101;
  t9148 = t4056 + t4081;
  t9152 = -1.*t225*t3831;
  t9157 = -1.*t2873*t4079;
  t9164 = t9152 + t9157;
  t9182 = t4680 + t4736;
  t9186 = -1.*t225*t3889;
  t9187 = -1.*t2873*t4712;
  t9189 = t9186 + t9187;
  t9124 = -1.*t225*t3144*t1263;
  t9125 = -1.*t636*t3144*t2873;
  t9129 = t9124 + t9125;
  t9130 = var2[4]*t9129;
  t9134 = t636*t225*t3144;
  t9136 = -1.*t3144*t1263*t2873;
  t9139 = t9134 + t9136;
  t9143 = var2[3]*t3111*t9139;
  t9145 = t9130 + t9143;
  t9151 = -1.*t1263*t9148;
  t9165 = t636*t9164;
  t9166 = t9151 + t9165;
  t9168 = var2[4]*t9166;
  t9171 = t636*t9148;
  t9175 = t1263*t9164;
  t9176 = t9171 + t9175;
  t9177 = var2[3]*t3111*t9176;
  t9179 = t9168 + t9177;
  t9183 = -1.*t1263*t9182;
  t9190 = t636*t9189;
  t9191 = t9183 + t9190;
  t9194 = var2[4]*t9191;
  t9197 = t636*t9182;
  t9202 = t1263*t9189;
  t9203 = t9197 + t9202;
  t9205 = var2[3]*t3111*t9203;
  t9208 = t9194 + t9205;
  t9232 = -1.*t225*t7595;
  t9239 = t9232 + t8970;
  t9230 = t3727*t7873*t3118;
  t9244 = t9239*t3818;
  t9252 = t9230 + t9244;
  t9256 = t3727*t9239;
  t9258 = -1.*t7873*t3118*t3818;
  t9259 = t9256 + t9258;
  t9146 = 0.00334*t9145;
  t9180 = 3.e-6*t9179;
  t9209 = 1.e-6*t9208;
  t9210 = t9146 + t9180 + t9209;
  t9214 = 3.e-6*t9145;
  t9215 = 0.00216*t9179;
  t9217 = 0.000956*t9208;
  t9218 = t9214 + t9215 + t9217;
  t9221 = 1.e-6*t9145;
  t9222 = 0.000956*t9179;
  t9223 = 0.00144*t9208;
  t9225 = t9221 + t9222 + t9223;
  t9294 = -1.*t225*t8626;
  t9296 = t9294 + t9029;
  t9293 = t3727*t8659*t3118;
  t9297 = t9296*t3818;
  t9299 = t9293 + t9297;
  t9302 = t3727*t9296;
  t9303 = -1.*t8659*t3118*t3818;
  t9304 = t9302 + t9303;
  t9082 = -1.*t92*t8807*t6163;
  t9096 = t3738*t9095;
  t9104 = -1.*t3705*t9102;
  t9105 = t9096 + t9104;
  t9108 = t9105*t7040;
  t9111 = t3705*t9095;
  t9114 = t3738*t9102;
  t9117 = t9111 + t9114;
  t9120 = t9117*t7402;
  t9328 = var2[5]*t92;
  t9330 = var2[6]*t92;
  t9332 = t636*t225*t3118;
  t9333 = -1.*t1263*t2873*t3118;
  t9336 = t9332 + t9333;
  t9338 = var2[4]*t9336;
  t9339 = t225*t1263*t3118;
  t9341 = t636*t2873*t3118;
  t9342 = t9339 + t9341;
  t9343 = t3111*t9342;
  t9345 = t8799 + t9343;
  t9346 = var2[3]*t9345;
  t9348 = t9328 + t9330 + t9338 + t9346;
  t9351 = -1.*var2[5]*t3118*t3889;
  t9352 = -1.*var2[6]*t3118*t3889;
  t9353 = t636*t225*t92*t3889;
  t9360 = -1.*t92*t1263*t2873*t3889;
  t9361 = t9353 + t9360;
  t9362 = var2[4]*t9361;
  t9364 = t1168*t3118*t3889;
  t9366 = t225*t92*t1263*t3889;
  t9368 = t636*t92*t2873*t3889;
  t9371 = t9366 + t9368;
  t9372 = t3111*t9371;
  t9374 = t9364 + t9372;
  t9375 = var2[3]*t9374;
  t9376 = t9351 + t9352 + t9362 + t9375;
  t9381 = -1.*var2[5]*t3118*t4625;
  t9382 = -1.*var2[6]*t3118*t4625;
  t9385 = t636*t225*t92*t4625;
  t9386 = -1.*t92*t1263*t2873*t4625;
  t9387 = t9385 + t9386;
  t9388 = var2[4]*t9387;
  t9389 = t1168*t3118*t4625;
  t9390 = t225*t92*t1263*t4625;
  t9392 = t636*t92*t2873*t4625;
  t9395 = t9390 + t9392;
  t9396 = t3111*t9395;
  t9399 = t9389 + t9396;
  t9400 = var2[3]*t9399;
  t9404 = t9381 + t9382 + t9388 + t9400;
  t9439 = t92*t7754;
  t9446 = -1.*t551*t3111*t3118;
  t9458 = t9439 + t9446;
  t9350 = 0.00334*t9348;
  t9377 = 3.e-6*t9376;
  t9405 = 1.e-6*t9404;
  t9406 = t9350 + t9377 + t9405;
  t9412 = 3.e-6*t9348;
  t9413 = 0.00216*t9376;
  t9414 = 0.000956*t9404;
  t9415 = t9412 + t9413 + t9414;
  t9423 = 1.e-6*t9348;
  t9424 = 0.000956*t9376;
  t9432 = 0.00144*t9404;
  t9434 = t9423 + t9424 + t9432;
  t3124 = -1.*t3111*t1025*t3118;
  t9481 = t92*t8643;
  t9483 = t9481 + t3124;
  t9532 = t92*t8788;
  t9536 = t1168*t3118;
  t9543 = t9532 + t9536;
  t9565 = -1.*t3727*t3738;
  t9569 = -1.*t3705*t3818;
  t9571 = t9565 + t9569;
  t9577 = t4618 + t4621;
  t9580 = t2873*t3118*t9571;
  t9581 = t225*t9577;
  t9587 = t9580 + t9581;
  t9591 = t225*t3118*t9571;
  t9592 = -1.*t2873*t9577;
  t9594 = t9591 + t9592;
  t9623 = t3858 + t3861;
  t9631 = -1.*t2873*t9623;
  t9632 = t225*t3118*t9577;
  t9633 = t9631 + t9632;
  t9635 = t225*t9623;
  t9636 = t2873*t3118*t9577;
  t9639 = t9635 + t9636;
  t9574 = var2[5]*t92*t9571;
  t9575 = var2[6]*t92*t9571;
  t9579 = var2[7]*t9577;
  t9590 = -1.*t1263*t9587;
  t9599 = t636*t9594;
  t9600 = t9590 + t9599;
  t9602 = var2[4]*t9600;
  t9603 = -1.*t92*t1168*t9571;
  t9604 = t636*t9587;
  t9606 = t1263*t9594;
  t9608 = t9604 + t9606;
  t9610 = t3111*t9608;
  t9612 = t9603 + t9610;
  t9618 = var2[3]*t9612;
  t9620 = t9574 + t9575 + t9579 + t9602 + t9618;
  t9624 = var2[7]*t9623;
  t9626 = var2[5]*t92*t9577;
  t9630 = var2[6]*t92*t9577;
  t9634 = t636*t9633;
  t9640 = -1.*t1263*t9639;
  t9641 = t9634 + t9640;
  t9642 = var2[4]*t9641;
  t9644 = -1.*t92*t1168*t9577;
  t9646 = t1263*t9633;
  t9647 = t636*t9639;
  t9648 = t9646 + t9647;
  t9649 = t3111*t9648;
  t9652 = t9644 + t9649;
  t9653 = var2[3]*t9652;
  t9654 = t9624 + t9626 + t9630 + t9642 + t9653;
  t9681 = -1.*t3727*t7798;
  t9682 = -1.*t7873*t3818;
  t9684 = t9681 + t9682;
  t9621 = 1.e-6*t9620;
  t9655 = 3.e-6*t9654;
  t9656 = t9621 + t9655;
  t9665 = 0.00144*t9620;
  t9667 = 0.000956*t9654;
  t9668 = t9665 + t9667;
  t9674 = 0.000956*t9620;
  t9677 = 0.00216*t9654;
  t9678 = t9674 + t9677;
  t9707 = -1.*t3727*t8653;
  t9709 = -1.*t8659*t3818;
  t9711 = t9707 + t9709;
  t9742 = -1.*t3727*t8802;
  t9743 = -1.*t8807*t3818;
  t9745 = t9742 + t9743;
  t9663 = t7765*t9656;
  t9672 = t8042*t9668;
  t9679 = t7931*t9678;
  t9694 = t3705*t7910;
  t9699 = t8647*t9656;
  t9704 = t8686*t9668;
  t9706 = t8678*t9678;
  t9723 = t3705*t8671;
  t9729 = t8797*t9656;
  t9739 = t8827*t9668;
  t9740 = t8822*t9678;
  t9757 = t3705*t8818;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(t3738*t6466 - 1.*t3705*t6731)*t7040 + (t3705*t6466 + t3738*t6731)*t7402 + t6163*(t3124 - 1.*t3059*t92);
  p_output1[10]=t6163*t7765 + t7040*t7931 + t7402*t8042;
  p_output1[11]=0;
  p_output1[12]=t7765*t8208 + t7931*t8279 + t8042*t8323 + t7040*(t3738*t8556 - 1.*t3705*t8582) + t7402*(t3705*t8556 + t3738*t8582) + t6163*(-1.*t1168*t3118*t551 - 1.*t8388*t92);
  p_output1[13]=t8208*t8647 + t8279*t8678 + t8323*t8686 + t7040*(t3738*t8736 - 1.*t3705*t8760) + t7402*(t3705*t8736 + t3738*t8760) + t6163*(-1.*t1025*t1168*t3118 - 1.*t8697*t92);
  p_output1[14]=t8208*t8797 + t8279*t8822 + t8323*t8827 + t7040*(t3738*t8854 - 1.*t3705*t8858) + t7402*(t3705*t8854 + t3738*t8858) + t6163*(-1.*t3111*t3118 - 1.*t8833*t92);
  p_output1[15]=t7765*t8927 + t7931*t8936 + t8042*t8956 + t7040*(t3738*t8976 - 1.*t3705*t8989) + t7402*(t3705*t8976 + t3738*t8989) - 1.*t6163*t8962*t92;
  p_output1[16]=t8647*t8927 + t8678*t8936 + t8686*t8956 + t7040*(t3738*t9041 - 1.*t3705*t9048) + t7402*(t3705*t9041 + t3738*t9048) - 1.*t6163*t9015*t92;
  p_output1[17]=t8797*t8927 + t8822*t8936 + t8827*t8956 + t9082 + t9108 + t9120;
  p_output1[18]=-1.*t6163*t7873*t92 + t7765*t9210 + t7931*t9218 + t8042*t9225 + t7040*(t3738*t9252 - 1.*t3705*t9259) + t7402*(t3705*t9252 + t3738*t9259);
  p_output1[19]=-1.*t6163*t8659*t92 + t8647*t9210 + t8678*t9218 + t8686*t9225 + t7040*(t3738*t9299 - 1.*t3705*t9304) + t7402*(t3705*t9299 + t3738*t9304);
  p_output1[20]=t9082 + t9108 + t9120 + t8797*t9210 + t8822*t9218 + t8827*t9225;
  p_output1[21]=t6163*t7798 + t7765*t9406 + t7931*t9415 + t8042*t9434 + t7040*(t3727*t3738*t9458 + t3705*t3818*t9458) + t7402*(t3705*t3727*t9458 - 1.*t3738*t3818*t9458);
  p_output1[22]=t6163*t8653 + t8647*t9406 + t8678*t9415 + t8686*t9434 + t7040*(t3727*t3738*t9483 + t3705*t3818*t9483) + t7402*(t3705*t3727*t9483 - 1.*t3738*t3818*t9483);
  p_output1[23]=t6163*t8802 + t8797*t9406 + t8822*t9415 + t8827*t9434 + t7040*(t3727*t3738*t9543 + t3705*t3818*t9543) + t7402*(t3705*t3727*t9543 - 1.*t3738*t3818*t9543);
  p_output1[24]=t9663 + t9672 + t9679 + t7040*(t8021 - 1.*t3705*t9684) + t7402*(t3738*t9684 + t9694);
  p_output1[25]=t9699 + t9704 + t9706 + t7040*(t8682 - 1.*t3705*t9711) + t7402*(t3738*t9711 + t9723);
  p_output1[26]=t9729 + t9739 + t9740 + t7040*(t8826 - 1.*t3705*t9745) + t7402*(t3738*t9745 + t9757);
  p_output1[27]=t7040*t8042 + t9663 + t9672 + t9679 + t7402*(-1.*t3738*t7894 + t9694);
  p_output1[28]=t7040*t8686 + t9699 + t9704 + t9706 + t7402*(-1.*t3738*t8663 + t9723);
  p_output1[29]=t7040*t8827 + t9729 + t9739 + t9740 + t7402*(-1.*t3738*t8810 + t9757);
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Jq_AMWorld_LeftKnee_mex.hh"

namespace SymExpression
{

void Jq_AMWorld_LeftKnee_mex_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
