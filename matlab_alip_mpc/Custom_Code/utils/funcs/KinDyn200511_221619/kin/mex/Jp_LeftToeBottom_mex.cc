/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:31:25 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t973;
  double t508;
  double t544;
  double t581;
  double t991;
  double t1181;
  double t1257;
  double t1318;
  double t1445;
  double t1511;
  double t1532;
  double t1607;
  double t927;
  double t1068;
  double t1086;
  double t2190;
  double t2421;
  double t2506;
  double t2547;
  double t2115;
  double t2163;
  double t2179;
  double t2844;
  double t3223;
  double t3431;
  double t3518;
  double t3534;
  double t3150;
  double t3190;
  double t3211;
  double t3662;
  double t3706;
  double t3707;
  double t4065;
  double t4125;
  double t4202;
  double t4465;
  double t4611;
  double t4620;
  double t4653;
  double t4786;
  double t4824;
  double t4837;
  double t4896;
  double t5159;
  double t5346;
  double t5388;
  double t5533;
  double t5539;
  double t5558;
  double t5705;
  double t5795;
  double t5801;
  double t5832;
  double t5860;
  double t5900;
  double t6029;
  double t6139;
  double t6141;
  double t6229;
  double t6378;
  double t6423;
  double t6553;
  double t6747;
  double t6754;
  double t6760;
  double t6825;
  double t6871;
  double t6884;
  double t6903;
  double t6948;
  double t6956;
  double t6961;
  double t1351;
  double t1455;
  double t1458;
  double t1909;
  double t1954;
  double t1982;
  double t7267;
  double t7271;
  double t7331;
  double t7197;
  double t7202;
  double t7219;
  double t2513;
  double t2572;
  double t2736;
  double t2890;
  double t2941;
  double t2986;
  double t7341;
  double t7348;
  double t7370;
  double t3527;
  double t3542;
  double t3562;
  double t3709;
  double t3844;
  double t3990;
  double t4396;
  double t4501;
  double t4593;
  double t7605;
  double t7644;
  double t7719;
  double t7731;
  double t7740;
  double t7774;
  double t4711;
  double t4713;
  double t4748;
  double t5382;
  double t5407;
  double t5524;
  double t7817;
  double t7838;
  double t7869;
  double t7908;
  double t7936;
  double t7940;
  double t5640;
  double t5652;
  double t5672;
  double t5974;
  double t6134;
  double t6138;
  double t7977;
  double t7987;
  double t7994;
  double t8041;
  double t8057;
  double t8079;
  double t6329;
  double t6354;
  double t6368;
  double t6806;
  double t6841;
  double t6843;
  double t8138;
  double t8149;
  double t8158;
  double t8168;
  double t8183;
  double t8211;
  double t6916;
  double t6925;
  double t6946;
  double t8230;
  double t8262;
  double t8271;
  double t8339;
  double t8345;
  double t8368;
  double t8595;
  double t8599;
  double t8604;
  double t8728;
  double t8744;
  double t8765;
  double t8857;
  double t8910;
  double t8929;
  double t8949;
  double t8974;
  double t8978;
  double t8997;
  double t9009;
  double t9010;
  double t9039;
  double t9080;
  double t9083;
  double t9187;
  double t9213;
  double t9215;
  double t9225;
  double t9235;
  double t9238;
  double t9266;
  double t9286;
  double t9287;
  double t9309;
  double t9351;
  double t9396;
  double t9483;
  double t9499;
  double t9505;
  double t9765;
  double t9769;
  double t9780;
  double t9838;
  double t9848;
  double t9851;
  double t9867;
  double t9868;
  double t9873;
  double t9892;
  double t9896;
  double t9898;
  double t9901;
  double t9905;
  double t9909;
  double t9917;
  double t9921;
  double t9927;
  double t9932;
  double t9933;
  double t9936;
  double t9946;
  double t9948;
  double t9949;
  double t9952;
  double t9956;
  double t9961;
  double t9966;
  double t9970;
  double t9972;
  double t9978;
  double t9980;
  double t9986;
  double t10023;
  double t10025;
  double t10026;
  double t10040;
  double t10043;
  double t10048;
  double t10061;
  double t10062;
  double t10064;
  double t10072;
  double t10074;
  double t10084;
  double t10091;
  double t10095;
  double t10097;
  double t10112;
  double t10115;
  double t10121;
  double t10127;
  double t10129;
  double t10130;
  double t10134;
  double t10136;
  double t10139;
  double t10142;
  double t10154;
  double t10155;
  double t10164;
  double t10166;
  double t10167;
  double t10174;
  double t10177;
  double t10180;
  double t10211;
  double t10215;
  double t10218;
  double t10226;
  double t10228;
  double t10239;
  double t10241;
  double t10242;
  double t10245;
  double t10250;
  double t10254;
  double t10261;
  double t10266;
  double t10268;
  double t10273;
  double t10278;
  double t10281;
  double t10286;
  double t10290;
  double t10291;
  double t10296;
  double t10300;
  double t10306;
  double t10311;
  double t10312;
  double t10313;
  double t10323;
  double t10326;
  double t10328;
  double t10333;
  double t10334;
  double t10335;
  double t10368;
  double t10372;
  double t10373;
  double t10379;
  double t10381;
  double t10382;
  double t10390;
  double t10391;
  double t10393;
  double t10396;
  double t10399;
  double t10403;
  double t10406;
  double t10409;
  double t10413;
  double t10415;
  double t10418;
  double t10422;
  double t10425;
  double t10427;
  double t10433;
  double t10436;
  double t10438;
  double t10444;
  double t10445;
  double t10446;
  double t10456;
  double t10458;
  double t10460;
  double t10470;
  double t10471;
  double t10473;
  double t10496;
  double t10498;
  double t10499;
  double t10503;
  double t10504;
  double t10507;
  double t10509;
  double t10516;
  double t10518;
  double t10521;
  double t10522;
  double t10523;
  double t10525;
  double t10534;
  double t10535;
  double t10542;
  double t10549;
  double t10551;
  double t10555;
  double t10563;
  double t10564;
  double t10569;
  double t10572;
  double t10574;
  double t10583;
  double t10584;
  double t10587;
  double t10601;
  double t10604;
  double t10605;
  double t10658;
  double t10659;
  double t10661;
  double t10668;
  double t10678;
  double t10682;
  double t10686;
  double t10698;
  double t10701;
  double t10703;
  double t10705;
  double t10715;
  double t10717;
  double t10719;
  double t10723;
  double t10724;
  double t10728;
  double t10733;
  double t10734;
  double t10735;
  double t10738;
  double t10739;
  double t10740;
  double t10745;
  double t10746;
  double t10750;
  double t10634;
  double t10637;
  double t10641;
  double t10644;
  double t10645;
  double t10787;
  double t10788;
  double t10789;
  double t10792;
  double t10794;
  double t10811;
  double t10813;
  double t10820;
  double t10822;
  double t10823;
  double t10837;
  double t10839;
  double t10846;
  double t10849;
  double t10850;
  double t10851;
  double t10855;
  double t10856;
  double t10864;
  double t10872;
  double t10877;
  double t10881;
  double t10884;
  double t10885;
  double t10887;
  double t10895;
  double t10898;
  double t10901;
  double t10906;
  double t10909;
  double t10912;
  double t10500;
  double t10501;
  double t10502;
  double t10508;
  double t10519;
  double t10524;
  double t10536;
  double t10553;
  double t10565;
  double t10575;
  double t10599;
  double t10606;
  double t10609;
  double t10611;
  double t10614;
  double t10617;
  double t10619;
  double t10620;
  double t10621;
  double t10628;
  double t7430;
  double t7431;
  double t7451;
  double t10985;
  double t10986;
  double t10987;
  double t10991;
  double t10995;
  double t11003;
  double t11006;
  double t11007;
  double t11008;
  double t11016;
  double t11017;
  double t11025;
  double t11029;
  double t11030;
  double t11031;
  double t11034;
  double t11035;
  double t11041;
  double t10960;
  double t10961;
  double t10962;
  double t10964;
  double t10970;
  double t11072;
  double t11074;
  double t11076;
  double t11086;
  double t11091;
  double t11096;
  double t11107;
  double t11108;
  double t11111;
  double t11128;
  double t11130;
  double t11131;
  double t11135;
  double t11139;
  double t11141;
  double t11147;
  double t11148;
  double t11150;
  double t11155;
  double t11158;
  double t11164;
  double t11170;
  double t11172;
  double t11173;
  double t11203;
  double t11205;
  double t11208;
  double t11213;
  double t11215;
  double t11218;
  double t11238;
  double t11242;
  double t11243;
  double t11252;
  double t11254;
  double t11255;
  double t11257;
  double t11258;
  double t11263;
  double t11268;
  double t11274;
  double t11275;
  double t11279;
  double t11283;
  double t11284;
  double t11287;
  double t11288;
  double t11289;
  double t11328;
  double t11329;
  double t11330;
  double t11333;
  double t11337;
  double t11339;
  double t11344;
  double t11348;
  double t11352;
  double t11354;
  double t11357;
  double t11361;
  double t11368;
  double t11369;
  double t11373;
  double t11375;
  double t11376;
  double t11379;
  double t11380;
  double t11385;
  double t11312;
  double t11313;
  double t11316;
  double t11320;
  double t11325;
  double t11410;
  double t11413;
  double t11414;
  double t11423;
  double t11424;
  double t11428;
  double t11433;
  double t11434;
  double t11435;
  double t11438;
  double t11439;
  double t11440;
  double t11443;
  double t11445;
  double t11447;
  double t11451;
  double t11452;
  double t11453;
  double t11455;
  double t11456;
  double t11457;
  double t11463;
  double t11464;
  double t11465;
  double t11467;
  double t11469;
  double t11471;
  double t11489;
  double t11490;
  double t11491;
  double t11496;
  double t11497;
  double t11498;
  double t11500;
  double t11501;
  double t11502;
  double t11504;
  double t11505;
  double t11506;
  double t11509;
  double t11510;
  double t11512;
  double t11516;
  double t11517;
  double t11519;
  double t11521;
  double t11522;
  double t11523;
  double t11525;
  double t11527;
  double t11528;
  double t11531;
  double t11533;
  double t11534;
  double t11563;
  double t11565;
  double t11567;
  double t11568;
  double t11570;
  double t11573;
  double t11574;
  double t11576;
  double t11579;
  double t11580;
  double t11583;
  double t11584;
  double t11585;
  double t11551;
  double t11552;
  double t11553;
  double t11555;
  double t11557;
  double t11604;
  double t11607;
  double t11609;
  double t11613;
  double t11614;
  double t11618;
  double t11621;
  double t11625;
  double t11626;
  double t11630;
  double t11632;
  double t11633;
  double t11634;
  double t11638;
  double t11639;
  double t11641;
  double t11643;
  double t11644;
  double t11645;
  double t11662;
  double t11663;
  double t11665;
  double t11671;
  double t11675;
  double t11677;
  double t11679;
  double t11681;
  double t11684;
  double t11685;
  double t11687;
  double t11689;
  double t11690;
  double t11692;
  double t11694;
  double t11696;
  double t11698;
  double t11699;
  double t11700;
  double t11721;
  double t11722;
  double t11726;
  double t11727;
  double t11729;
  double t11730;
  double t11731;
  double t11714;
  double t11715;
  double t11717;
  double t11718;
  double t11719;
  double t11744;
  double t11745;
  double t11746;
  double t11749;
  double t11750;
  double t11752;
  double t11753;
  double t11755;
  double t11756;
  double t11757;
  double t11759;
  double t11760;
  double t11761;
  double t11773;
  double t11774;
  double t11775;
  double t11777;
  double t11778;
  double t11780;
  double t11781;
  double t11783;
  double t11784;
  double t11785;
  double t11787;
  double t11788;
  double t11789;
  double t11808;
  double t11809;
  double t8455;
  double t11800;
  double t11801;
  double t11802;
  double t11804;
  double t11805;
  double t11819;
  double t11820;
  double t11821;
  double t11824;
  double t11825;
  double t11827;
  double t11828;
  double t11841;
  double t11842;
  double t11843;
  double t11847;
  double t11848;
  double t11850;
  double t11851;
  double t11811;
  double t8459;
  double t8468;
  double t11862;
  double t11863;
  double t11865;
  double t11866;
  double t11867;
  double t11830;
  double t11875;
  double t11876;
  double t11877;
  double t11836;
  double t11853;
  double t11887;
  double t11888;
  double t11889;
  double t11857;
  t973 = Cos(var1[3]);
  t508 = Cos(var1[5]);
  t544 = Sin(var1[3]);
  t581 = Sin(var1[4]);
  t991 = Sin(var1[5]);
  t1181 = Cos(var1[6]);
  t1257 = -1.*t1181;
  t1318 = 1. + t1257;
  t1445 = Sin(var1[6]);
  t1511 = -1.*t973*t508;
  t1532 = -1.*t544*t581*t991;
  t1607 = t1511 + t1532;
  t927 = -1.*t508*t544*t581;
  t1068 = t973*t991;
  t1086 = t927 + t1068;
  t2190 = Cos(var1[7]);
  t2421 = -1.*t2190;
  t2506 = 1. + t2421;
  t2547 = Sin(var1[7]);
  t2115 = t1181*t1607;
  t2163 = t1086*t1445;
  t2179 = t2115 + t2163;
  t2844 = Cos(var1[4]);
  t3223 = Cos(var1[8]);
  t3431 = -1.*t3223;
  t3518 = 1. + t3431;
  t3534 = Sin(var1[8]);
  t3150 = -1.*t2844*t2190*t544;
  t3190 = t2179*t2547;
  t3211 = t3150 + t3190;
  t3662 = t1181*t1086;
  t3706 = -1.*t1607*t1445;
  t3707 = t3662 + t3706;
  t4065 = Cos(var1[9]);
  t4125 = -1.*t4065;
  t4202 = 1. + t4125;
  t4465 = Sin(var1[9]);
  t4611 = t3223*t3211;
  t4620 = t3707*t3534;
  t4653 = t4611 + t4620;
  t4786 = t3223*t3707;
  t4824 = -1.*t3211*t3534;
  t4837 = t4786 + t4824;
  t4896 = Cos(var1[10]);
  t5159 = -1.*t4896;
  t5346 = 1. + t5159;
  t5388 = Sin(var1[10]);
  t5533 = -1.*t4465*t4653;
  t5539 = t4065*t4837;
  t5558 = t5533 + t5539;
  t5705 = t4065*t4653;
  t5795 = t4465*t4837;
  t5801 = t5705 + t5795;
  t5832 = Cos(var1[11]);
  t5860 = -1.*t5832;
  t5900 = 1. + t5860;
  t6029 = Sin(var1[11]);
  t6139 = t5388*t5558;
  t6141 = t4896*t5801;
  t6229 = t6139 + t6141;
  t6378 = t4896*t5558;
  t6423 = -1.*t5388*t5801;
  t6553 = t6378 + t6423;
  t6747 = Cos(var1[12]);
  t6754 = -1.*t6747;
  t6760 = 1. + t6754;
  t6825 = Sin(var1[12]);
  t6871 = -1.*t6029*t6229;
  t6884 = t5832*t6553;
  t6903 = t6871 + t6884;
  t6948 = t5832*t6229;
  t6956 = t6029*t6553;
  t6961 = t6948 + t6956;
  t1351 = 0.07996*t1318;
  t1455 = -0.135*t1445;
  t1458 = 0. + t1351 + t1455;
  t1909 = 0.135*t1318;
  t1954 = 0.07996*t1445;
  t1982 = 0. + t1909 + t1954;
  t7267 = -1.*t508*t544;
  t7271 = t973*t581*t991;
  t7331 = t7267 + t7271;
  t7197 = t973*t508*t581;
  t7202 = t544*t991;
  t7219 = t7197 + t7202;
  t2513 = 0.135*t2506;
  t2572 = 0.08055*t2547;
  t2736 = 0. + t2513 + t2572;
  t2890 = -0.08055*t2506;
  t2941 = 0.135*t2547;
  t2986 = 0. + t2890 + t2941;
  t7341 = t1181*t7331;
  t7348 = t7219*t1445;
  t7370 = t7341 + t7348;
  t3527 = -0.08055*t3518;
  t3542 = -0.01004*t3534;
  t3562 = 0. + t3527 + t3542;
  t3709 = -0.01004*t3518;
  t3844 = 0.08055*t3534;
  t3990 = 0. + t3709 + t3844;
  t4396 = -0.08055*t4202;
  t4501 = -0.13004*t4465;
  t4593 = 0. + t4396 + t4501;
  t7605 = t973*t2844*t2190;
  t7644 = t7370*t2547;
  t7719 = t7605 + t7644;
  t7731 = t1181*t7219;
  t7740 = -1.*t7331*t1445;
  t7774 = t7731 + t7740;
  t4711 = -0.13004*t4202;
  t4713 = 0.08055*t4465;
  t4748 = 0. + t4711 + t4713;
  t5382 = -0.19074*t5346;
  t5407 = 0.03315*t5388;
  t5524 = 0. + t5382 + t5407;
  t7817 = t3223*t7719;
  t7838 = t7774*t3534;
  t7869 = t7817 + t7838;
  t7908 = t3223*t7774;
  t7936 = -1.*t7719*t3534;
  t7940 = t7908 + t7936;
  t5640 = -0.03315*t5346;
  t5652 = -0.19074*t5388;
  t5672 = 0. + t5640 + t5652;
  t5974 = -0.01315*t5900;
  t6134 = -0.62554*t6029;
  t6138 = 0. + t5974 + t6134;
  t7977 = -1.*t4465*t7869;
  t7987 = t4065*t7940;
  t7994 = t7977 + t7987;
  t8041 = t4065*t7869;
  t8057 = t4465*t7940;
  t8079 = t8041 + t8057;
  t6329 = -0.62554*t5900;
  t6354 = 0.01315*t6029;
  t6368 = 0. + t6329 + t6354;
  t6806 = -1.03354*t6760;
  t6841 = 0.05315*t6825;
  t6843 = 0. + t6806 + t6841;
  t8138 = t5388*t7994;
  t8149 = t4896*t8079;
  t8158 = t8138 + t8149;
  t8168 = t4896*t7994;
  t8183 = -1.*t5388*t8079;
  t8211 = t8168 + t8183;
  t6916 = -0.05315*t6760;
  t6925 = -1.03354*t6825;
  t6946 = 0. + t6916 + t6925;
  t8230 = -1.*t6029*t8158;
  t8262 = t5832*t8211;
  t8271 = t8230 + t8262;
  t8339 = t5832*t8158;
  t8345 = t6029*t8211;
  t8368 = t8339 + t8345;
  t8595 = t973*t2844*t1181*t991;
  t8599 = t973*t2844*t508*t1445;
  t8604 = t8595 + t8599;
  t8728 = -1.*t973*t2190*t581;
  t8744 = t8604*t2547;
  t8765 = t8728 + t8744;
  t8857 = t973*t2844*t508*t1181;
  t8910 = -1.*t973*t2844*t991*t1445;
  t8929 = t8857 + t8910;
  t8949 = t3223*t8765;
  t8974 = t8929*t3534;
  t8978 = t8949 + t8974;
  t8997 = t3223*t8929;
  t9009 = -1.*t8765*t3534;
  t9010 = t8997 + t9009;
  t9039 = -1.*t4465*t8978;
  t9080 = t4065*t9010;
  t9083 = t9039 + t9080;
  t9187 = t4065*t8978;
  t9213 = t4465*t9010;
  t9215 = t9187 + t9213;
  t9225 = t5388*t9083;
  t9235 = t4896*t9215;
  t9238 = t9225 + t9235;
  t9266 = t4896*t9083;
  t9286 = -1.*t5388*t9215;
  t9287 = t9266 + t9286;
  t9309 = -1.*t6029*t9238;
  t9351 = t5832*t9287;
  t9396 = t9309 + t9351;
  t9483 = t5832*t9238;
  t9499 = t6029*t9287;
  t9505 = t9483 + t9499;
  t9765 = t2844*t1181*t544*t991;
  t9769 = t2844*t508*t544*t1445;
  t9780 = t9765 + t9769;
  t9838 = -1.*t2190*t544*t581;
  t9848 = t9780*t2547;
  t9851 = t9838 + t9848;
  t9867 = t2844*t508*t1181*t544;
  t9868 = -1.*t2844*t544*t991*t1445;
  t9873 = t9867 + t9868;
  t9892 = t3223*t9851;
  t9896 = t9873*t3534;
  t9898 = t9892 + t9896;
  t9901 = t3223*t9873;
  t9905 = -1.*t9851*t3534;
  t9909 = t9901 + t9905;
  t9917 = -1.*t4465*t9898;
  t9921 = t4065*t9909;
  t9927 = t9917 + t9921;
  t9932 = t4065*t9898;
  t9933 = t4465*t9909;
  t9936 = t9932 + t9933;
  t9946 = t5388*t9927;
  t9948 = t4896*t9936;
  t9949 = t9946 + t9948;
  t9952 = t4896*t9927;
  t9956 = -1.*t5388*t9936;
  t9961 = t9952 + t9956;
  t9966 = -1.*t6029*t9949;
  t9970 = t5832*t9961;
  t9972 = t9966 + t9970;
  t9978 = t5832*t9949;
  t9980 = t6029*t9961;
  t9986 = t9978 + t9980;
  t10023 = -1.*t1181*t581*t991;
  t10025 = -1.*t508*t581*t1445;
  t10026 = t10023 + t10025;
  t10040 = -1.*t2844*t2190;
  t10043 = t10026*t2547;
  t10048 = t10040 + t10043;
  t10061 = -1.*t508*t1181*t581;
  t10062 = t581*t991*t1445;
  t10064 = t10061 + t10062;
  t10072 = t3223*t10048;
  t10074 = t10064*t3534;
  t10084 = t10072 + t10074;
  t10091 = t3223*t10064;
  t10095 = -1.*t10048*t3534;
  t10097 = t10091 + t10095;
  t10112 = -1.*t4465*t10084;
  t10115 = t4065*t10097;
  t10121 = t10112 + t10115;
  t10127 = t4065*t10084;
  t10129 = t4465*t10097;
  t10130 = t10127 + t10129;
  t10134 = t5388*t10121;
  t10136 = t4896*t10130;
  t10139 = t10134 + t10136;
  t10142 = t4896*t10121;
  t10154 = -1.*t5388*t10130;
  t10155 = t10142 + t10154;
  t10164 = -1.*t6029*t10139;
  t10166 = t5832*t10155;
  t10167 = t10164 + t10166;
  t10174 = t5832*t10139;
  t10177 = t6029*t10155;
  t10180 = t10174 + t10177;
  t10211 = t508*t544;
  t10215 = -1.*t973*t581*t991;
  t10218 = t10211 + t10215;
  t10226 = t10218*t1445;
  t10228 = t7731 + t10226;
  t10239 = t1181*t10218;
  t10241 = -1.*t7219*t1445;
  t10242 = t10239 + t10241;
  t10245 = t3223*t10228*t2547;
  t10250 = t10242*t3534;
  t10254 = t10245 + t10250;
  t10261 = t3223*t10242;
  t10266 = -1.*t10228*t2547*t3534;
  t10268 = t10261 + t10266;
  t10273 = -1.*t4465*t10254;
  t10278 = t4065*t10268;
  t10281 = t10273 + t10278;
  t10286 = t4065*t10254;
  t10290 = t4465*t10268;
  t10291 = t10286 + t10290;
  t10296 = t5388*t10281;
  t10300 = t4896*t10291;
  t10306 = t10296 + t10300;
  t10311 = t4896*t10281;
  t10312 = -1.*t5388*t10291;
  t10313 = t10311 + t10312;
  t10323 = -1.*t6029*t10306;
  t10326 = t5832*t10313;
  t10328 = t10323 + t10326;
  t10333 = t5832*t10306;
  t10334 = t6029*t10313;
  t10335 = t10333 + t10334;
  t10368 = t508*t544*t581;
  t10372 = -1.*t973*t991;
  t10373 = t10368 + t10372;
  t10379 = t1181*t10373;
  t10381 = t1607*t1445;
  t10382 = t10379 + t10381;
  t10390 = -1.*t10373*t1445;
  t10391 = t2115 + t10390;
  t10393 = t3223*t10382*t2547;
  t10396 = t10391*t3534;
  t10399 = t10393 + t10396;
  t10403 = t3223*t10391;
  t10406 = -1.*t10382*t2547*t3534;
  t10409 = t10403 + t10406;
  t10413 = -1.*t4465*t10399;
  t10415 = t4065*t10409;
  t10418 = t10413 + t10415;
  t10422 = t4065*t10399;
  t10425 = t4465*t10409;
  t10427 = t10422 + t10425;
  t10433 = t5388*t10418;
  t10436 = t4896*t10427;
  t10438 = t10433 + t10436;
  t10444 = t4896*t10418;
  t10445 = -1.*t5388*t10427;
  t10446 = t10444 + t10445;
  t10456 = -1.*t6029*t10438;
  t10458 = t5832*t10446;
  t10460 = t10456 + t10458;
  t10470 = t5832*t10438;
  t10471 = t6029*t10446;
  t10473 = t10470 + t10471;
  t10496 = t2844*t508*t1181;
  t10498 = -1.*t2844*t991*t1445;
  t10499 = t10496 + t10498;
  t10503 = -1.*t2844*t1181*t991;
  t10504 = -1.*t2844*t508*t1445;
  t10507 = t10503 + t10504;
  t10509 = t3223*t10499*t2547;
  t10516 = t10507*t3534;
  t10518 = t10509 + t10516;
  t10521 = t3223*t10507;
  t10522 = -1.*t10499*t2547*t3534;
  t10523 = t10521 + t10522;
  t10525 = -1.*t4465*t10518;
  t10534 = t4065*t10523;
  t10535 = t10525 + t10534;
  t10542 = t4065*t10518;
  t10549 = t4465*t10523;
  t10551 = t10542 + t10549;
  t10555 = t5388*t10535;
  t10563 = t4896*t10551;
  t10564 = t10555 + t10563;
  t10569 = t4896*t10535;
  t10572 = -1.*t5388*t10551;
  t10574 = t10569 + t10572;
  t10583 = -1.*t6029*t10564;
  t10584 = t5832*t10574;
  t10587 = t10583 + t10584;
  t10601 = t5832*t10564;
  t10604 = t6029*t10574;
  t10605 = t10601 + t10604;
  t10658 = -1.*t1181*t7331;
  t10659 = t10658 + t10241;
  t10661 = t3223*t7774*t2547;
  t10668 = t10659*t3534;
  t10678 = t10661 + t10668;
  t10682 = t3223*t10659;
  t10686 = -1.*t7774*t2547*t3534;
  t10698 = t10682 + t10686;
  t10701 = -1.*t4465*t10678;
  t10703 = t4065*t10698;
  t10705 = t10701 + t10703;
  t10715 = t4065*t10678;
  t10717 = t4465*t10698;
  t10719 = t10715 + t10717;
  t10723 = t5388*t10705;
  t10724 = t4896*t10719;
  t10728 = t10723 + t10724;
  t10733 = t4896*t10705;
  t10734 = -1.*t5388*t10719;
  t10735 = t10733 + t10734;
  t10738 = -1.*t6029*t10728;
  t10739 = t5832*t10735;
  t10740 = t10738 + t10739;
  t10745 = t5832*t10728;
  t10746 = t6029*t10735;
  t10750 = t10745 + t10746;
  t10634 = -0.135*t1181;
  t10637 = t10634 + t1954;
  t10641 = 0.07996*t1181;
  t10644 = 0.135*t1445;
  t10645 = t10641 + t10644;
  t10787 = t973*t508;
  t10788 = t544*t581*t991;
  t10789 = t10787 + t10788;
  t10792 = -1.*t10789*t1445;
  t10794 = t10379 + t10792;
  t10811 = -1.*t1181*t10789;
  t10813 = t10811 + t10390;
  t10820 = t3223*t10794*t2547;
  t10822 = t10813*t3534;
  t10823 = t10820 + t10822;
  t10837 = t3223*t10813;
  t10839 = -1.*t10794*t2547*t3534;
  t10846 = t10837 + t10839;
  t10849 = -1.*t4465*t10823;
  t10850 = t4065*t10846;
  t10851 = t10849 + t10850;
  t10855 = t4065*t10823;
  t10856 = t4465*t10846;
  t10864 = t10855 + t10856;
  t10872 = t5388*t10851;
  t10877 = t4896*t10864;
  t10881 = t10872 + t10877;
  t10884 = t4896*t10851;
  t10885 = -1.*t5388*t10864;
  t10887 = t10884 + t10885;
  t10895 = -1.*t6029*t10881;
  t10898 = t5832*t10887;
  t10901 = t10895 + t10898;
  t10906 = t5832*t10881;
  t10909 = t6029*t10887;
  t10912 = t10906 + t10909;
  t10500 = 0.1305*t2190*t10499;
  t10501 = t10499*t2736;
  t10502 = t10499*t2547*t3562;
  t10508 = t10507*t3990;
  t10519 = t4593*t10518;
  t10524 = t4748*t10523;
  t10536 = t5524*t10535;
  t10553 = t5672*t10551;
  t10565 = t6138*t10564;
  t10575 = t6368*t10574;
  t10599 = t6843*t10587;
  t10606 = t6946*t10605;
  t10609 = t6825*t10587;
  t10611 = t6747*t10605;
  t10614 = t10609 + t10611;
  t10617 = -0.00095*t10614;
  t10619 = t6747*t10587;
  t10620 = -1.*t6825*t10605;
  t10621 = t10619 + t10620;
  t10628 = -1.05124*t10621;
  t7430 = t2190*t7370;
  t7431 = -1.*t973*t2844*t2547;
  t7451 = t7430 + t7431;
  t10985 = -1.*t3223*t4465*t7451;
  t10986 = -1.*t4065*t7451*t3534;
  t10987 = t10985 + t10986;
  t10991 = t4065*t3223*t7451;
  t10995 = -1.*t4465*t7451*t3534;
  t11003 = t10991 + t10995;
  t11006 = t5388*t10987;
  t11007 = t4896*t11003;
  t11008 = t11006 + t11007;
  t11016 = t4896*t10987;
  t11017 = -1.*t5388*t11003;
  t11025 = t11016 + t11017;
  t11029 = -1.*t6029*t11008;
  t11030 = t5832*t11025;
  t11031 = t11029 + t11030;
  t11034 = t5832*t11008;
  t11035 = t6029*t11025;
  t11041 = t11034 + t11035;
  t10960 = 0.135*t2190;
  t10961 = -0.08055*t2547;
  t10962 = t10960 + t10961;
  t10964 = 0.08055*t2190;
  t10970 = t10964 + t2941;
  t11072 = t1181*t10789;
  t11074 = t10373*t1445;
  t11076 = t11072 + t11074;
  t11086 = t2190*t11076;
  t11091 = -1.*t2844*t544*t2547;
  t11096 = t11086 + t11091;
  t11107 = -1.*t3223*t4465*t11096;
  t11108 = -1.*t4065*t11096*t3534;
  t11111 = t11107 + t11108;
  t11128 = t4065*t3223*t11096;
  t11130 = -1.*t4465*t11096*t3534;
  t11131 = t11128 + t11130;
  t11135 = t5388*t11111;
  t11139 = t4896*t11131;
  t11141 = t11135 + t11139;
  t11147 = t4896*t11111;
  t11148 = -1.*t5388*t11131;
  t11150 = t11147 + t11148;
  t11155 = -1.*t6029*t11141;
  t11158 = t5832*t11150;
  t11164 = t11155 + t11158;
  t11170 = t5832*t11141;
  t11172 = t6029*t11150;
  t11173 = t11170 + t11172;
  t11203 = t2844*t1181*t991;
  t11205 = t2844*t508*t1445;
  t11208 = t11203 + t11205;
  t11213 = t2190*t11208;
  t11215 = t581*t2547;
  t11218 = t11213 + t11215;
  t11238 = -1.*t3223*t4465*t11218;
  t11242 = -1.*t4065*t11218*t3534;
  t11243 = t11238 + t11242;
  t11252 = t4065*t3223*t11218;
  t11254 = -1.*t4465*t11218*t3534;
  t11255 = t11252 + t11254;
  t11257 = t5388*t11243;
  t11258 = t4896*t11255;
  t11263 = t11257 + t11258;
  t11268 = t4896*t11243;
  t11274 = -1.*t5388*t11255;
  t11275 = t11268 + t11274;
  t11279 = -1.*t6029*t11263;
  t11283 = t5832*t11275;
  t11284 = t11279 + t11283;
  t11287 = t5832*t11263;
  t11288 = t6029*t11275;
  t11289 = t11287 + t11288;
  t11328 = -1.*t3223*t7719;
  t11329 = -1.*t7774*t3534;
  t11330 = t11328 + t11329;
  t11333 = t4465*t11330;
  t11337 = t11333 + t7987;
  t11339 = t4065*t11330;
  t11344 = -1.*t4465*t7940;
  t11348 = t11339 + t11344;
  t11352 = -1.*t5388*t11337;
  t11354 = t4896*t11348;
  t11357 = t11352 + t11354;
  t11361 = t4896*t11337;
  t11368 = t5388*t11348;
  t11369 = t11361 + t11368;
  t11373 = t6029*t11357;
  t11375 = t5832*t11369;
  t11376 = t11373 + t11375;
  t11379 = t5832*t11357;
  t11380 = -1.*t6029*t11369;
  t11385 = t11379 + t11380;
  t11312 = -0.01004*t3223;
  t11313 = -0.08055*t3534;
  t11316 = t11312 + t11313;
  t11320 = 0.08055*t3223;
  t11325 = t11320 + t3542;
  t11410 = t2844*t2190*t544;
  t11413 = t11076*t2547;
  t11414 = t11410 + t11413;
  t11423 = -1.*t3223*t11414;
  t11424 = -1.*t10794*t3534;
  t11428 = t11423 + t11424;
  t11433 = t3223*t10794;
  t11434 = -1.*t11414*t3534;
  t11435 = t11433 + t11434;
  t11438 = t4465*t11428;
  t11439 = t4065*t11435;
  t11440 = t11438 + t11439;
  t11443 = t4065*t11428;
  t11445 = -1.*t4465*t11435;
  t11447 = t11443 + t11445;
  t11451 = -1.*t5388*t11440;
  t11452 = t4896*t11447;
  t11453 = t11451 + t11452;
  t11455 = t4896*t11440;
  t11456 = t5388*t11447;
  t11457 = t11455 + t11456;
  t11463 = t6029*t11453;
  t11464 = t5832*t11457;
  t11465 = t11463 + t11464;
  t11467 = t5832*t11453;
  t11469 = -1.*t6029*t11457;
  t11471 = t11467 + t11469;
  t11489 = -1.*t2190*t581;
  t11490 = t11208*t2547;
  t11491 = t11489 + t11490;
  t11496 = -1.*t3223*t11491;
  t11497 = -1.*t10499*t3534;
  t11498 = t11496 + t11497;
  t11500 = t3223*t10499;
  t11501 = -1.*t11491*t3534;
  t11502 = t11500 + t11501;
  t11504 = t4465*t11498;
  t11505 = t4065*t11502;
  t11506 = t11504 + t11505;
  t11509 = t4065*t11498;
  t11510 = -1.*t4465*t11502;
  t11512 = t11509 + t11510;
  t11516 = -1.*t5388*t11506;
  t11517 = t4896*t11512;
  t11519 = t11516 + t11517;
  t11521 = t4896*t11506;
  t11522 = t5388*t11512;
  t11523 = t11521 + t11522;
  t11525 = t6029*t11519;
  t11527 = t5832*t11523;
  t11528 = t11525 + t11527;
  t11531 = t5832*t11519;
  t11533 = -1.*t6029*t11523;
  t11534 = t11531 + t11533;
  t11563 = -1.*t4065*t7869;
  t11565 = t11563 + t11344;
  t11567 = -1.*t5388*t7994;
  t11568 = t4896*t11565;
  t11570 = t11567 + t11568;
  t11573 = t5388*t11565;
  t11574 = t8168 + t11573;
  t11576 = t6029*t11570;
  t11579 = t5832*t11574;
  t11580 = t11576 + t11579;
  t11583 = t5832*t11570;
  t11584 = -1.*t6029*t11574;
  t11585 = t11583 + t11584;
  t11551 = -0.13004*t4065;
  t11552 = -0.08055*t4465;
  t11553 = t11551 + t11552;
  t11555 = 0.08055*t4065;
  t11557 = t11555 + t4501;
  t11604 = t3223*t11414;
  t11607 = t10794*t3534;
  t11609 = t11604 + t11607;
  t11613 = -1.*t4465*t11609;
  t11614 = t11613 + t11439;
  t11618 = -1.*t4065*t11609;
  t11621 = t11618 + t11445;
  t11625 = -1.*t5388*t11614;
  t11626 = t4896*t11621;
  t11630 = t11625 + t11626;
  t11632 = t4896*t11614;
  t11633 = t5388*t11621;
  t11634 = t11632 + t11633;
  t11638 = t6029*t11630;
  t11639 = t5832*t11634;
  t11641 = t11638 + t11639;
  t11643 = t5832*t11630;
  t11644 = -1.*t6029*t11634;
  t11645 = t11643 + t11644;
  t11662 = t3223*t11491;
  t11663 = t10499*t3534;
  t11665 = t11662 + t11663;
  t11671 = -1.*t4465*t11665;
  t11675 = t11671 + t11505;
  t11677 = -1.*t4065*t11665;
  t11679 = t11677 + t11510;
  t11681 = -1.*t5388*t11675;
  t11684 = t4896*t11679;
  t11685 = t11681 + t11684;
  t11687 = t4896*t11675;
  t11689 = t5388*t11679;
  t11690 = t11687 + t11689;
  t11692 = t6029*t11685;
  t11694 = t5832*t11690;
  t11696 = t11692 + t11694;
  t11698 = t5832*t11685;
  t11699 = -1.*t6029*t11690;
  t11700 = t11698 + t11699;
  t11721 = -1.*t4896*t8079;
  t11722 = t11567 + t11721;
  t11726 = t6029*t11722;
  t11727 = t11726 + t8262;
  t11729 = t5832*t11722;
  t11730 = -1.*t6029*t8211;
  t11731 = t11729 + t11730;
  t11714 = 0.03315*t4896;
  t11715 = t11714 + t5652;
  t11717 = -0.19074*t4896;
  t11718 = -0.03315*t5388;
  t11719 = t11717 + t11718;
  t11744 = t4065*t11609;
  t11745 = t4465*t11435;
  t11746 = t11744 + t11745;
  t11749 = -1.*t4896*t11746;
  t11750 = t11625 + t11749;
  t11752 = -1.*t5388*t11746;
  t11753 = t11632 + t11752;
  t11755 = t6029*t11750;
  t11756 = t5832*t11753;
  t11757 = t11755 + t11756;
  t11759 = t5832*t11750;
  t11760 = -1.*t6029*t11753;
  t11761 = t11759 + t11760;
  t11773 = t4065*t11665;
  t11774 = t4465*t11502;
  t11775 = t11773 + t11774;
  t11777 = -1.*t4896*t11775;
  t11778 = t11681 + t11777;
  t11780 = -1.*t5388*t11775;
  t11781 = t11687 + t11780;
  t11783 = t6029*t11778;
  t11784 = t5832*t11781;
  t11785 = t11783 + t11784;
  t11787 = t5832*t11778;
  t11788 = -1.*t6029*t11781;
  t11789 = t11787 + t11788;
  t11808 = -1.*t5832*t8158;
  t11809 = t11808 + t11730;
  t8455 = t6747*t8271;
  t11800 = -0.62554*t5832;
  t11801 = -0.01315*t6029;
  t11802 = t11800 + t11801;
  t11804 = 0.01315*t5832;
  t11805 = t11804 + t6134;
  t11819 = t5388*t11614;
  t11820 = t4896*t11746;
  t11821 = t11819 + t11820;
  t11824 = -1.*t6029*t11821;
  t11825 = t11824 + t11756;
  t11827 = -1.*t5832*t11821;
  t11828 = t11827 + t11760;
  t11841 = t5388*t11675;
  t11842 = t4896*t11775;
  t11843 = t11841 + t11842;
  t11847 = -1.*t6029*t11843;
  t11848 = t11847 + t11784;
  t11850 = -1.*t5832*t11843;
  t11851 = t11850 + t11788;
  t11811 = -1.*t6825*t8271;
  t8459 = -1.*t6825*t8368;
  t8468 = t8455 + t8459;
  t11862 = 0.05315*t6747;
  t11863 = t11862 + t6925;
  t11865 = -1.03354*t6747;
  t11866 = -0.05315*t6825;
  t11867 = t11865 + t11866;
  t11830 = -1.*t6825*t11825;
  t11875 = t5832*t11821;
  t11876 = t6029*t11753;
  t11877 = t11875 + t11876;
  t11836 = t6747*t11825;
  t11853 = -1.*t6825*t11848;
  t11887 = t5832*t11843;
  t11888 = t6029*t11781;
  t11889 = t11887 + t11888;
  t11857 = t6747*t11848;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t1086*t1458 + t1607*t1982 + t2179*t2736 + t3211*t3562 + t3707*t3990 + t4593*t4653 + t4748*t4837 - 1.*t2844*t2986*t544 + 0.1305*(t2179*t2190 + t2547*t2844*t544) + t5524*t5558 + t5672*t5801 + t6138*t6229 + t6368*t6553 + t6843*t6903 + t6946*t6961 - 0.00095*(t6825*t6903 + t6747*t6961) - 1.05124*(t6747*t6903 - 1.*t6825*t6961);
  p_output1[10]=t1458*t7219 + t1982*t7331 + t2736*t7370 + 0.1305*t7451 + t3562*t7719 + t3990*t7774 + t4593*t7869 + t4748*t7940 + t5524*t7994 + t5672*t8079 + t6138*t8158 + t6368*t8211 + t6843*t8271 + t6946*t8368 - 0.00095*(t6825*t8271 + t6747*t8368) - 1.05124*t8468 + t2844*t2986*t973;
  p_output1[11]=0;
  p_output1[12]=t2736*t8604 + t3562*t8765 + t3990*t8929 + t4593*t8978 + t4748*t9010 + t5524*t9083 + t5672*t9215 + t6138*t9238 + t6368*t9287 + t6843*t9396 + t6946*t9505 - 0.00095*(t6825*t9396 + t6747*t9505) - 1.05124*(t6747*t9396 - 1.*t6825*t9505) + t1458*t2844*t508*t973 - 1.*t2986*t581*t973 + 0.1305*(t2190*t8604 + t2547*t581*t973) + t1982*t2844*t973*t991;
  p_output1[13]=t1458*t2844*t508*t544 - 1.*t2986*t544*t581 + t2736*t9780 + 0.1305*(t2547*t544*t581 + t2190*t9780) + t3562*t9851 + t3990*t9873 + t4593*t9898 + t4748*t9909 + t1982*t2844*t544*t991 + t5524*t9927 + t5672*t9936 + t6138*t9949 + t6368*t9961 + t6843*t9972 + t6946*t9986 - 0.00095*(t6825*t9972 + t6747*t9986) - 1.05124*(t6747*t9972 - 1.*t6825*t9986);
  p_output1[14]=t10026*t2736 + 0.1305*(t10026*t2190 + t2547*t2844) - 1.*t2844*t2986 + t10048*t3562 + t10064*t3990 + t10084*t4593 + t10097*t4748 + t10121*t5524 + t10130*t5672 - 1.*t1458*t508*t581 + t10139*t6138 + t10155*t6368 - 0.00095*(t10180*t6747 + t10167*t6825) - 1.05124*(t10167*t6747 - 1.*t10180*t6825) + t10167*t6843 + t10180*t6946 - 1.*t1982*t581*t991;
  p_output1[15]=t10218*t1458 + 0.1305*t10228*t2190 + t10228*t2736 + t10228*t2547*t3562 + t10242*t3990 + t10254*t4593 + t10268*t4748 + t10281*t5524 + t10291*t5672 + t10306*t6138 + t10313*t6368 - 0.00095*(t10335*t6747 + t10328*t6825) - 1.05124*(t10328*t6747 - 1.*t10335*t6825) + t10328*t6843 + t10335*t6946 + t1982*t7219;
  p_output1[16]=t1458*t1607 + t10373*t1982 + 0.1305*t10382*t2190 + t10382*t2736 + t10382*t2547*t3562 + t10391*t3990 + t10399*t4593 + t10409*t4748 + t10418*t5524 + t10427*t5672 + t10438*t6138 + t10446*t6368 - 0.00095*(t10473*t6747 + t10460*t6825) - 1.05124*(t10460*t6747 - 1.*t10473*t6825) + t10460*t6843 + t10473*t6946;
  p_output1[17]=t10500 + t10501 + t10502 + t10508 + t10519 + t10524 + t10536 + t10553 + t10565 + t10575 + t10599 + t10606 + t10617 + t10628 + t1982*t2844*t508 - 1.*t1458*t2844*t991;
  p_output1[18]=t10659*t3990 + t10678*t4593 + t10698*t4748 + t10705*t5524 + t10719*t5672 + t10728*t6138 + t10735*t6368 - 0.00095*(t10750*t6747 + t10740*t6825) - 1.05124*(t10740*t6747 - 1.*t10750*t6825) + t10740*t6843 + t10750*t6946 + t10637*t7219 + t10645*t7331 + 0.1305*t2190*t7774 + t2736*t7774 + t2547*t3562*t7774;
  p_output1[19]=t10373*t10637 + t10645*t10789 + 0.1305*t10794*t2190 + t10794*t2736 + t10794*t2547*t3562 + t10813*t3990 + t10823*t4593 + t10846*t4748 + t10851*t5524 + t10864*t5672 + t10881*t6138 + t10887*t6368 - 0.00095*(t10912*t6747 + t10901*t6825) - 1.05124*(t10901*t6747 - 1.*t10912*t6825) + t10901*t6843 + t10912*t6946;
  p_output1[20]=t10500 + t10501 + t10502 + t10508 + t10519 + t10524 + t10536 + t10553 + t10565 + t10575 + t10599 + t10606 + t10617 + t10628 + t10637*t2844*t508 + t10645*t2844*t991;
  p_output1[21]=t10987*t5524 + t11003*t5672 + t11008*t6138 + t11025*t6368 - 0.00095*(t11041*t6747 + t11031*t6825) - 1.05124*(t11031*t6747 - 1.*t11041*t6825) + t11031*t6843 + t11041*t6946 + t10970*t7370 + t3562*t7451 + t3223*t4593*t7451 - 1.*t3534*t4748*t7451 + t10962*t2844*t973 + 0.1305*(-1.*t2547*t7370 - 1.*t2190*t2844*t973);
  p_output1[22]=t10970*t11076 + 0.1305*(-1.*t11076*t2547 + t3150) + t11096*t3562 + t11096*t3223*t4593 - 1.*t11096*t3534*t4748 + t10962*t2844*t544 + t11111*t5524 + t11131*t5672 + t11141*t6138 + t11150*t6368 - 0.00095*(t11173*t6747 + t11164*t6825) - 1.05124*(t11164*t6747 - 1.*t11173*t6825) + t11164*t6843 + t11173*t6946;
  p_output1[23]=t10970*t11208 + t11218*t3562 + t11218*t3223*t4593 - 1.*t11218*t3534*t4748 + t11243*t5524 + t11255*t5672 - 1.*t10962*t581 + 0.1305*(-1.*t11208*t2547 + t2190*t581) + t11263*t6138 + t11275*t6368 - 0.00095*(t11289*t6747 + t11284*t6825) - 1.05124*(t11284*t6747 - 1.*t11289*t6825) + t11284*t6843 + t11289*t6946;
  p_output1[24]=t11330*t4748 + t11348*t5524 + t11337*t5672 + t11369*t6138 + t11357*t6368 - 1.05124*(t11385*t6747 - 1.*t11376*t6825) - 0.00095*(t11376*t6747 + t11385*t6825) + t11385*t6843 + t11376*t6946 + t11316*t7719 + t11325*t7774 + t4593*t7940;
  p_output1[25]=t10794*t11325 + t11316*t11414 + t11435*t4593 + t11428*t4748 + t11447*t5524 + t11440*t5672 + t11457*t6138 + t11453*t6368 - 1.05124*(t11471*t6747 - 1.*t11465*t6825) - 0.00095*(t11465*t6747 + t11471*t6825) + t11471*t6843 + t11465*t6946;
  p_output1[26]=t10499*t11325 + t11316*t11491 + t11502*t4593 + t11498*t4748 + t11512*t5524 + t11506*t5672 + t11523*t6138 + t11519*t6368 - 1.05124*(t11534*t6747 - 1.*t11528*t6825) - 0.00095*(t11528*t6747 + t11534*t6825) + t11534*t6843 + t11528*t6946;
  p_output1[27]=t11565*t5524 + t11574*t6138 + t11570*t6368 - 1.05124*(t11585*t6747 - 1.*t11580*t6825) - 0.00095*(t11580*t6747 + t11585*t6825) + t11585*t6843 + t11580*t6946 + t11553*t7869 + t11557*t7940 + t5672*t7994;
  p_output1[28]=t11435*t11557 + t11553*t11609 + t11621*t5524 + t11614*t5672 + t11634*t6138 + t11630*t6368 - 1.05124*(t11645*t6747 - 1.*t11641*t6825) - 0.00095*(t11641*t6747 + t11645*t6825) + t11645*t6843 + t11641*t6946;
  p_output1[29]=t11502*t11557 + t11553*t11665 + t11679*t5524 + t11675*t5672 + t11690*t6138 + t11685*t6368 - 1.05124*(t11700*t6747 - 1.*t11696*t6825) - 0.00095*(t11696*t6747 + t11700*t6825) + t11700*t6843 + t11696*t6946;
  p_output1[30]=t11722*t6368 - 1.05124*(t11731*t6747 - 1.*t11727*t6825) - 0.00095*(t11727*t6747 + t11731*t6825) + t11731*t6843 + t11727*t6946 + t11715*t7994 + t11719*t8079 + t6138*t8211;
  p_output1[31]=t11614*t11715 + t11719*t11746 + t11753*t6138 + t11750*t6368 - 1.05124*(t11761*t6747 - 1.*t11757*t6825) - 0.00095*(t11757*t6747 + t11761*t6825) + t11761*t6843 + t11757*t6946;
  p_output1[32]=t11675*t11715 + t11719*t11775 + t11781*t6138 + t11778*t6368 - 1.05124*(t11789*t6747 - 1.*t11785*t6825) - 0.00095*(t11785*t6747 + t11789*t6825) + t11789*t6843 + t11785*t6946;
  p_output1[33]=-1.05124*(t11811 + t11809*t6747) + t11809*t6843 + t11802*t8158 + t11805*t8211 + t6946*t8271 - 0.00095*(t11809*t6825 + t8455);
  p_output1[34]=t11753*t11805 + t11802*t11821 - 1.05124*(t11830 + t11828*t6747) - 0.00095*(t11836 + t11828*t6825) + t11828*t6843 + t11825*t6946;
  p_output1[35]=t11781*t11805 + t11802*t11843 - 1.05124*(t11853 + t11851*t6747) - 0.00095*(t11857 + t11851*t6825) + t11851*t6843 + t11848*t6946;
  p_output1[36]=t11863*t8271 + t11867*t8368 - 1.05124*(t11811 - 1.*t6747*t8368) - 0.00095*t8468;
  p_output1[37]=t11825*t11863 + t11867*t11877 - 1.05124*(t11830 - 1.*t11877*t6747) - 0.00095*(t11836 - 1.*t11877*t6825);
  p_output1[38]=t11848*t11863 + t11867*t11889 - 1.05124*(t11853 - 1.*t11889*t6747) - 0.00095*(t11857 - 1.*t11889*t6825);
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Jp_LeftToeBottom_mex.hh"

namespace SymExpression
{

void Jp_LeftToeBottom_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
