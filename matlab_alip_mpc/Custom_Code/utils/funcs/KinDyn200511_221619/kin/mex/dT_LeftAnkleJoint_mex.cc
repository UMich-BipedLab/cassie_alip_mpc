/*
 * Automatically Generated from Mathematica.
 * Mon 11 May 2020 22:20:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t617;
  double t523;
  double t635;
  double t567;
  double t637;
  double t466;
  double t483;
  double t587;
  double t680;
  double t691;
  double t700;
  double t709;
  double t732;
  double t743;
  double t754;
  double t777;
  double t794;
  double t802;
  double t807;
  double t814;
  double t862;
  double t876;
  double t920;
  double t306;
  double t427;
  double t933;
  double t948;
  double t891;
  double t936;
  double t943;
  double t286;
  double t958;
  double t983;
  double t993;
  double t235;
  double t1195;
  double t1199;
  double t1205;
  double t1250;
  double t1251;
  double t1262;
  double t1182;
  double t1210;
  double t1232;
  double t1234;
  double t1272;
  double t1280;
  double t1294;
  double t1329;
  double t1334;
  double t1051;
  double t1281;
  double t1340;
  double t1352;
  double t1368;
  double t1384;
  double t1396;
  double t1548;
  double t1549;
  double t1532;
  double t1536;
  double t1540;
  double t1550;
  double t1551;
  double t1588;
  double t1614;
  double t1619;
  double t1584;
  double t1627;
  double t1637;
  double t1646;
  double t1653;
  double t1655;
  double t1776;
  double t1779;
  double t1792;
  double t1726;
  double t1731;
  double t1742;
  double t1754;
  double t1763;
  double t1770;
  double t1774;
  double t1795;
  double t1798;
  double t1823;
  double t1845;
  double t1850;
  double t1805;
  double t1860;
  double t1865;
  double t1870;
  double t1877;
  double t1885;
  double t2017;
  double t2024;
  double t2025;
  double t1974;
  double t1995;
  double t2012;
  double t2079;
  double t2081;
  double t2085;
  double t1966;
  double t2015;
  double t2043;
  double t2049;
  double t2057;
  double t2065;
  double t2070;
  double t2086;
  double t2088;
  double t2099;
  double t2111;
  double t2120;
  double t2097;
  double t2125;
  double t2126;
  double t2140;
  double t2146;
  double t2147;
  double t2196;
  double t2197;
  double t2198;
  double t2200;
  double t2204;
  double t2205;
  double t2212;
  double t2215;
  double t2227;
  double t2207;
  double t2235;
  double t2258;
  double t2281;
  double t2282;
  double t2286;
  double t2338;
  double t2341;
  double t2342;
  double t2343;
  double t2361;
  double t2370;
  double t2384;
  double t2367;
  double t2416;
  double t2467;
  double t2468;
  double t2484;
  double t2504;
  double t2507;
  double t2508;
  double t2561;
  double t2563;
  double t2566;
  double t2568;
  double t2590;
  double t2592;
  double t2597;
  double t2599;
  double t2602;
  double t2603;
  double t2604;
  double t2608;
  double t2609;
  double t2613;
  double t2616;
  double t2632;
  double t2639;
  double t2640;
  double t2718;
  double t2720;
  double t2706;
  double t2712;
  double t2713;
  double t2714;
  double t2721;
  double t2722;
  double t2731;
  double t2732;
  double t2733;
  double t2725;
  double t2735;
  double t2739;
  double t2747;
  double t2771;
  double t2773;
  double t2859;
  double t2864;
  double t2842;
  double t2844;
  double t2856;
  double t2879;
  double t2880;
  double t2884;
  double t2889;
  double t2890;
  double t2882;
  double t2892;
  double t2901;
  double t2918;
  double t2919;
  double t2945;
  double t3044;
  double t3062;
  double t3066;
  double t3010;
  double t3011;
  double t3021;
  double t3024;
  double t3026;
  double t3027;
  double t3039;
  double t3070;
  double t3078;
  double t3080;
  double t3084;
  double t3089;
  double t3079;
  double t3090;
  double t3094;
  double t3101;
  double t3103;
  double t3105;
  double t3141;
  double t3152;
  double t3167;
  double t3170;
  double t3179;
  double t3186;
  double t3190;
  double t3191;
  double t3192;
  double t3188;
  double t3197;
  double t3201;
  double t3210;
  double t3214;
  double t3216;
  double t3262;
  double t3270;
  double t3279;
  double t3286;
  double t3304;
  double t3307;
  double t3313;
  double t3306;
  double t3330;
  double t3358;
  double t3360;
  double t3364;
  double t3377;
  double t3378;
  double t3379;
  double t2515;
  double t2519;
  double t2520;
  double t3423;
  double t3434;
  double t3437;
  double t3450;
  double t3453;
  double t3459;
  double t3460;
  double t3471;
  double t3473;
  double t3476;
  double t3479;
  double t3483;
  double t3513;
  double t3516;
  double t3518;
  double t3500;
  double t3509;
  double t3510;
  double t3511;
  double t3525;
  double t3527;
  double t3547;
  double t3550;
  double t3553;
  double t3534;
  double t3554;
  double t3555;
  double t3565;
  double t3567;
  double t3575;
  double t3556;
  double t3577;
  double t3579;
  double t3588;
  double t3603;
  double t3604;
  double t3608;
  double t3610;
  double t3619;
  double t3646;
  double t3651;
  double t3658;
  double t3662;
  double t3665;
  double t3667;
  double t3676;
  double t3677;
  double t3678;
  double t3669;
  double t3685;
  double t3693;
  double t3700;
  double t3706;
  double t3710;
  double t3765;
  double t3768;
  double t3780;
  double t3781;
  double t3786;
  double t3808;
  double t3814;
  double t3794;
  double t3851;
  double t3887;
  double t3899;
  double t3907;
  double t3931;
  double t3936;
  double t3937;
  double t3988;
  double t3998;
  double t4003;
  double t3964;
  double t3969;
  double t3974;
  double t3976;
  double t3977;
  double t3982;
  double t3986;
  double t4004;
  double t4013;
  double t4015;
  double t4017;
  double t4020;
  double t4014;
  double t4028;
  double t4031;
  double t4037;
  double t4045;
  double t4050;
  double t947;
  double t1008;
  double t1021;
  double t1063;
  double t1097;
  double t1120;
  double t1366;
  double t1400;
  double t1420;
  double t1435;
  double t1438;
  double t1441;
  double t1639;
  double t1659;
  double t1660;
  double t1689;
  double t1696;
  double t1705;
  double t1867;
  double t1904;
  double t1914;
  double t1922;
  double t1936;
  double t1940;
  double t2130;
  double t2154;
  double t2159;
  double t2166;
  double t2176;
  double t2179;
  double t2274;
  double t2296;
  double t2297;
  double t2316;
  double t2319;
  double t2323;
  double t2393;
  double t2411;
  double t2419;
  double t2425;
  double t2490;
  double t2493;
  double t4215;
  double t2625;
  double t2651;
  double t2655;
  double t2663;
  double t2668;
  double t2679;
  double t2743;
  double t2775;
  double t2779;
  double t2795;
  double t2802;
  double t2811;
  double t2906;
  double t2948;
  double t2952;
  double t2962;
  double t2969;
  double t2971;
  double t3097;
  double t3110;
  double t3113;
  double t3116;
  double t3121;
  double t3131;
  double t3202;
  double t3217;
  double t3229;
  double t3235;
  double t3236;
  double t3238;
  double t3314;
  double t3319;
  double t3342;
  double t3345;
  double t3366;
  double t3374;
  double t3386;
  double t3388;
  double t3390;
  double t4339;
  double t2547;
  double t2551;
  double t3475;
  double t3484;
  double t3485;
  double t3487;
  double t3489;
  double t3492;
  double t4380;
  double t4381;
  double t4382;
  double t3695;
  double t3711;
  double t3714;
  double t3737;
  double t3740;
  double t3744;
  double t3820;
  double t3831;
  double t3855;
  double t3870;
  double t3916;
  double t3919;
  double t3949;
  double t3950;
  double t3958;
  double t4443;
  double t4033;
  double t4051;
  double t4052;
  double t4061;
  double t4065;
  double t4068;
  double t4625;
  double t4626;
  double t4718;
  double t4721;
  double t4750;
  double t4753;
  double t4080;
  double t4085;
  double t4087;
  double t4804;
  double t4813;
  double t4683;
  double t4684;
  double t4685;
  double t4688;
  double t4689;
  double t4637;
  double t4641;
  double t4642;
  double t4694;
  double t4703;
  double t4706;
  double t4726;
  double t4731;
  double t4736;
  double t4738;
  double t4740;
  double t4741;
  double t4754;
  double t4756;
  double t4760;
  double t4764;
  double t4770;
  double t4778;
  double t4095;
  double t4099;
  double t4102;
  double t4840;
  double t4858;
  double t4862;
  double t4866;
  double t4872;
  double t4874;
  double t4886;
  double t4891;
  double t4892;
  double t4123;
  double t4126;
  double t4127;
  double t4816;
  double t4821;
  double t4823;
  double t4828;
  double t4844;
  double t4615;
  double t4146;
  double t4152;
  double t4154;
  double t5045;
  double t5057;
  double t4162;
  double t4163;
  double t4168;
  double t4176;
  double t4178;
  double t4186;
  double t4197;
  double t4199;
  double t4201;
  double t4213;
  double t4222;
  double t4229;
  double t4230;
  double t5368;
  double t4597;
  double t4601;
  double t4602;
  double t4612;
  double t4616;
  double t4239;
  double t4242;
  double t4243;
  double t4251;
  double t4255;
  double t4263;
  double t4941;
  double t4943;
  double t4959;
  double t4961;
  double t4962;
  double t4267;
  double t4270;
  double t4272;
  double t4281;
  double t4282;
  double t4290;
  double t5190;
  double t5192;
  double t5195;
  double t5204;
  double t5207;
  double t4297;
  double t4299;
  double t4304;
  double t5250;
  double t5252;
  double t5254;
  double t5270;
  double t5275;
  double t4320;
  double t4321;
  double t4325;
  double t5317;
  double t5318;
  double t5333;
  double t5334;
  double t5336;
  double t4333;
  double t4345;
  double t5406;
  double t5413;
  double t5414;
  double t5424;
  double t5427;
  double t4353;
  double t4359;
  double t5893;
  double t4369;
  double t4370;
  double t4374;
  double t6043;
  double t6045;
  double t6049;
  double t6050;
  double t6054;
  double t6055;
  double t6056;
  double t6057;
  double t6062;
  double t6067;
  double t6070;
  double t6071;
  double t6074;
  double t6080;
  double t6081;
  double t4389;
  double t4403;
  double t4410;
  double t4418;
  double t4420;
  double t4431;
  double t4442;
  double t4448;
  double t4453;
  double t4461;
  double t6199;
  double t4474;
  double t4476;
  double t4477;
  t617 = Cos(var1[3]);
  t523 = Cos(var1[5]);
  t635 = Sin(var1[4]);
  t567 = Sin(var1[3]);
  t637 = Sin(var1[5]);
  t466 = Cos(var1[7]);
  t483 = Cos(var1[6]);
  t587 = -1.*t523*t567;
  t680 = t617*t635*t637;
  t691 = t587 + t680;
  t700 = t483*t691;
  t709 = t617*t523*t635;
  t732 = t567*t637;
  t743 = t709 + t732;
  t754 = Sin(var1[6]);
  t777 = t743*t754;
  t794 = t700 + t777;
  t802 = t466*t794;
  t807 = Cos(var1[4]);
  t814 = Sin(var1[7]);
  t862 = -1.*t617*t807*t814;
  t876 = t802 + t862;
  t920 = Cos(var1[9]);
  t306 = Cos(var1[8]);
  t427 = Sin(var1[9]);
  t933 = Sin(var1[8]);
  t948 = Cos(var1[10]);
  t891 = -1.*t306*t427*t876;
  t936 = -1.*t920*t876*t933;
  t943 = t891 + t936;
  t286 = Sin(var1[10]);
  t958 = t920*t306*t876;
  t983 = -1.*t427*t876*t933;
  t993 = t958 + t983;
  t235 = Sin(var1[11]);
  t1195 = t523*t567;
  t1199 = -1.*t617*t635*t637;
  t1205 = t1195 + t1199;
  t1250 = t483*t1205;
  t1251 = -1.*t743*t754;
  t1262 = t1250 + t1251;
  t1182 = t483*t743;
  t1210 = t1205*t754;
  t1232 = t1182 + t1210;
  t1234 = t306*t1232*t814;
  t1272 = t1262*t933;
  t1280 = t1234 + t1272;
  t1294 = t306*t1262;
  t1329 = -1.*t1232*t814*t933;
  t1334 = t1294 + t1329;
  t1051 = Cos(var1[11]);
  t1281 = -1.*t427*t1280;
  t1340 = t920*t1334;
  t1352 = t1281 + t1340;
  t1368 = t920*t1280;
  t1384 = t427*t1334;
  t1396 = t1368 + t1384;
  t1548 = -1.*t483*t691;
  t1549 = t1548 + t1251;
  t1532 = -1.*t691*t754;
  t1536 = t1182 + t1532;
  t1540 = t306*t1536*t814;
  t1550 = t1549*t933;
  t1551 = t1540 + t1550;
  t1588 = t306*t1549;
  t1614 = -1.*t1536*t814*t933;
  t1619 = t1588 + t1614;
  t1584 = -1.*t427*t1551;
  t1627 = t920*t1619;
  t1637 = t1584 + t1627;
  t1646 = t920*t1551;
  t1653 = t427*t1619;
  t1655 = t1646 + t1653;
  t1776 = t617*t807*t523*t483;
  t1779 = -1.*t617*t807*t637*t754;
  t1792 = t1776 + t1779;
  t1726 = -1.*t617*t466*t635;
  t1731 = t617*t807*t483*t637;
  t1742 = t617*t807*t523*t754;
  t1754 = t1731 + t1742;
  t1763 = t1754*t814;
  t1770 = t1726 + t1763;
  t1774 = t306*t1770;
  t1795 = t1792*t933;
  t1798 = t1774 + t1795;
  t1823 = t306*t1792;
  t1845 = -1.*t1770*t933;
  t1850 = t1823 + t1845;
  t1805 = -1.*t427*t1798;
  t1860 = t920*t1850;
  t1865 = t1805 + t1860;
  t1870 = t920*t1798;
  t1877 = t427*t1850;
  t1885 = t1870 + t1877;
  t2017 = -1.*t523*t567*t635;
  t2024 = t617*t637;
  t2025 = t2017 + t2024;
  t1974 = -1.*t617*t523;
  t1995 = -1.*t567*t635*t637;
  t2012 = t1974 + t1995;
  t2079 = t483*t2025;
  t2081 = -1.*t2012*t754;
  t2085 = t2079 + t2081;
  t1966 = -1.*t807*t466*t567;
  t2015 = t483*t2012;
  t2043 = t2025*t754;
  t2049 = t2015 + t2043;
  t2057 = t2049*t814;
  t2065 = t1966 + t2057;
  t2070 = t306*t2065;
  t2086 = t2085*t933;
  t2088 = t2070 + t2086;
  t2099 = t306*t2085;
  t2111 = -1.*t2065*t933;
  t2120 = t2099 + t2111;
  t2097 = -1.*t427*t2088;
  t2125 = t920*t2120;
  t2126 = t2097 + t2125;
  t2140 = t920*t2088;
  t2146 = t427*t2120;
  t2147 = t2140 + t2146;
  t2196 = t617*t807*t466;
  t2197 = t794*t814;
  t2198 = t2196 + t2197;
  t2200 = -1.*t306*t2198;
  t2204 = -1.*t1536*t933;
  t2205 = t2200 + t2204;
  t2212 = t306*t1536;
  t2215 = -1.*t2198*t933;
  t2227 = t2212 + t2215;
  t2207 = t427*t2205;
  t2235 = t920*t2227;
  t2258 = t2207 + t2235;
  t2281 = t920*t2205;
  t2282 = -1.*t427*t2227;
  t2286 = t2281 + t2282;
  t2338 = t306*t2198;
  t2341 = t1536*t933;
  t2342 = t2338 + t2341;
  t2343 = -1.*t427*t2342;
  t2361 = t2343 + t2235;
  t2370 = -1.*t920*t2342;
  t2384 = t2370 + t2282;
  t2367 = -1.*t286*t2361;
  t2416 = t948*t2361;
  t2467 = t920*t2342;
  t2468 = t427*t2227;
  t2484 = t2467 + t2468;
  t2504 = -1.*t286*t2484;
  t2507 = t2416 + t2504;
  t2508 = t235*t2507;
  t2561 = t617*t523;
  t2563 = t567*t635*t637;
  t2566 = t2561 + t2563;
  t2568 = t483*t2566;
  t2590 = t523*t567*t635;
  t2592 = -1.*t617*t637;
  t2597 = t2590 + t2592;
  t2599 = t2597*t754;
  t2602 = t2568 + t2599;
  t2603 = t466*t2602;
  t2604 = -1.*t807*t567*t814;
  t2608 = t2603 + t2604;
  t2609 = -1.*t306*t427*t2608;
  t2613 = -1.*t920*t2608*t933;
  t2616 = t2609 + t2613;
  t2632 = t920*t306*t2608;
  t2639 = -1.*t427*t2608*t933;
  t2640 = t2632 + t2639;
  t2718 = -1.*t2597*t754;
  t2720 = t2015 + t2718;
  t2706 = t483*t2597;
  t2712 = t2012*t754;
  t2713 = t2706 + t2712;
  t2714 = t306*t2713*t814;
  t2721 = t2720*t933;
  t2722 = t2714 + t2721;
  t2731 = t306*t2720;
  t2732 = -1.*t2713*t814*t933;
  t2733 = t2731 + t2732;
  t2725 = -1.*t427*t2722;
  t2735 = t920*t2733;
  t2739 = t2725 + t2735;
  t2747 = t920*t2722;
  t2771 = t427*t2733;
  t2773 = t2747 + t2771;
  t2859 = -1.*t483*t2566;
  t2864 = t2859 + t2718;
  t2842 = -1.*t2566*t754;
  t2844 = t2706 + t2842;
  t2856 = t306*t2844*t814;
  t2879 = t2864*t933;
  t2880 = t2856 + t2879;
  t2884 = t306*t2864;
  t2889 = -1.*t2844*t814*t933;
  t2890 = t2884 + t2889;
  t2882 = -1.*t427*t2880;
  t2892 = t920*t2890;
  t2901 = t2882 + t2892;
  t2918 = t920*t2880;
  t2919 = t427*t2890;
  t2945 = t2918 + t2919;
  t3044 = t807*t523*t483*t567;
  t3062 = -1.*t807*t567*t637*t754;
  t3066 = t3044 + t3062;
  t3010 = -1.*t466*t567*t635;
  t3011 = t807*t483*t567*t637;
  t3021 = t807*t523*t567*t754;
  t3024 = t3011 + t3021;
  t3026 = t3024*t814;
  t3027 = t3010 + t3026;
  t3039 = t306*t3027;
  t3070 = t3066*t933;
  t3078 = t3039 + t3070;
  t3080 = t306*t3066;
  t3084 = -1.*t3027*t933;
  t3089 = t3080 + t3084;
  t3079 = -1.*t427*t3078;
  t3090 = t920*t3089;
  t3094 = t3079 + t3090;
  t3101 = t920*t3078;
  t3103 = t427*t3089;
  t3105 = t3101 + t3103;
  t3141 = t807*t466*t567;
  t3152 = t2602*t814;
  t3167 = t3141 + t3152;
  t3170 = -1.*t306*t3167;
  t3179 = -1.*t2844*t933;
  t3186 = t3170 + t3179;
  t3190 = t306*t2844;
  t3191 = -1.*t3167*t933;
  t3192 = t3190 + t3191;
  t3188 = t427*t3186;
  t3197 = t920*t3192;
  t3201 = t3188 + t3197;
  t3210 = t920*t3186;
  t3214 = -1.*t427*t3192;
  t3216 = t3210 + t3214;
  t3262 = t306*t3167;
  t3270 = t2844*t933;
  t3279 = t3262 + t3270;
  t3286 = -1.*t427*t3279;
  t3304 = t3286 + t3197;
  t3307 = -1.*t920*t3279;
  t3313 = t3307 + t3214;
  t3306 = -1.*t286*t3304;
  t3330 = t948*t3304;
  t3358 = t920*t3279;
  t3360 = t427*t3192;
  t3364 = t3358 + t3360;
  t3377 = -1.*t286*t3364;
  t3378 = t3330 + t3377;
  t3379 = t235*t3378;
  t2515 = t286*t2361;
  t2519 = t948*t2484;
  t2520 = t2515 + t2519;
  t3423 = t807*t483*t637;
  t3434 = t807*t523*t754;
  t3437 = t3423 + t3434;
  t3450 = t466*t3437;
  t3453 = t635*t814;
  t3459 = t3450 + t3453;
  t3460 = -1.*t306*t427*t3459;
  t3471 = -1.*t920*t3459*t933;
  t3473 = t3460 + t3471;
  t3476 = t920*t306*t3459;
  t3479 = -1.*t427*t3459*t933;
  t3483 = t3476 + t3479;
  t3513 = -1.*t807*t483*t637;
  t3516 = -1.*t807*t523*t754;
  t3518 = t3513 + t3516;
  t3500 = t807*t523*t483;
  t3509 = -1.*t807*t637*t754;
  t3510 = t3500 + t3509;
  t3511 = t306*t3510*t814;
  t3525 = t3518*t933;
  t3527 = t3511 + t3525;
  t3547 = t306*t3518;
  t3550 = -1.*t3510*t814*t933;
  t3553 = t3547 + t3550;
  t3534 = -1.*t427*t3527;
  t3554 = t920*t3553;
  t3555 = t3534 + t3554;
  t3565 = t920*t3527;
  t3567 = t427*t3553;
  t3575 = t3565 + t3567;
  t3556 = t286*t3555;
  t3577 = t948*t3575;
  t3579 = t3556 + t3577;
  t3588 = t235*t3579;
  t3603 = t948*t3555;
  t3604 = -1.*t286*t3575;
  t3608 = t3603 + t3604;
  t3610 = -1.*t1051*t3608;
  t3619 = t3588 + t3610;
  t3646 = -1.*t466*t635;
  t3651 = t3437*t814;
  t3658 = t3646 + t3651;
  t3662 = -1.*t306*t3658;
  t3665 = -1.*t3510*t933;
  t3667 = t3662 + t3665;
  t3676 = t306*t3510;
  t3677 = -1.*t3658*t933;
  t3678 = t3676 + t3677;
  t3669 = t427*t3667;
  t3685 = t920*t3678;
  t3693 = t3669 + t3685;
  t3700 = t920*t3667;
  t3706 = -1.*t427*t3678;
  t3710 = t3700 + t3706;
  t3765 = t306*t3658;
  t3768 = t3510*t933;
  t3780 = t3765 + t3768;
  t3781 = -1.*t427*t3780;
  t3786 = t3781 + t3685;
  t3808 = -1.*t920*t3780;
  t3814 = t3808 + t3706;
  t3794 = -1.*t286*t3786;
  t3851 = t948*t3786;
  t3887 = t920*t3780;
  t3899 = t427*t3678;
  t3907 = t3887 + t3899;
  t3931 = -1.*t286*t3907;
  t3936 = t3851 + t3931;
  t3937 = t235*t3936;
  t3988 = -1.*t523*t483*t635;
  t3998 = t635*t637*t754;
  t4003 = t3988 + t3998;
  t3964 = -1.*t807*t466;
  t3969 = -1.*t483*t635*t637;
  t3974 = -1.*t523*t635*t754;
  t3976 = t3969 + t3974;
  t3977 = t3976*t814;
  t3982 = t3964 + t3977;
  t3986 = t306*t3982;
  t4004 = t4003*t933;
  t4013 = t3986 + t4004;
  t4015 = t306*t4003;
  t4017 = -1.*t3982*t933;
  t4020 = t4015 + t4017;
  t4014 = -1.*t427*t4013;
  t4028 = t920*t4020;
  t4031 = t4014 + t4028;
  t4037 = t920*t4013;
  t4045 = t427*t4020;
  t4050 = t4037 + t4045;
  t947 = t286*t943;
  t1008 = t948*t993;
  t1021 = t947 + t1008;
  t1063 = t948*t943;
  t1097 = -1.*t286*t993;
  t1120 = t1063 + t1097;
  t1366 = t286*t1352;
  t1400 = t948*t1396;
  t1420 = t1366 + t1400;
  t1435 = t948*t1352;
  t1438 = -1.*t286*t1396;
  t1441 = t1435 + t1438;
  t1639 = t286*t1637;
  t1659 = t948*t1655;
  t1660 = t1639 + t1659;
  t1689 = t948*t1637;
  t1696 = -1.*t286*t1655;
  t1705 = t1689 + t1696;
  t1867 = t286*t1865;
  t1904 = t948*t1885;
  t1914 = t1867 + t1904;
  t1922 = t948*t1865;
  t1936 = -1.*t286*t1885;
  t1940 = t1922 + t1936;
  t2130 = t286*t2126;
  t2154 = t948*t2147;
  t2159 = t2130 + t2154;
  t2166 = t948*t2126;
  t2176 = -1.*t286*t2147;
  t2179 = t2166 + t2176;
  t2274 = -1.*t286*t2258;
  t2296 = t948*t2286;
  t2297 = t2274 + t2296;
  t2316 = t948*t2258;
  t2319 = t286*t2286;
  t2323 = t2316 + t2319;
  t2393 = t948*t2384;
  t2411 = t2367 + t2393;
  t2419 = t286*t2384;
  t2425 = t2416 + t2419;
  t2490 = -1.*t948*t2484;
  t2493 = t2367 + t2490;
  t4215 = t1051*t2507;
  t2625 = t286*t2616;
  t2651 = t948*t2640;
  t2655 = t2625 + t2651;
  t2663 = t948*t2616;
  t2668 = -1.*t286*t2640;
  t2679 = t2663 + t2668;
  t2743 = t286*t2739;
  t2775 = t948*t2773;
  t2779 = t2743 + t2775;
  t2795 = t948*t2739;
  t2802 = -1.*t286*t2773;
  t2811 = t2795 + t2802;
  t2906 = t286*t2901;
  t2948 = t948*t2945;
  t2952 = t2906 + t2948;
  t2962 = t948*t2901;
  t2969 = -1.*t286*t2945;
  t2971 = t2962 + t2969;
  t3097 = t286*t3094;
  t3110 = t948*t3105;
  t3113 = t3097 + t3110;
  t3116 = t948*t3094;
  t3121 = -1.*t286*t3105;
  t3131 = t3116 + t3121;
  t3202 = -1.*t286*t3201;
  t3217 = t948*t3216;
  t3229 = t3202 + t3217;
  t3235 = t948*t3201;
  t3236 = t286*t3216;
  t3238 = t3235 + t3236;
  t3314 = t948*t3313;
  t3319 = t3306 + t3314;
  t3342 = t286*t3313;
  t3345 = t3330 + t3342;
  t3366 = -1.*t948*t3364;
  t3374 = t3306 + t3366;
  t3386 = t286*t3304;
  t3388 = t948*t3364;
  t3390 = t3386 + t3388;
  t4339 = t1051*t3378;
  t2547 = t1051*t2520;
  t2551 = t2547 + t2508;
  t3475 = t286*t3473;
  t3484 = t948*t3483;
  t3485 = t3475 + t3484;
  t3487 = t948*t3473;
  t3489 = -1.*t286*t3483;
  t3492 = t3487 + t3489;
  t4380 = t1051*t3579;
  t4381 = t235*t3608;
  t4382 = t4380 + t4381;
  t3695 = -1.*t286*t3693;
  t3711 = t948*t3710;
  t3714 = t3695 + t3711;
  t3737 = t948*t3693;
  t3740 = t286*t3710;
  t3744 = t3737 + t3740;
  t3820 = t948*t3814;
  t3831 = t3794 + t3820;
  t3855 = t286*t3814;
  t3870 = t3851 + t3855;
  t3916 = -1.*t948*t3907;
  t3919 = t3794 + t3916;
  t3949 = t286*t3786;
  t3950 = t948*t3907;
  t3958 = t3949 + t3950;
  t4443 = t1051*t3936;
  t4033 = t286*t4031;
  t4051 = t948*t4050;
  t4052 = t4033 + t4051;
  t4061 = t948*t4031;
  t4065 = -1.*t286*t4050;
  t4068 = t4061 + t4065;
  t4625 = -1.*t920;
  t4626 = 1. + t4625;
  t4718 = -1.*t948;
  t4721 = 1. + t4718;
  t4750 = -1.*t1051;
  t4753 = 1. + t4750;
  t4080 = t1051*t1021;
  t4085 = t235*t1120;
  t4087 = t4080 + t4085;
  t4804 = -1.*t483;
  t4813 = 1. + t4804;
  t4683 = -1.*t306;
  t4684 = 1. + t4683;
  t4685 = -0.08055*t4684;
  t4688 = -0.01004*t933;
  t4689 = 0. + t4685 + t4688;
  t4637 = -0.08055*t4626;
  t4641 = -0.13004*t427;
  t4642 = 0. + t4637 + t4641;
  t4694 = -0.13004*t4626;
  t4703 = 0.08055*t427;
  t4706 = 0. + t4694 + t4703;
  t4726 = -0.19074*t4721;
  t4731 = 0.03315*t286;
  t4736 = 0. + t4726 + t4731;
  t4738 = -0.03315*t4721;
  t4740 = -0.19074*t286;
  t4741 = 0. + t4738 + t4740;
  t4754 = -0.01315*t4753;
  t4756 = -0.62554*t235;
  t4760 = 0. + t4754 + t4756;
  t4764 = -0.62554*t4753;
  t4770 = 0.01315*t235;
  t4778 = 0. + t4764 + t4770;
  t4095 = t1051*t1420;
  t4099 = t235*t1441;
  t4102 = t4095 + t4099;
  t4840 = 0.07996*t754;
  t4858 = -1.*t466;
  t4862 = 1. + t4858;
  t4866 = 0.135*t4862;
  t4872 = 0.08055*t814;
  t4874 = 0. + t4866 + t4872;
  t4886 = -0.01004*t4684;
  t4891 = 0.08055*t933;
  t4892 = 0. + t4886 + t4891;
  t4123 = t1051*t1660;
  t4126 = t235*t1705;
  t4127 = t4123 + t4126;
  t4816 = 0.07996*t4813;
  t4821 = -0.135*t754;
  t4823 = 0. + t4816 + t4821;
  t4828 = 0.135*t4813;
  t4844 = 0. + t4828 + t4840;
  t4615 = 0.135*t814;
  t4146 = t1051*t1914;
  t4152 = t235*t1940;
  t4154 = t4146 + t4152;
  t5045 = -0.08055*t4862;
  t5057 = 0. + t5045 + t4615;
  t4162 = t1051*t2159;
  t4163 = t235*t2179;
  t4168 = t4162 + t4163;
  t4176 = t235*t2297;
  t4178 = t1051*t2323;
  t4186 = t4176 + t4178;
  t4197 = t235*t2411;
  t4199 = t1051*t2425;
  t4201 = t4197 + t4199;
  t4213 = t235*t2493;
  t4222 = t4213 + t4215;
  t4229 = -1.*t235*t2520;
  t4230 = t4229 + t4215;
  t5368 = -1.*t235*t2507;
  t4597 = 0.135*t466;
  t4601 = -0.08055*t814;
  t4602 = t4597 + t4601;
  t4612 = 0.08055*t466;
  t4616 = t4612 + t4615;
  t4239 = t1051*t2655;
  t4242 = t235*t2679;
  t4243 = t4239 + t4242;
  t4251 = t1051*t2779;
  t4255 = t235*t2811;
  t4263 = t4251 + t4255;
  t4941 = -0.135*t483;
  t4943 = t4941 + t4840;
  t4959 = 0.07996*t483;
  t4961 = 0.135*t754;
  t4962 = t4959 + t4961;
  t4267 = t1051*t2952;
  t4270 = t235*t2971;
  t4272 = t4267 + t4270;
  t4281 = t1051*t3113;
  t4282 = t235*t3131;
  t4290 = t4281 + t4282;
  t5190 = -0.01004*t306;
  t5192 = -0.08055*t933;
  t5195 = t5190 + t5192;
  t5204 = 0.08055*t306;
  t5207 = t5204 + t4688;
  t4297 = t235*t3229;
  t4299 = t1051*t3238;
  t4304 = t4297 + t4299;
  t5250 = -0.13004*t920;
  t5252 = -0.08055*t427;
  t5254 = t5250 + t5252;
  t5270 = 0.08055*t920;
  t5275 = t5270 + t4641;
  t4320 = t235*t3319;
  t4321 = t1051*t3345;
  t4325 = t4320 + t4321;
  t5317 = 0.03315*t948;
  t5318 = t5317 + t4740;
  t5333 = -0.19074*t948;
  t5334 = -0.03315*t286;
  t5336 = t5333 + t5334;
  t4333 = t235*t3374;
  t4345 = t4333 + t4339;
  t5406 = -0.62554*t1051;
  t5413 = -0.01315*t235;
  t5414 = t5406 + t5413;
  t5424 = 0.01315*t1051;
  t5427 = t5424 + t4756;
  t4353 = -1.*t235*t3390;
  t4359 = t4353 + t4339;
  t5893 = -1.*t235*t3378;
  t4369 = t1051*t3485;
  t4370 = t235*t3492;
  t4374 = t4369 + t4370;
  t6043 = 0.1305*t466*t3510;
  t6045 = t3510*t4874;
  t6049 = t3510*t814*t4689;
  t6050 = t3518*t4892;
  t6054 = t4642*t3527;
  t6055 = t4706*t3553;
  t6056 = t4736*t3555;
  t6057 = t4741*t3575;
  t6062 = t4760*t3579;
  t6067 = t4778*t3608;
  t6070 = -1.*t235*t3579;
  t6071 = t1051*t3608;
  t6074 = t6070 + t6071;
  t6080 = -0.62554*t6074;
  t6081 = -0.01315*t4382;
  t4389 = t235*t3714;
  t4403 = t1051*t3744;
  t4410 = t4389 + t4403;
  t4418 = t235*t3831;
  t4420 = t1051*t3870;
  t4431 = t4418 + t4420;
  t4442 = t235*t3919;
  t4448 = t4442 + t4443;
  t4453 = -1.*t235*t3958;
  t4461 = t4453 + t4443;
  t6199 = -1.*t235*t3936;
  t4474 = t1051*t4052;
  t4476 = t235*t4068;
  t4477 = t4474 + t4476;
  p_output1[0]=(-1.*t1051*t2179 + t2159*t235)*var2[3] + (-1.*t1051*t1940 + t1914*t235)*var2[4] + (-1.*t1051*t1441 + t1420*t235)*var2[5] + (-1.*t1051*t1705 + t1660*t235)*var2[6] + (-1.*t1051*t1120 + t1021*t235)*var2[7] + (-1.*t1051*t2297 + t2323*t235)*var2[8] + (-1.*t1051*t2411 + t235*t2425)*var2[9] + (-1.*t1051*t2493 + t2508)*var2[10] + t2551*var2[11];
  p_output1[1]=(-1.*t1051*t2507 + t235*t2520)*var2[3] + (t235*t3113 - 1.*t1051*t3131)*var2[4] + (t235*t2779 - 1.*t1051*t2811)*var2[5] + (t235*t2952 - 1.*t1051*t2971)*var2[6] + (t235*t2655 - 1.*t1051*t2679)*var2[7] + (-1.*t1051*t3229 + t235*t3238)*var2[8] + (-1.*t1051*t3319 + t235*t3345)*var2[9] + (-1.*t1051*t3374 + t3379)*var2[10] + (t3379 + t1051*t3390)*var2[11];
  p_output1[2]=(t235*t4052 - 1.*t1051*t4068)*var2[4] + t3619*var2[5] + t3619*var2[6] + (t235*t3485 - 1.*t1051*t3492)*var2[7] + (-1.*t1051*t3714 + t235*t3744)*var2[8] + (-1.*t1051*t3831 + t235*t3870)*var2[9] + (-1.*t1051*t3919 + t3937)*var2[10] + (t3937 + t1051*t3958)*var2[11];
  p_output1[3]=0;
  p_output1[4]=t4168*var2[3] + t4154*var2[4] + t4102*var2[5] + t4127*var2[6] + t4087*var2[7] + t4186*var2[8] + t4201*var2[9] + t4222*var2[10] + t4230*var2[11];
  p_output1[5]=t2551*var2[3] + t4290*var2[4] + t4263*var2[5] + t4272*var2[6] + t4243*var2[7] + t4304*var2[8] + t4325*var2[9] + t4345*var2[10] + t4359*var2[11];
  p_output1[6]=t4477*var2[4] + t4382*var2[5] + t4382*var2[6] + t4374*var2[7] + t4410*var2[8] + t4431*var2[9] + t4448*var2[10] + t4461*var2[11];
  p_output1[7]=0;
  p_output1[8]=(t2604 - 1.*t2049*t466)*var2[3] + (-1.*t1754*t466 - 1.*t617*t635*t814)*var2[4] - 1.*t1232*t466*var2[5] - 1.*t1536*t466*var2[6] + t2198*var2[7];
  p_output1[9]=(-1.*t466*t794 + t617*t807*t814)*var2[3] + (-1.*t3024*t466 - 1.*t567*t635*t814)*var2[4] - 1.*t2713*t466*var2[5] - 1.*t2844*t466*var2[6] + t3167*var2[7];
  p_output1[10]=(-1.*t3976*t466 - 1.*t807*t814)*var2[4] - 1.*t3510*t466*var2[5] - 1.*t3510*t466*var2[6] + t3658*var2[7];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (-0.62554*(t1051*t2179 - 1.*t2159*t235) - 0.01315*t4168 + t2088*t4642 + t2065*t4689 + t2120*t4706 + t2126*t4736 + t2147*t4741 + t2159*t4760 + t2179*t4778 + t2025*t4823 + t2012*t4844 + t2049*t4874 + t2085*t4892 - 1.*t5057*t567*t807 + 0.1305*(t2049*t466 + t567*t807*t814))*var2[3] + (-0.62554*(t1051*t1940 - 1.*t1914*t235) - 0.01315*t4154 + t1798*t4642 + t1770*t4689 + t1850*t4706 + t1865*t4736 + t1885*t4741 + t1914*t4760 + t1940*t4778 + t1754*t4874 + t1792*t4892 - 1.*t5057*t617*t635 + t4823*t523*t617*t807 + t4844*t617*t637*t807 + 0.1305*(t1754*t466 + t617*t635*t814))*var2[4] + (-0.62554*(t1051*t1441 - 1.*t1420*t235) - 0.01315*t4102 + t1280*t4642 + 0.1305*t1232*t466 + t1334*t4706 + t1352*t4736 + t1396*t4741 + t1420*t4760 + t1441*t4778 + t1205*t4823 + t1232*t4874 + t1262*t4892 + t4844*t743 + t1232*t4689*t814)*var2[5] + (-0.62554*(t1051*t1705 - 1.*t1660*t235) - 0.01315*t4127 + t1551*t4642 + 0.1305*t1536*t466 + t1619*t4706 + t1637*t4736 + t1655*t4741 + t1660*t4760 + t1705*t4778 + t1536*t4874 + t1549*t4892 + t4962*t691 + t4943*t743 + t1536*t4689*t814)*var2[6] + (-0.62554*(t1051*t1120 - 1.*t1021*t235) - 0.01315*t4087 + t1021*t4760 + t1120*t4778 + t4616*t794 + t4602*t617*t807 + 0.1305*(-1.*t466*t617*t807 - 1.*t794*t814) + t306*t4642*t876 + t4689*t876 - 1.*t4706*t876*t933 + t4736*t943 + t4741*t993)*var2[7] + (-0.62554*(t1051*t2297 - 1.*t2323*t235) - 0.01315*t4186 + t2227*t4642 + t2205*t4706 + t2286*t4736 + t2258*t4741 + t2323*t4760 + t2297*t4778 + t2198*t5195 + t1536*t5207)*var2[8] + (-0.62554*(t1051*t2411 - 1.*t235*t2425) - 0.01315*t4201 + t2384*t4736 + t2361*t4741 + t2425*t4760 + t2411*t4778 + t2342*t5254 + t2227*t5275)*var2[9] + (-0.01315*t4222 + t2507*t4760 + t2493*t4778 + t2361*t5318 + t2484*t5336 - 0.62554*(t1051*t2493 + t5368))*var2[10] + (-0.01315*t4230 - 0.62554*(-1.*t1051*t2520 + t5368) + t2520*t5414 + t2507*t5427)*var2[11];
  p_output1[13]=var2[1] + (-0.01315*t2551 - 0.62554*t4230 + t2342*t4642 + t2198*t4689 + t2227*t4706 + t2361*t4736 + t2484*t4741 + t2520*t4760 + t2507*t4778 + t1536*t4892 + t4844*t691 + t4823*t743 + t4874*t794 + t5057*t617*t807 + 0.1305*t876)*var2[3] + (-0.62554*(-1.*t235*t3113 + t1051*t3131) - 0.01315*t4290 + t3078*t4642 + t3027*t4689 + t3089*t4706 + t3094*t4736 + t3105*t4741 + t3113*t4760 + t3131*t4778 + t3024*t4874 + t3066*t4892 - 1.*t5057*t567*t635 + t4823*t523*t567*t807 + t4844*t567*t637*t807 + 0.1305*(t3024*t466 + t567*t635*t814))*var2[4] + (-0.62554*(-1.*t235*t2779 + t1051*t2811) - 0.01315*t4263 + t2722*t4642 + 0.1305*t2713*t466 + t2733*t4706 + t2739*t4736 + t2773*t4741 + t2779*t4760 + t2811*t4778 + t2012*t4823 + t2597*t4844 + t2713*t4874 + t2720*t4892 + t2713*t4689*t814)*var2[5] + (-0.62554*(-1.*t235*t2952 + t1051*t2971) - 0.01315*t4272 + t2880*t4642 + 0.1305*t2844*t466 + t2890*t4706 + t2901*t4736 + t2945*t4741 + t2952*t4760 + t2971*t4778 + t2844*t4874 + t2864*t4892 + t2597*t4943 + t2566*t4962 + t2844*t4689*t814)*var2[6] + (-0.62554*(-1.*t235*t2655 + t1051*t2679) - 0.01315*t4243 + t2602*t4616 + t2608*t306*t4642 + t2608*t4689 + t2616*t4736 + t2640*t4741 + t2655*t4760 + t2679*t4778 + t4602*t567*t807 + 0.1305*(t1966 - 1.*t2602*t814) - 1.*t2608*t4706*t933)*var2[7] + (-0.62554*(t1051*t3229 - 1.*t235*t3238) - 0.01315*t4304 + t3192*t4642 + t3186*t4706 + t3216*t4736 + t3201*t4741 + t3238*t4760 + t3229*t4778 + t3167*t5195 + t2844*t5207)*var2[8] + (-0.62554*(t1051*t3319 - 1.*t235*t3345) - 0.01315*t4325 + t3313*t4736 + t3304*t4741 + t3345*t4760 + t3319*t4778 + t3279*t5254 + t3192*t5275)*var2[9] + (-0.01315*t4345 + t3378*t4760 + t3374*t4778 + t3304*t5318 + t3364*t5336 - 0.62554*(t1051*t3374 + t5893))*var2[10] + (-0.01315*t4359 + t3390*t5414 + t3378*t5427 - 0.62554*(-1.*t1051*t3390 + t5893))*var2[11];
  p_output1[14]=var2[2] + (-0.62554*(-1.*t235*t4052 + t1051*t4068) - 0.01315*t4477 + t4013*t4642 + t3982*t4689 + t4020*t4706 + t4031*t4736 + t4050*t4741 + t4052*t4760 + t4068*t4778 + t3976*t4874 + t4003*t4892 - 1.*t4823*t523*t635 - 1.*t4844*t635*t637 - 1.*t5057*t807 + 0.1305*(t3976*t466 + t807*t814))*var2[4] + (t6043 + t6045 + t6049 + t6050 + t6054 + t6055 + t6056 + t6057 + t6062 + t6067 + t6080 + t6081 + t4844*t523*t807 - 1.*t4823*t637*t807)*var2[5] + (t6043 + t6045 + t6049 + t6050 + t6054 + t6055 + t6056 + t6057 + t6062 + t6067 + t6080 + t6081 + t4943*t523*t807 + t4962*t637*t807)*var2[6] + (-0.62554*(-1.*t235*t3485 + t1051*t3492) - 0.01315*t4374 + t3437*t4616 + t306*t3459*t4642 + t3459*t4689 + t3473*t4736 + t3483*t4741 + t3485*t4760 + t3492*t4778 - 1.*t4602*t635 + 0.1305*(t466*t635 - 1.*t3437*t814) - 1.*t3459*t4706*t933)*var2[7] + (-0.62554*(t1051*t3714 - 1.*t235*t3744) - 0.01315*t4410 + t3678*t4642 + t3667*t4706 + t3710*t4736 + t3693*t4741 + t3744*t4760 + t3714*t4778 + t3658*t5195 + t3510*t5207)*var2[8] + (-0.62554*(t1051*t3831 - 1.*t235*t3870) - 0.01315*t4431 + t3814*t4736 + t3786*t4741 + t3870*t4760 + t3831*t4778 + t3780*t5254 + t3678*t5275)*var2[9] + (-0.01315*t4448 + t3936*t4760 + t3919*t4778 + t3786*t5318 + t3907*t5336 - 0.62554*(t1051*t3919 + t6199))*var2[10] + (-0.01315*t4461 + t3958*t5414 + t3936*t5427 - 0.62554*(-1.*t1051*t3958 + t6199))*var2[11];
  p_output1[15]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 4, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "dT_LeftAnkleJoint_mex.hh"

namespace SymExpression
{

void dT_LeftAnkleJoint_mex_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
